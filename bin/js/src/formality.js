module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    }
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var fm_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $9 = c0;
                    return $9;
                case 'o':
                    var $10 = self.slice(0, -1);
                    var $11 = c1($10);
                    return $11;
                case 'i':
                    var $12 = self.slice(0, -1);
                    var $13 = c2($12);
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        var rdl = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout,
            terminal: false
        });
        return run_io(rdl, p).then((x) => {
            rdl.close();
            return x;
        });
    };
    var run_io = (rdl, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, _) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(rdl, p.then(1)).then(res);
                            break;
                        case 'exit':
                            process.exit();
                            break;
                        case 'get_line':
                            rdl.question('', (line) => run_io(rdl, p.then(line)).then(res));
                            break;
                        case 'get_file':
                            try {
                                run_io(rdl, p.then(require('fs').readFileSync(p.param, 'utf8'))).then(res);
                            } catch (e) {
                                console.log('File not found: ' + p.param);
                                process.exit();
                            };
                            break;
                        case 'get_args':
                            run_io(rdl, p.then(process.argv[2] || '')).then(res);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Map$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Map = x0 => Map$(x0);

    function Maybe$(_A$1) {
        var $36 = null;
        return $36;
    };
    const Maybe = x0 => Maybe$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function Map$get$(_bits$2, _map$3) {
        var Map$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $38 = Maybe$none;
                                var $37 = $38;
                                break;
                            case 'Map.tie':
                                var $39 = self.val;
                                var $40 = self.lft;
                                var $41 = self.rgt;
                                var $42 = $39;
                                var $37 = $42;
                                break;
                        };
                        return $37;
                    case 'o':
                        var $43 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $45 = Maybe$none;
                                var $44 = $45;
                                break;
                            case 'Map.tie':
                                var $46 = self.val;
                                var $47 = self.lft;
                                var $48 = self.rgt;
                                var $49 = Map$get$($43, $47);
                                var $44 = $49;
                                break;
                        };
                        return $44;
                    case 'i':
                        var $50 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $52 = Maybe$none;
                                var $51 = $52;
                                break;
                            case 'Map.tie':
                                var $53 = self.val;
                                var $54 = self.lft;
                                var $55 = self.rgt;
                                var $56 = Map$get$($50, $55);
                                var $51 = $56;
                                break;
                        };
                        return $51;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Map$get = x0 => x1 => Map$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $58 = Bool$true;
                var $57 = $58;
                break;
            case 'Cmp.eql':
                var $59 = Bool$true;
                var $57 = $59;
                break;
            case 'Cmp.gtn':
                var $60 = Bool$false;
                var $57 = $60;
                break;
        };
        return $57;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $62 = (_b$5 => {
                    var $63 = _c$4;
                    return $63;
                });
                var $61 = $62;
                break;
            case 'Word.o':
                var $64 = self.pred;
                var $65 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $67 = (_a$pred$8 => {
                                var $68 = _c$4;
                                return $68;
                            });
                            var $66 = $67;
                            break;
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);
                                return $71;
                            });
                            var $66 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, Cmp$ltn);
                                return $74;
                            });
                            var $66 = $73;
                            break;
                    };
                    var $66 = $66($64);
                    return $66;
                });
                var $61 = $65;
                break;
            case 'Word.i':
                var $75 = self.pred;
                var $76 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $78 = (_a$pred$8 => {
                                var $79 = _c$4;
                                return $79;
                            });
                            var $77 = $78;
                            break;
                        case 'Word.o':
                            var $80 = self.pred;
                            var $81 = (_a$pred$10 => {
                                var $82 = Word$cmp$go$(_a$pred$10, $80, Cmp$gtn);
                                return $82;
                            });
                            var $77 = $81;
                            break;
                        case 'Word.i':
                            var $83 = self.pred;
                            var $84 = (_a$pred$10 => {
                                var $85 = Word$cmp$go$(_a$pred$10, $83, _c$4);
                                return $85;
                            });
                            var $77 = $84;
                            break;
                    };
                    var $77 = $77($75);
                    return $77;
                });
                var $61 = $76;
                break;
        };
        var $61 = $61(_b$3);
        return $61;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $86 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $86;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $87 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $87;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $88 = 1n + _pred$1;
        return $88;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $89 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $89;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $90 = word_to_u16(_value$1);
        return $90;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $91 = null;
        return $91;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $92 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $92;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $93 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $93;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $95 = (_b$5 => {
                    var $96 = Word$e;
                    return $96;
                });
                var $94 = $95;
                break;
            case 'Word.o':
                var $97 = self.pred;
                var $98 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $100 = (_a$pred$8 => {
                                var $101 = Word$e;
                                return $101;
                            });
                            var $99 = $100;
                            break;
                        case 'Word.o':
                            var $102 = self.pred;
                            var $103 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $105 = Word$i$(Word$subber$(_a$pred$10, $102, Bool$true));
                                    var $104 = $105;
                                } else {
                                    var $106 = Word$o$(Word$subber$(_a$pred$10, $102, Bool$false));
                                    var $104 = $106;
                                };
                                return $104;
                            });
                            var $99 = $103;
                            break;
                        case 'Word.i':
                            var $107 = self.pred;
                            var $108 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $110 = Word$o$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $110;
                                } else {
                                    var $111 = Word$i$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $111;
                                };
                                return $109;
                            });
                            var $99 = $108;
                            break;
                    };
                    var $99 = $99($97);
                    return $99;
                });
                var $94 = $98;
                break;
            case 'Word.i':
                var $112 = self.pred;
                var $113 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $115 = (_a$pred$8 => {
                                var $116 = Word$e;
                                return $116;
                            });
                            var $114 = $115;
                            break;
                        case 'Word.o':
                            var $117 = self.pred;
                            var $118 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $120 = Word$o$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $120;
                                } else {
                                    var $121 = Word$i$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $121;
                                };
                                return $119;
                            });
                            var $114 = $118;
                            break;
                        case 'Word.i':
                            var $122 = self.pred;
                            var $123 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $125 = Word$i$(Word$subber$(_a$pred$10, $122, Bool$true));
                                    var $124 = $125;
                                } else {
                                    var $126 = Word$o$(Word$subber$(_a$pred$10, $122, Bool$false));
                                    var $124 = $126;
                                };
                                return $124;
                            });
                            var $114 = $123;
                            break;
                    };
                    var $114 = $114($112);
                    return $114;
                });
                var $94 = $113;
                break;
        };
        var $94 = $94(_b$3);
        return $94;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $127 = Word$subber$(_a$2, _b$3, Bool$false);
        return $127;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $128 = _x$4;
                    return $128;
                } else {
                    var $129 = (self - 1n);
                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));
                    return $130;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.e':
                var $132 = Word$e;
                var $131 = $132;
                break;
            case 'Word.o':
                var $133 = self.pred;
                var $134 = Word$i$($133);
                var $131 = $134;
                break;
            case 'Word.i':
                var $135 = self.pred;
                var $136 = Word$o$(Word$inc$($135));
                var $131 = $136;
                break;
        };
        return $131;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $138 = u16_to_word(self);
                var $139 = U16$new$(Word$inc$($138));
                var $137 = $139;
                break;
        };
        return $137;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $141 = Word$e;
            var $140 = $141;
        } else {
            var $142 = (self - 1n);
            var $143 = Word$o$(Word$zero$($142));
            var $140 = $143;
        };
        return $140;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $145 = (_b$5 => {
                    var $146 = Word$e;
                    return $146;
                });
                var $144 = $145;
                break;
            case 'Word.o':
                var $147 = self.pred;
                var $148 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $149 = $150;
                            break;
                        case 'Word.o':
                            var $152 = self.pred;
                            var $153 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $155;
                                } else {
                                    var $156 = Word$o$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $156;
                                };
                                return $154;
                            });
                            var $149 = $153;
                            break;
                        case 'Word.i':
                            var $157 = self.pred;
                            var $158 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $157, Bool$true));
                                    var $159 = $160;
                                } else {
                                    var $161 = Word$i$(Word$adder$(_a$pred$10, $157, Bool$false));
                                    var $159 = $161;
                                };
                                return $159;
                            });
                            var $149 = $158;
                            break;
                    };
                    var $149 = $149($147);
                    return $149;
                });
                var $144 = $148;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $165 = (_a$pred$8 => {
                                var $166 = Word$e;
                                return $166;
                            });
                            var $164 = $165;
                            break;
                        case 'Word.o':
                            var $167 = self.pred;
                            var $168 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $167, Bool$true));
                                    var $169 = $170;
                                } else {
                                    var $171 = Word$i$(Word$adder$(_a$pred$10, $167, Bool$false));
                                    var $169 = $171;
                                };
                                return $169;
                            });
                            var $164 = $168;
                            break;
                        case 'Word.i':
                            var $172 = self.pred;
                            var $173 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $175 = Word$i$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $175;
                                } else {
                                    var $176 = Word$o$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $176;
                                };
                                return $174;
                            });
                            var $164 = $173;
                            break;
                    };
                    var $164 = $164($162);
                    return $164;
                });
                var $144 = $163;
                break;
        };
        var $144 = $144(_b$3);
        return $144;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $177 = Word$adder$(_a$2, _b$3, Bool$false);
        return $177;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $179 = Bool$false;
                var $178 = $179;
                break;
            case 'Cmp.eql':
                var $180 = Bool$true;
                var $178 = $180;
                break;
            case 'Cmp.gtn':
                var $181 = Bool$false;
                var $178 = $181;
                break;
        };
        return $178;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $182 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $182;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $184 = Bits$e;
                var $183 = $184;
                break;
            case 'Word.o':
                var $185 = self.pred;
                var $186 = (Word$to_bits$($185) + '0');
                var $183 = $186;
                break;
            case 'Word.i':
                var $187 = self.pred;
                var $188 = (Word$to_bits$($187) + '1');
                var $183 = $188;
                break;
        };
        return $183;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $190 = Word$e;
            var $189 = $190;
        } else {
            var $191 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.e':
                    var $193 = Word$o$(Word$trim$($191, Word$e));
                    var $192 = $193;
                    break;
                case 'Word.o':
                    var $194 = self.pred;
                    var $195 = Word$o$(Word$trim$($191, $194));
                    var $192 = $195;
                    break;
                case 'Word.i':
                    var $196 = self.pred;
                    var $197 = Word$i$(Word$trim$($191, $196));
                    var $192 = $197;
                    break;
            };
            var $189 = $192;
        };
        return $189;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $198 = _r$2;
                        return $198;
                    case 'o':
                        var $199 = self.slice(0, -1);
                        var $200 = Bits$reverse$tco$($199, (_r$2 + '0'));
                        return $200;
                    case 'i':
                        var $201 = self.slice(0, -1);
                        var $202 = Bits$reverse$tco$($201, (_r$2 + '1'));
                        return $202;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $203 = Bits$reverse$tco$(_a$1, Bits$e);
        return $203;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Fm$Name$to_bits = a0 => (fm_name_to_bits(a0));

    function Fm$get$(_name$2, _map$3) {
        var $204 = Map$get$((fm_name_to_bits(_name$2)), _map$3);
        return $204;
    };
    const Fm$get = x0 => x1 => Fm$get$(x0, x1);

    function String$cons$(_head$1, _tail$2) {
        var $205 = (String.fromCharCode(_head$1) + _tail$2);
        return $205;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);

    function Fm$Synth$file_of$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $207 = ".fm";
            var $206 = $207;
        } else {
            var $208 = self.charCodeAt(0);
            var $209 = self.slice(1);
            var self = ($208 === 46);
            if (self) {
                var $211 = ".fm";
                var $210 = $211;
            } else {
                var $212 = String$cons$($208, Fm$Synth$file_of$($209));
                var $210 = $212;
            };
            var $206 = $210;
        };
        return $206;
    };
    const Fm$Synth$file_of = x0 => Fm$Synth$file_of$(x0);

    function IO$get_file$(_name$1) {
        var $213 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $214 = IO$end$(_file$2);
            return $214;
        }));
        return $213;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $215 = null;
        return $215;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $216 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $216;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $218 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $217 = $218;
        } else {
            var $219 = self.charCodeAt(0);
            var $220 = self.slice(1);
            var $221 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $217 = $221;
        };
        return $217;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $222 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $222;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $223 = null;
        return $223;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $224 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $224;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $225 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $225;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.none':
                var $227 = _b$2;
                var $226 = $227;
                break;
            case 'Maybe.some':
                var $228 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.none':
                        var $230 = _a$1;
                        var $229 = $230;
                        break;
                    case 'Maybe.some':
                        var $231 = self.value;
                        var self = $228;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $233 = self.idx;
                                var $234 = self.code;
                                var $235 = self.err;
                                var self = $231;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $237 = self.idx;
                                        var $238 = self.code;
                                        var $239 = self.err;
                                        var self = ($233 > $237);
                                        if (self) {
                                            var $241 = _a$1;
                                            var $240 = $241;
                                        } else {
                                            var $242 = _b$2;
                                            var $240 = $242;
                                        };
                                        var $236 = $240;
                                        break;
                                };
                                var $232 = $236;
                                break;
                        };
                        var $229 = $232;
                        break;
                };
                var $226 = $229;
                break;
        };
        return $226;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.none':
                                var $244 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $243 = $244;
                                break;
                            case 'Maybe.some':
                                var $245 = self.value;
                                var self = $245;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $247 = self.idx;
                                        var $248 = self.code;
                                        var $249 = self.err;
                                        var $250 = Parser$Reply$error$($247, $248, $249);
                                        var $246 = $250;
                                        break;
                                };
                                var $243 = $246;
                                break;
                        };
                        return $243;
                    case 'List.cons':
                        var $251 = self.head;
                        var $252 = self.tail;
                        var _parsed$8 = $251(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $254 = self.idx;
                                var $255 = self.code;
                                var $256 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($254, $255, $256));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $257 = Parser$first_of$go$($252, _err$13, _idx$4, _code$5);
                                var $253 = $257;
                                break;
                            case 'Parser.Reply.value':
                                var $258 = self.idx;
                                var $259 = self.code;
                                var $260 = self.val;
                                var $261 = Parser$Reply$value$($258, $259, $260);
                                var $253 = $261;
                                break;
                        };
                        return $253;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $262 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $262;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $263 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $263;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $264 = null;
        return $264;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $265 = self.idx;
                        var $266 = self.code;
                        var $267 = self.err;
                        var $268 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $268;
                    case 'Parser.Reply.value':
                        var $269 = self.idx;
                        var $270 = self.code;
                        var $271 = self.val;
                        var $272 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $273 = _values$3(List$cons$($271, _xs$9));
                            return $273;
                        }), $269, $270);
                        return $272;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $274 = Parser$many$go(_parser$2)((_x$3 => {
            var $275 = _x$3;
            return $275;
        }));
        return $274;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.nil':
                        var $276 = _res$2;
                        return $276;
                    case 'List.cons':
                        var $277 = self.head;
                        var $278 = self.tail;
                        var $279 = String$flatten$go$($278, (_res$2 + $277));
                        return $279;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $280 = String$flatten$go$(_xs$1, "");
        return $280;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $282 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $281 = $282;
        } else {
            var $283 = self.charCodeAt(0);
            var $284 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $286 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $285 = $286;
            } else {
                var $287 = self.charCodeAt(0);
                var $288 = self.slice(1);
                var self = ($283 === $287);
                if (self) {
                    var $290 = Parser$text$($284, Nat$succ$(_idx$2), $288);
                    var $289 = $290;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($287, String$nil), List$cons$("\'.", List$nil))))));
                    var $291 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $289 = $291;
                };
                var $285 = $289;
            };
            var $281 = $285;
        };
        return $281;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $293 = self.idx;
                var $294 = self.code;
                var $295 = self.err;
                var $296 = Parser$Reply$error$(_idx$2, _code$3, $295);
                var $292 = $296;
                break;
            case 'Parser.Reply.value':
                var $297 = self.idx;
                var $298 = self.code;
                var $299 = self.val;
                var $300 = Parser$Reply$value$($297, $298, $299);
                var $292 = $300;
                break;
        };
        return $292;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $302 = self.idx;
                        var $303 = self.code;
                        var $304 = self.err;
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $306 = self.idx;
                                var $307 = self.code;
                                var $308 = self.err;
                                var $309 = Parser$Reply$error$($306, $307, $308);
                                var $305 = $309;
                                break;
                            case 'Parser.Reply.value':
                                var $310 = self.idx;
                                var $311 = self.code;
                                var $312 = self.val;
                                var $313 = Parser$until$go$(_until$2, _parse$3, (_xs$15 => {
                                    var $314 = _values$4(List$cons$($312, _xs$15));
                                    return $314;
                                }), $310, $311);
                                var $305 = $313;
                                break;
                        };
                        var $301 = $305;
                        break;
                    case 'Parser.Reply.value':
                        var $315 = self.idx;
                        var $316 = self.code;
                        var $317 = self.val;
                        var $318 = Parser$Reply$value$($315, $316, _values$4(List$nil));
                        var $301 = $318;
                        break;
                };
                return $301;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $319 = Parser$until$go(_until$2)(_parse$3)((_x$4 => {
            var $320 = _x$4;
            return $320;
        }));
        return $319;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $322 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $321 = $322;
        } else {
            var $323 = self.charCodeAt(0);
            var $324 = self.slice(1);
            var $325 = Parser$Reply$value$(Nat$succ$(_idx$1), $324, $323);
            var $321 = $325;
        };
        return $321;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Fm$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $327 = self.idx;
                var $328 = self.code;
                var $329 = self.err;
                var $330 = Parser$Reply$error$($327, $328, $329);
                var $326 = $330;
                break;
            case 'Parser.Reply.value':
                var $331 = self.idx;
                var $332 = self.code;
                var $333 = self.val;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($331)($332);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $335 = self.idx;
                        var $336 = self.code;
                        var $337 = self.err;
                        var $338 = Parser$Reply$error$($335, $336, $337);
                        var $334 = $338;
                        break;
                    case 'Parser.Reply.value':
                        var $339 = self.idx;
                        var $340 = self.code;
                        var $341 = self.val;
                        var $342 = Parser$Reply$value$($339, $340, Unit$new);
                        var $334 = $342;
                        break;
                };
                var $326 = $334;
                break;
        };
        return $326;
    }), List$nil)))));

    function Fm$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Fm$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $344 = self.idx;
                var $345 = self.code;
                var $346 = self.err;
                var $347 = Parser$Reply$error$($344, $345, $346);
                var $343 = $347;
                break;
            case 'Parser.Reply.value':
                var $348 = self.idx;
                var $349 = self.code;
                var $350 = self.val;
                var $351 = Parser$text$(_text$1, $348, $349);
                var $343 = $351;
                break;
        };
        return $343;
    };
    const Fm$Parser$text = x0 => x1 => x2 => Fm$Parser$text$(x0, x1, x2);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $353 = self.idx;
                var $354 = self.code;
                var $355 = self.err;
                var $356 = Parser$Reply$error$($353, $354, $355);
                var $352 = $356;
                break;
            case 'Parser.Reply.value':
                var $357 = self.idx;
                var $358 = self.code;
                var $359 = self.val;
                var self = Parser$many$(_parser$2)($357)($358);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $361 = self.idx;
                        var $362 = self.code;
                        var $363 = self.err;
                        var $364 = Parser$Reply$error$($361, $362, $363);
                        var $360 = $364;
                        break;
                    case 'Parser.Reply.value':
                        var $365 = self.idx;
                        var $366 = self.code;
                        var $367 = self.val;
                        var $368 = Parser$Reply$value$($365, $366, List$cons$($359, $367));
                        var $360 = $368;
                        break;
                };
                var $352 = $360;
                break;
        };
        return $352;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Fm$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $370 = Bool$true;
            var $369 = $370;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $372 = Bool$true;
                var $371 = $372;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $374 = Bool$true;
                    var $373 = $374;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $376 = Bool$true;
                        var $375 = $376;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $378 = Bool$true;
                            var $377 = $378;
                        } else {
                            var $379 = Bool$false;
                            var $377 = $379;
                        };
                        var $375 = $377;
                    };
                    var $373 = $375;
                };
                var $371 = $373;
            };
            var $369 = $371;
        };
        return $369;
    };
    const Fm$Name$is_letter = x0 => Fm$Name$is_letter$(x0);

    function Fm$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $381 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $380 = $381;
        } else {
            var $382 = self.charCodeAt(0);
            var $383 = self.slice(1);
            var self = Fm$Name$is_letter$($382);
            if (self) {
                var $385 = Parser$Reply$value$(Nat$succ$(_idx$1), $383, $382);
                var $384 = $385;
            } else {
                var $386 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $384 = $386;
            };
            var $380 = $384;
        };
        return $380;
    };
    const Fm$Parser$letter = x0 => x1 => Fm$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $388 = _nil$4;
                var $387 = $388;
                break;
            case 'List.cons':
                var $389 = self.head;
                var $390 = self.tail;
                var $391 = _cons$5($389)(List$fold$($390, _nil$4, _cons$5));
                var $387 = $391;
                break;
        };
        return $387;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Fm$Parser$name1$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $393 = self.idx;
                var $394 = self.code;
                var $395 = self.err;
                var $396 = Parser$Reply$error$($393, $394, $395);
                var $392 = $396;
                break;
            case 'Parser.Reply.value':
                var $397 = self.idx;
                var $398 = self.code;
                var $399 = self.val;
                var self = Parser$many1$(Fm$Parser$letter, $397, $398);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $401 = self.idx;
                        var $402 = self.code;
                        var $403 = self.err;
                        var $404 = Parser$Reply$error$($401, $402, $403);
                        var $400 = $404;
                        break;
                    case 'Parser.Reply.value':
                        var $405 = self.idx;
                        var $406 = self.code;
                        var $407 = self.val;
                        var $408 = Parser$Reply$value$($405, $406, List$fold$($407, String$nil, String$cons));
                        var $400 = $408;
                        break;
                };
                var $392 = $400;
                break;
        };
        return $392;
    };
    const Fm$Parser$name1 = x0 => x1 => Fm$Parser$name1$(x0, x1);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $410 = self.idx;
                var $411 = self.code;
                var $412 = self.err;
                var $413 = Parser$Reply$error$($410, $411, $412);
                var $409 = $413;
                break;
            case 'Parser.Reply.value':
                var $414 = self.idx;
                var $415 = self.code;
                var $416 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($414)($415);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $418 = self.idx;
                        var $419 = self.code;
                        var $420 = self.err;
                        var $421 = Parser$Reply$error$($418, $419, $420);
                        var $417 = $421;
                        break;
                    case 'Parser.Reply.value':
                        var $422 = self.idx;
                        var $423 = self.code;
                        var $424 = self.val;
                        var $425 = Parser$Reply$value$($422, $423, List$cons$($416, $424));
                        var $417 = $425;
                        break;
                };
                var $409 = $417;
                break;
        };
        return $409;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $426 = null;
        return $426;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $428 = self.idx;
                var $429 = self.code;
                var $430 = self.err;
                var $431 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $427 = $431;
                break;
            case 'Parser.Reply.value':
                var $432 = self.idx;
                var $433 = self.code;
                var $434 = self.val;
                var $435 = Parser$Reply$value$($432, $433, Maybe$some$($434));
                var $427 = $435;
                break;
        };
        return $427;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Fm$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Fm$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $437 = self.idx;
                var $438 = self.code;
                var $439 = self.err;
                var $440 = Parser$Reply$error$($437, $438, $439);
                var $436 = $440;
                break;
            case 'Parser.Reply.value':
                var $441 = self.idx;
                var $442 = self.code;
                var $443 = self.val;
                var self = _parser$2($441)($442);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $445 = self.idx;
                        var $446 = self.code;
                        var $447 = self.err;
                        var $448 = Parser$Reply$error$($445, $446, $447);
                        var $444 = $448;
                        break;
                    case 'Parser.Reply.value':
                        var $449 = self.idx;
                        var $450 = self.code;
                        var $451 = self.val;
                        var self = Parser$maybe$(Fm$Parser$text(","), $449, $450);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $453 = self.idx;
                                var $454 = self.code;
                                var $455 = self.err;
                                var $456 = Parser$Reply$error$($453, $454, $455);
                                var $452 = $456;
                                break;
                            case 'Parser.Reply.value':
                                var $457 = self.idx;
                                var $458 = self.code;
                                var $459 = self.val;
                                var $460 = Parser$Reply$value$($457, $458, $451);
                                var $452 = $460;
                                break;
                        };
                        var $444 = $452;
                        break;
                };
                var $436 = $444;
                break;
        };
        return $436;
    };
    const Fm$Parser$item = x0 => x1 => x2 => Fm$Parser$item$(x0, x1, x2);

    function Fm$Parser$name$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $462 = self.idx;
                var $463 = self.code;
                var $464 = self.err;
                var $465 = Parser$Reply$error$($462, $463, $464);
                var $461 = $465;
                break;
            case 'Parser.Reply.value':
                var $466 = self.idx;
                var $467 = self.code;
                var $468 = self.val;
                var self = Parser$many$(Fm$Parser$letter)($466)($467);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $470 = self.idx;
                        var $471 = self.code;
                        var $472 = self.err;
                        var $473 = Parser$Reply$error$($470, $471, $472);
                        var $469 = $473;
                        break;
                    case 'Parser.Reply.value':
                        var $474 = self.idx;
                        var $475 = self.code;
                        var $476 = self.val;
                        var $477 = Parser$Reply$value$($474, $475, List$fold$($476, String$nil, String$cons));
                        var $469 = $477;
                        break;
                };
                var $461 = $469;
                break;
        };
        return $461;
    };
    const Fm$Parser$name = x0 => x1 => Fm$Parser$name$(x0, x1);

    function Parser$get_code$(_idx$1, _code$2) {
        var $478 = Parser$Reply$value$(_idx$1, _code$2, _code$2);
        return $478;
    };
    const Parser$get_code = x0 => x1 => Parser$get_code$(x0, x1);

    function Parser$get_index$(_idx$1, _code$2) {
        var $479 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $479;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Fm$Parser$init$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $481 = self.idx;
                var $482 = self.code;
                var $483 = self.err;
                var $484 = Parser$Reply$error$($481, $482, $483);
                var $480 = $484;
                break;
            case 'Parser.Reply.value':
                var $485 = self.idx;
                var $486 = self.code;
                var $487 = self.val;
                var self = Parser$get_index$($485, $486);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $489 = self.idx;
                        var $490 = self.code;
                        var $491 = self.err;
                        var $492 = Parser$Reply$error$($489, $490, $491);
                        var $488 = $492;
                        break;
                    case 'Parser.Reply.value':
                        var $493 = self.idx;
                        var $494 = self.code;
                        var $495 = self.val;
                        var $496 = Parser$Reply$value$($493, $494, $495);
                        var $488 = $496;
                        break;
                };
                var $480 = $488;
                break;
        };
        return $480;
    };
    const Fm$Parser$init = x0 => x1 => Fm$Parser$init$(x0, x1);

    function Fm$Origin$new$(_file$1, _from$2, _upto$3) {
        var $497 = ({
            _: 'Fm.Origin.new',
            'file': _file$1,
            'from': _from$2,
            'upto': _upto$3
        });
        return $497;
    };
    const Fm$Origin$new = x0 => x1 => x2 => Fm$Origin$new$(x0, x1, x2);

    function Fm$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $499 = self.idx;
                var $500 = self.code;
                var $501 = self.err;
                var $502 = Parser$Reply$error$($499, $500, $501);
                var $498 = $502;
                break;
            case 'Parser.Reply.value':
                var $503 = self.idx;
                var $504 = self.code;
                var $505 = self.val;
                var _orig$7 = Fm$Origin$new$("", _from$1, $505);
                var $506 = Parser$Reply$value$($503, $504, _orig$7);
                var $498 = $506;
                break;
        };
        return $498;
    };
    const Fm$Parser$stop = x0 => x1 => x2 => Fm$Parser$stop$(x0, x1, x2);

    function Fm$Term$ori$(_orig$1, _expr$2) {
        var $507 = ({
            _: 'Fm.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $507;
    };
    const Fm$Term$ori = x0 => x1 => Fm$Term$ori$(x0, x1);
    const Fm$Term$typ = ({
        _: 'Fm.Term.typ'
    });

    function Fm$Parser$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $509 = self.idx;
                var $510 = self.code;
                var $511 = self.err;
                var $512 = Parser$Reply$error$($509, $510, $511);
                var $508 = $512;
                break;
            case 'Parser.Reply.value':
                var $513 = self.idx;
                var $514 = self.code;
                var $515 = self.val;
                var self = Fm$Parser$text$("Type", $513, $514);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $517 = self.idx;
                        var $518 = self.code;
                        var $519 = self.err;
                        var $520 = Parser$Reply$error$($517, $518, $519);
                        var $516 = $520;
                        break;
                    case 'Parser.Reply.value':
                        var $521 = self.idx;
                        var $522 = self.code;
                        var $523 = self.val;
                        var self = Fm$Parser$stop$($515, $521, $522);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $525 = self.idx;
                                var $526 = self.code;
                                var $527 = self.err;
                                var $528 = Parser$Reply$error$($525, $526, $527);
                                var $524 = $528;
                                break;
                            case 'Parser.Reply.value':
                                var $529 = self.idx;
                                var $530 = self.code;
                                var $531 = self.val;
                                var $532 = Parser$Reply$value$($529, $530, Fm$Term$ori$($531, Fm$Term$typ));
                                var $524 = $532;
                                break;
                        };
                        var $516 = $524;
                        break;
                };
                var $508 = $516;
                break;
        };
        return $508;
    };
    const Fm$Parser$type = x0 => x1 => Fm$Parser$type$(x0, x1);

    function Fm$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $533 = ({
            _: 'Fm.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $533;
    };
    const Fm$Term$all = x0 => x1 => x2 => x3 => x4 => Fm$Term$all$(x0, x1, x2, x3, x4);

    function Fm$Parser$forall$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $535 = self.idx;
                var $536 = self.code;
                var $537 = self.err;
                var $538 = Parser$Reply$error$($535, $536, $537);
                var $534 = $538;
                break;
            case 'Parser.Reply.value':
                var $539 = self.idx;
                var $540 = self.code;
                var $541 = self.val;
                var self = Fm$Parser$name$($539, $540);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $543 = self.idx;
                        var $544 = self.code;
                        var $545 = self.err;
                        var $546 = Parser$Reply$error$($543, $544, $545);
                        var $542 = $546;
                        break;
                    case 'Parser.Reply.value':
                        var $547 = self.idx;
                        var $548 = self.code;
                        var $549 = self.val;
                        var self = Fm$Parser$binder$($547, $548);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $551 = self.idx;
                                var $552 = self.code;
                                var $553 = self.err;
                                var $554 = Parser$Reply$error$($551, $552, $553);
                                var $550 = $554;
                                break;
                            case 'Parser.Reply.value':
                                var $555 = self.idx;
                                var $556 = self.code;
                                var $557 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text("->"), $555, $556);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $559 = self.idx;
                                        var $560 = self.code;
                                        var $561 = self.err;
                                        var $562 = Parser$Reply$error$($559, $560, $561);
                                        var $558 = $562;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $563 = self.idx;
                                        var $564 = self.code;
                                        var $565 = self.val;
                                        var self = Fm$Parser$term$($563, $564);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $567 = self.idx;
                                                var $568 = self.code;
                                                var $569 = self.err;
                                                var $570 = Parser$Reply$error$($567, $568, $569);
                                                var $566 = $570;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $571 = self.idx;
                                                var $572 = self.code;
                                                var $573 = self.val;
                                                var _term$18 = List$fold$($557, $573, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $576 = self.eras;
                                                            var $577 = self.name;
                                                            var $578 = self.term;
                                                            var $579 = Fm$Term$all$($576, "", $577, $578, (_s$23 => _x$24 => {
                                                                var $580 = _t$19;
                                                                return $580;
                                                            }));
                                                            var $575 = $579;
                                                            break;
                                                    };
                                                    return $575;
                                                }));
                                                var self = Fm$Parser$stop$($541, $571, $572);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $581 = self.idx;
                                                        var $582 = self.code;
                                                        var $583 = self.err;
                                                        var $584 = Parser$Reply$error$($581, $582, $583);
                                                        var $574 = $584;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $585 = self.idx;
                                                        var $586 = self.code;
                                                        var $587 = self.val;
                                                        var $588 = Parser$Reply$value$($585, $586, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Fm.Term.var':
                                                                    var $589 = self.name;
                                                                    var $590 = self.indx;
                                                                    var $591 = _term$18;
                                                                    return $591;
                                                                case 'Fm.Term.ref':
                                                                    var $592 = self.name;
                                                                    var $593 = _term$18;
                                                                    return $593;
                                                                case 'Fm.Term.typ':
                                                                    var $594 = _term$18;
                                                                    return $594;
                                                                case 'Fm.Term.all':
                                                                    var $595 = self.eras;
                                                                    var $596 = self.self;
                                                                    var $597 = self.name;
                                                                    var $598 = self.xtyp;
                                                                    var $599 = self.body;
                                                                    var $600 = Fm$Term$ori$($587, Fm$Term$all$($595, $549, $597, $598, $599));
                                                                    return $600;
                                                                case 'Fm.Term.lam':
                                                                    var $601 = self.name;
                                                                    var $602 = self.body;
                                                                    var $603 = _term$18;
                                                                    return $603;
                                                                case 'Fm.Term.app':
                                                                    var $604 = self.func;
                                                                    var $605 = self.argm;
                                                                    var $606 = _term$18;
                                                                    return $606;
                                                                case 'Fm.Term.let':
                                                                    var $607 = self.name;
                                                                    var $608 = self.expr;
                                                                    var $609 = self.body;
                                                                    var $610 = _term$18;
                                                                    return $610;
                                                                case 'Fm.Term.def':
                                                                    var $611 = self.name;
                                                                    var $612 = self.expr;
                                                                    var $613 = self.body;
                                                                    var $614 = _term$18;
                                                                    return $614;
                                                                case 'Fm.Term.ann':
                                                                    var $615 = self.done;
                                                                    var $616 = self.term;
                                                                    var $617 = self.type;
                                                                    var $618 = _term$18;
                                                                    return $618;
                                                                case 'Fm.Term.gol':
                                                                    var $619 = self.name;
                                                                    var $620 = self.dref;
                                                                    var $621 = self.verb;
                                                                    var $622 = _term$18;
                                                                    return $622;
                                                                case 'Fm.Term.hol':
                                                                    var $623 = self.path;
                                                                    var $624 = _term$18;
                                                                    return $624;
                                                                case 'Fm.Term.nat':
                                                                    var $625 = self.natx;
                                                                    var $626 = _term$18;
                                                                    return $626;
                                                                case 'Fm.Term.chr':
                                                                    var $627 = self.chrx;
                                                                    var $628 = _term$18;
                                                                    return $628;
                                                                case 'Fm.Term.str':
                                                                    var $629 = self.strx;
                                                                    var $630 = _term$18;
                                                                    return $630;
                                                                case 'Fm.Term.cse':
                                                                    var $631 = self.path;
                                                                    var $632 = self.expr;
                                                                    var $633 = self.name;
                                                                    var $634 = self.with;
                                                                    var $635 = self.cses;
                                                                    var $636 = self.moti;
                                                                    var $637 = _term$18;
                                                                    return $637;
                                                                case 'Fm.Term.ori':
                                                                    var $638 = self.orig;
                                                                    var $639 = self.expr;
                                                                    var $640 = _term$18;
                                                                    return $640;
                                                            };
                                                        })());
                                                        var $574 = $588;
                                                        break;
                                                };
                                                var $566 = $574;
                                                break;
                                        };
                                        var $558 = $566;
                                        break;
                                };
                                var $550 = $558;
                                break;
                        };
                        var $542 = $550;
                        break;
                };
                var $534 = $542;
                break;
        };
        return $534;
    };
    const Fm$Parser$forall = x0 => x1 => Fm$Parser$forall$(x0, x1);

    function Fm$Term$lam$(_name$1, _body$2) {
        var $641 = ({
            _: 'Fm.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $641;
    };
    const Fm$Term$lam = x0 => x1 => Fm$Term$lam$(x0, x1);

    function Fm$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $643 = _body$2;
                var $642 = $643;
                break;
            case 'List.cons':
                var $644 = self.head;
                var $645 = self.tail;
                var $646 = Fm$Term$lam$($644, (_x$5 => {
                    var $647 = Fm$Parser$make_lambda$($645, _body$2);
                    return $647;
                }));
                var $642 = $646;
                break;
        };
        return $642;
    };
    const Fm$Parser$make_lambda = x0 => x1 => Fm$Parser$make_lambda$(x0, x1);

    function Fm$Parser$lambda$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $649 = self.idx;
                var $650 = self.code;
                var $651 = self.err;
                var $652 = Parser$Reply$error$($649, $650, $651);
                var $648 = $652;
                break;
            case 'Parser.Reply.value':
                var $653 = self.idx;
                var $654 = self.code;
                var $655 = self.val;
                var self = Fm$Parser$text$("(", $653, $654);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $657 = self.idx;
                        var $658 = self.code;
                        var $659 = self.err;
                        var $660 = Parser$Reply$error$($657, $658, $659);
                        var $656 = $660;
                        break;
                    case 'Parser.Reply.value':
                        var $661 = self.idx;
                        var $662 = self.code;
                        var $663 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$name1), $661, $662);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $665 = self.idx;
                                var $666 = self.code;
                                var $667 = self.err;
                                var $668 = Parser$Reply$error$($665, $666, $667);
                                var $664 = $668;
                                break;
                            case 'Parser.Reply.value':
                                var $669 = self.idx;
                                var $670 = self.code;
                                var $671 = self.val;
                                var self = Fm$Parser$term$($669, $670);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $673 = self.idx;
                                        var $674 = self.code;
                                        var $675 = self.err;
                                        var $676 = Parser$Reply$error$($673, $674, $675);
                                        var $672 = $676;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $677 = self.idx;
                                        var $678 = self.code;
                                        var $679 = self.val;
                                        var self = Fm$Parser$stop$($655, $677, $678);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $681 = self.idx;
                                                var $682 = self.code;
                                                var $683 = self.err;
                                                var $684 = Parser$Reply$error$($681, $682, $683);
                                                var $680 = $684;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $685 = self.idx;
                                                var $686 = self.code;
                                                var $687 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($671, $679);
                                                var $688 = Parser$Reply$value$($685, $686, Fm$Term$ori$($687, _expr$18));
                                                var $680 = $688;
                                                break;
                                        };
                                        var $672 = $680;
                                        break;
                                };
                                var $664 = $672;
                                break;
                        };
                        var $656 = $664;
                        break;
                };
                var $648 = $656;
                break;
        };
        return $648;
    };
    const Fm$Parser$lambda = x0 => x1 => Fm$Parser$lambda$(x0, x1);

    function Fm$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $690 = self.idx;
                var $691 = self.code;
                var $692 = self.err;
                var $693 = Parser$Reply$error$($690, $691, $692);
                var $689 = $693;
                break;
            case 'Parser.Reply.value':
                var $694 = self.idx;
                var $695 = self.code;
                var $696 = self.val;
                var self = Fm$Parser$text$("<", $694, $695);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $698 = self.idx;
                        var $699 = self.code;
                        var $700 = self.err;
                        var $701 = Parser$Reply$error$($698, $699, $700);
                        var $697 = $701;
                        break;
                    case 'Parser.Reply.value':
                        var $702 = self.idx;
                        var $703 = self.code;
                        var $704 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(">"), Fm$Parser$item(Fm$Parser$name1), $702, $703);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $706 = self.idx;
                                var $707 = self.code;
                                var $708 = self.err;
                                var $709 = Parser$Reply$error$($706, $707, $708);
                                var $705 = $709;
                                break;
                            case 'Parser.Reply.value':
                                var $710 = self.idx;
                                var $711 = self.code;
                                var $712 = self.val;
                                var self = Fm$Parser$term$($710, $711);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $714 = self.idx;
                                        var $715 = self.code;
                                        var $716 = self.err;
                                        var $717 = Parser$Reply$error$($714, $715, $716);
                                        var $713 = $717;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $718 = self.idx;
                                        var $719 = self.code;
                                        var $720 = self.val;
                                        var self = Fm$Parser$stop$($696, $718, $719);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $722 = self.idx;
                                                var $723 = self.code;
                                                var $724 = self.err;
                                                var $725 = Parser$Reply$error$($722, $723, $724);
                                                var $721 = $725;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $726 = self.idx;
                                                var $727 = self.code;
                                                var $728 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($712, $720);
                                                var $729 = Parser$Reply$value$($726, $727, Fm$Term$ori$($728, _expr$18));
                                                var $721 = $729;
                                                break;
                                        };
                                        var $713 = $721;
                                        break;
                                };
                                var $705 = $713;
                                break;
                        };
                        var $697 = $705;
                        break;
                };
                var $689 = $697;
                break;
        };
        return $689;
    };
    const Fm$Parser$lambda$erased = x0 => x1 => Fm$Parser$lambda$erased$(x0, x1);

    function Fm$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $731 = self.idx;
                var $732 = self.code;
                var $733 = self.err;
                var $734 = Parser$Reply$error$($731, $732, $733);
                var $730 = $734;
                break;
            case 'Parser.Reply.value':
                var $735 = self.idx;
                var $736 = self.code;
                var $737 = self.val;
                var self = Fm$Parser$text$("()", $735, $736);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $739 = self.idx;
                        var $740 = self.code;
                        var $741 = self.err;
                        var $742 = Parser$Reply$error$($739, $740, $741);
                        var $738 = $742;
                        break;
                    case 'Parser.Reply.value':
                        var $743 = self.idx;
                        var $744 = self.code;
                        var $745 = self.val;
                        var self = Fm$Parser$term$($743, $744);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $747 = self.idx;
                                var $748 = self.code;
                                var $749 = self.err;
                                var $750 = Parser$Reply$error$($747, $748, $749);
                                var $746 = $750;
                                break;
                            case 'Parser.Reply.value':
                                var $751 = self.idx;
                                var $752 = self.code;
                                var $753 = self.val;
                                var self = Fm$Parser$stop$($737, $751, $752);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $755 = self.idx;
                                        var $756 = self.code;
                                        var $757 = self.err;
                                        var $758 = Parser$Reply$error$($755, $756, $757);
                                        var $754 = $758;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $759 = self.idx;
                                        var $760 = self.code;
                                        var $761 = self.val;
                                        var _expr$15 = Fm$Term$lam$("", (_x$15 => {
                                            var $763 = $753;
                                            return $763;
                                        }));
                                        var $762 = Parser$Reply$value$($759, $760, Fm$Term$ori$($761, _expr$15));
                                        var $754 = $762;
                                        break;
                                };
                                var $746 = $754;
                                break;
                        };
                        var $738 = $746;
                        break;
                };
                var $730 = $738;
                break;
        };
        return $730;
    };
    const Fm$Parser$lambda$nameless = x0 => x1 => Fm$Parser$lambda$nameless$(x0, x1);

    function Fm$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $765 = self.idx;
                var $766 = self.code;
                var $767 = self.err;
                var $768 = Parser$Reply$error$($765, $766, $767);
                var $764 = $768;
                break;
            case 'Parser.Reply.value':
                var $769 = self.idx;
                var $770 = self.code;
                var $771 = self.val;
                var self = Fm$Parser$term$($769, $770);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $773 = self.idx;
                        var $774 = self.code;
                        var $775 = self.err;
                        var $776 = Parser$Reply$error$($773, $774, $775);
                        var $772 = $776;
                        break;
                    case 'Parser.Reply.value':
                        var $777 = self.idx;
                        var $778 = self.code;
                        var $779 = self.val;
                        var self = Fm$Parser$text$(")", $777, $778);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $781 = self.idx;
                                var $782 = self.code;
                                var $783 = self.err;
                                var $784 = Parser$Reply$error$($781, $782, $783);
                                var $780 = $784;
                                break;
                            case 'Parser.Reply.value':
                                var $785 = self.idx;
                                var $786 = self.code;
                                var $787 = self.val;
                                var $788 = Parser$Reply$value$($785, $786, $779);
                                var $780 = $788;
                                break;
                        };
                        var $772 = $780;
                        break;
                };
                var $764 = $772;
                break;
        };
        return $764;
    };
    const Fm$Parser$parenthesis = x0 => x1 => Fm$Parser$parenthesis$(x0, x1);

    function Fm$Term$ref$(_name$1) {
        var $789 = ({
            _: 'Fm.Term.ref',
            'name': _name$1
        });
        return $789;
    };
    const Fm$Term$ref = x0 => Fm$Term$ref$(x0);

    function Fm$Term$app$(_func$1, _argm$2) {
        var $790 = ({
            _: 'Fm.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $790;
    };
    const Fm$Term$app = x0 => x1 => Fm$Term$app$(x0, x1);

    function Fm$Term$hol$(_path$1) {
        var $791 = ({
            _: 'Fm.Term.hol',
            'path': _path$1
        });
        return $791;
    };
    const Fm$Term$hol = x0 => Fm$Term$hol$(x0);

    function Fm$Term$let$(_name$1, _expr$2, _body$3) {
        var $792 = ({
            _: 'Fm.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $792;
    };
    const Fm$Term$let = x0 => x1 => x2 => Fm$Term$let$(x0, x1, x2);

    function Fm$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $794 = self.idx;
                var $795 = self.code;
                var $796 = self.err;
                var $797 = Parser$Reply$error$($794, $795, $796);
                var $793 = $797;
                break;
            case 'Parser.Reply.value':
                var $798 = self.idx;
                var $799 = self.code;
                var $800 = self.val;
                var self = Fm$Parser$text$("let ", $798, $799);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $802 = self.idx;
                        var $803 = self.code;
                        var $804 = self.err;
                        var $805 = Parser$Reply$error$($802, $803, $804);
                        var $801 = $805;
                        break;
                    case 'Parser.Reply.value':
                        var $806 = self.idx;
                        var $807 = self.code;
                        var $808 = self.val;
                        var self = Fm$Parser$name1$($806, $807);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $810 = self.idx;
                                var $811 = self.code;
                                var $812 = self.err;
                                var $813 = Parser$Reply$error$($810, $811, $812);
                                var $809 = $813;
                                break;
                            case 'Parser.Reply.value':
                                var $814 = self.idx;
                                var $815 = self.code;
                                var $816 = self.val;
                                var self = Fm$Parser$text$("=", $814, $815);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $818 = self.idx;
                                        var $819 = self.code;
                                        var $820 = self.err;
                                        var $821 = Parser$Reply$error$($818, $819, $820);
                                        var $817 = $821;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $822 = self.idx;
                                        var $823 = self.code;
                                        var $824 = self.val;
                                        var self = Fm$Parser$text$("for ", $822, $823);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $826 = self.idx;
                                                var $827 = self.code;
                                                var $828 = self.err;
                                                var $829 = Parser$Reply$error$($826, $827, $828);
                                                var $825 = $829;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $830 = self.idx;
                                                var $831 = self.code;
                                                var $832 = self.val;
                                                var self = Fm$Parser$name1$($830, $831);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $834 = self.idx;
                                                        var $835 = self.code;
                                                        var $836 = self.err;
                                                        var $837 = Parser$Reply$error$($834, $835, $836);
                                                        var $833 = $837;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $838 = self.idx;
                                                        var $839 = self.code;
                                                        var $840 = self.val;
                                                        var self = Fm$Parser$text$(":", $838, $839);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $842 = self.idx;
                                                                var $843 = self.code;
                                                                var $844 = self.err;
                                                                var $845 = Parser$Reply$error$($842, $843, $844);
                                                                var $841 = $845;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $846 = self.idx;
                                                                var $847 = self.code;
                                                                var $848 = self.val;
                                                                var self = Fm$Parser$text$("U32", $846, $847);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $850 = self.idx;
                                                                        var $851 = self.code;
                                                                        var $852 = self.err;
                                                                        var $853 = Parser$Reply$error$($850, $851, $852);
                                                                        var $849 = $853;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $854 = self.idx;
                                                                        var $855 = self.code;
                                                                        var $856 = self.val;
                                                                        var self = Fm$Parser$text$("=", $854, $855);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $858 = self.idx;
                                                                                var $859 = self.code;
                                                                                var $860 = self.err;
                                                                                var $861 = Parser$Reply$error$($858, $859, $860);
                                                                                var $857 = $861;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $862 = self.idx;
                                                                                var $863 = self.code;
                                                                                var $864 = self.val;
                                                                                var self = Fm$Parser$term$($862, $863);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $866 = self.idx;
                                                                                        var $867 = self.code;
                                                                                        var $868 = self.err;
                                                                                        var $869 = Parser$Reply$error$($866, $867, $868);
                                                                                        var $865 = $869;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $870 = self.idx;
                                                                                        var $871 = self.code;
                                                                                        var $872 = self.val;
                                                                                        var self = Fm$Parser$text$("..", $870, $871);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $874 = self.idx;
                                                                                                var $875 = self.code;
                                                                                                var $876 = self.err;
                                                                                                var $877 = Parser$Reply$error$($874, $875, $876);
                                                                                                var $873 = $877;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $878 = self.idx;
                                                                                                var $879 = self.code;
                                                                                                var $880 = self.val;
                                                                                                var self = Fm$Parser$term$($878, $879);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $882 = self.idx;
                                                                                                        var $883 = self.code;
                                                                                                        var $884 = self.err;
                                                                                                        var $885 = Parser$Reply$error$($882, $883, $884);
                                                                                                        var $881 = $885;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $886 = self.idx;
                                                                                                        var $887 = self.code;
                                                                                                        var $888 = self.val;
                                                                                                        var self = Fm$Parser$text$(":", $886, $887);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $890 = self.idx;
                                                                                                                var $891 = self.code;
                                                                                                                var $892 = self.err;
                                                                                                                var $893 = Parser$Reply$error$($890, $891, $892);
                                                                                                                var $889 = $893;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $894 = self.idx;
                                                                                                                var $895 = self.code;
                                                                                                                var $896 = self.val;
                                                                                                                var self = Fm$Parser$term$($894, $895);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $898 = self.idx;
                                                                                                                        var $899 = self.code;
                                                                                                                        var $900 = self.err;
                                                                                                                        var $901 = Parser$Reply$error$($898, $899, $900);
                                                                                                                        var $897 = $901;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $902 = self.idx;
                                                                                                                        var $903 = self.code;
                                                                                                                        var $904 = self.val;
                                                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $902, $903);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $906 = self.idx;
                                                                                                                                var $907 = self.code;
                                                                                                                                var $908 = self.err;
                                                                                                                                var $909 = Parser$Reply$error$($906, $907, $908);
                                                                                                                                var $905 = $909;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $910 = self.idx;
                                                                                                                                var $911 = self.code;
                                                                                                                                var $912 = self.val;
                                                                                                                                var self = Fm$Parser$term$($910, $911);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $914 = self.idx;
                                                                                                                                        var $915 = self.code;
                                                                                                                                        var $916 = self.err;
                                                                                                                                        var $917 = Parser$Reply$error$($914, $915, $916);
                                                                                                                                        var $913 = $917;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $918 = self.idx;
                                                                                                                                        var $919 = self.code;
                                                                                                                                        var $920 = self.val;
                                                                                                                                        var self = Fm$Parser$stop$($800, $918, $919);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $922 = self.idx;
                                                                                                                                                var $923 = self.code;
                                                                                                                                                var $924 = self.err;
                                                                                                                                                var $925 = Parser$Reply$error$($922, $923, $924);
                                                                                                                                                var $921 = $925;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $926 = self.idx;
                                                                                                                                                var $927 = self.code;
                                                                                                                                                var $928 = self.val;
                                                                                                                                                var _term$54 = Fm$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Fm$Term$app$(_term$54, Fm$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Fm$Term$app$(_term$55, Fm$Term$ref$($816));
                                                                                                                                                var _term$57 = Fm$Term$app$(_term$56, $872);
                                                                                                                                                var _term$58 = Fm$Term$app$(_term$57, $888);
                                                                                                                                                var _lamb$59 = Fm$Term$lam$($840, (_e$59 => {
                                                                                                                                                    var $930 = Fm$Term$lam$($816, (_s$60 => {
                                                                                                                                                        var $931 = $904;
                                                                                                                                                        return $931;
                                                                                                                                                    }));
                                                                                                                                                    return $930;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Fm$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Fm$Term$let$($816, _term$60, (_x$61 => {
                                                                                                                                                    var $932 = $920;
                                                                                                                                                    return $932;
                                                                                                                                                }));
                                                                                                                                                var $929 = Parser$Reply$value$($926, $927, Fm$Term$ori$($928, _term$61));
                                                                                                                                                var $921 = $929;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $913 = $921;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $905 = $913;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $897 = $905;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $889 = $897;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $881 = $889;
                                                                                                        break;
                                                                                                };
                                                                                                var $873 = $881;
                                                                                                break;
                                                                                        };
                                                                                        var $865 = $873;
                                                                                        break;
                                                                                };
                                                                                var $857 = $865;
                                                                                break;
                                                                        };
                                                                        var $849 = $857;
                                                                        break;
                                                                };
                                                                var $841 = $849;
                                                                break;
                                                        };
                                                        var $833 = $841;
                                                        break;
                                                };
                                                var $825 = $833;
                                                break;
                                        };
                                        var $817 = $825;
                                        break;
                                };
                                var $809 = $817;
                                break;
                        };
                        var $801 = $809;
                        break;
                };
                var $793 = $801;
                break;
        };
        return $793;
    };
    const Fm$Parser$letforrange$u32 = x0 => x1 => Fm$Parser$letforrange$u32$(x0, x1);

    function Fm$Parser$letforin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $934 = self.idx;
                var $935 = self.code;
                var $936 = self.err;
                var $937 = Parser$Reply$error$($934, $935, $936);
                var $933 = $937;
                break;
            case 'Parser.Reply.value':
                var $938 = self.idx;
                var $939 = self.code;
                var $940 = self.val;
                var self = Fm$Parser$text$("let ", $938, $939);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $942 = self.idx;
                        var $943 = self.code;
                        var $944 = self.err;
                        var $945 = Parser$Reply$error$($942, $943, $944);
                        var $941 = $945;
                        break;
                    case 'Parser.Reply.value':
                        var $946 = self.idx;
                        var $947 = self.code;
                        var $948 = self.val;
                        var self = Fm$Parser$name1$($946, $947);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $950 = self.idx;
                                var $951 = self.code;
                                var $952 = self.err;
                                var $953 = Parser$Reply$error$($950, $951, $952);
                                var $949 = $953;
                                break;
                            case 'Parser.Reply.value':
                                var $954 = self.idx;
                                var $955 = self.code;
                                var $956 = self.val;
                                var self = Fm$Parser$text$("=", $954, $955);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $958 = self.idx;
                                        var $959 = self.code;
                                        var $960 = self.err;
                                        var $961 = Parser$Reply$error$($958, $959, $960);
                                        var $957 = $961;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $962 = self.idx;
                                        var $963 = self.code;
                                        var $964 = self.val;
                                        var self = Fm$Parser$text$("for ", $962, $963);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $966 = self.idx;
                                                var $967 = self.code;
                                                var $968 = self.err;
                                                var $969 = Parser$Reply$error$($966, $967, $968);
                                                var $965 = $969;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $970 = self.idx;
                                                var $971 = self.code;
                                                var $972 = self.val;
                                                var self = Fm$Parser$name1$($970, $971);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $974 = self.idx;
                                                        var $975 = self.code;
                                                        var $976 = self.err;
                                                        var $977 = Parser$Reply$error$($974, $975, $976);
                                                        var $973 = $977;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $978 = self.idx;
                                                        var $979 = self.code;
                                                        var $980 = self.val;
                                                        var self = Fm$Parser$text$("in", $978, $979);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $982 = self.idx;
                                                                var $983 = self.code;
                                                                var $984 = self.err;
                                                                var $985 = Parser$Reply$error$($982, $983, $984);
                                                                var $981 = $985;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $986 = self.idx;
                                                                var $987 = self.code;
                                                                var $988 = self.val;
                                                                var self = Fm$Parser$term$($986, $987);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $990 = self.idx;
                                                                        var $991 = self.code;
                                                                        var $992 = self.err;
                                                                        var $993 = Parser$Reply$error$($990, $991, $992);
                                                                        var $989 = $993;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $994 = self.idx;
                                                                        var $995 = self.code;
                                                                        var $996 = self.val;
                                                                        var self = Fm$Parser$text$(":", $994, $995);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $998 = self.idx;
                                                                                var $999 = self.code;
                                                                                var $1000 = self.err;
                                                                                var $1001 = Parser$Reply$error$($998, $999, $1000);
                                                                                var $997 = $1001;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1002 = self.idx;
                                                                                var $1003 = self.code;
                                                                                var $1004 = self.val;
                                                                                var self = Fm$Parser$term$($1002, $1003);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1006 = self.idx;
                                                                                        var $1007 = self.code;
                                                                                        var $1008 = self.err;
                                                                                        var $1009 = Parser$Reply$error$($1006, $1007, $1008);
                                                                                        var $1005 = $1009;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1010 = self.idx;
                                                                                        var $1011 = self.code;
                                                                                        var $1012 = self.val;
                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $1010, $1011);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1014 = self.idx;
                                                                                                var $1015 = self.code;
                                                                                                var $1016 = self.err;
                                                                                                var $1017 = Parser$Reply$error$($1014, $1015, $1016);
                                                                                                var $1013 = $1017;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1018 = self.idx;
                                                                                                var $1019 = self.code;
                                                                                                var $1020 = self.val;
                                                                                                var self = Fm$Parser$term$($1018, $1019);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1022 = self.idx;
                                                                                                        var $1023 = self.code;
                                                                                                        var $1024 = self.err;
                                                                                                        var $1025 = Parser$Reply$error$($1022, $1023, $1024);
                                                                                                        var $1021 = $1025;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1026 = self.idx;
                                                                                                        var $1027 = self.code;
                                                                                                        var $1028 = self.val;
                                                                                                        var self = Fm$Parser$stop$($940, $1026, $1027);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1030 = self.idx;
                                                                                                                var $1031 = self.code;
                                                                                                                var $1032 = self.err;
                                                                                                                var $1033 = Parser$Reply$error$($1030, $1031, $1032);
                                                                                                                var $1029 = $1033;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1034 = self.idx;
                                                                                                                var $1035 = self.code;
                                                                                                                var $1036 = self.val;
                                                                                                                var _term$42 = Fm$Term$ref$("List.for");
                                                                                                                var _term$43 = Fm$Term$app$(_term$42, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Fm$Term$app$(_term$43, $996);
                                                                                                                var _term$45 = Fm$Term$app$(_term$44, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Fm$Term$app$(_term$45, Fm$Term$ref$($956));
                                                                                                                var _lamb$47 = Fm$Term$lam$($980, (_i$47 => {
                                                                                                                    var $1038 = Fm$Term$lam$($956, (_x$48 => {
                                                                                                                        var $1039 = $1012;
                                                                                                                        return $1039;
                                                                                                                    }));
                                                                                                                    return $1038;
                                                                                                                }));
                                                                                                                var _term$48 = Fm$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Fm$Term$let$($956, _term$48, (_x$49 => {
                                                                                                                    var $1040 = $1028;
                                                                                                                    return $1040;
                                                                                                                }));
                                                                                                                var $1037 = Parser$Reply$value$($1034, $1035, Fm$Term$ori$($1036, _term$49));
                                                                                                                var $1029 = $1037;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1021 = $1029;
                                                                                                        break;
                                                                                                };
                                                                                                var $1013 = $1021;
                                                                                                break;
                                                                                        };
                                                                                        var $1005 = $1013;
                                                                                        break;
                                                                                };
                                                                                var $997 = $1005;
                                                                                break;
                                                                        };
                                                                        var $989 = $997;
                                                                        break;
                                                                };
                                                                var $981 = $989;
                                                                break;
                                                        };
                                                        var $973 = $981;
                                                        break;
                                                };
                                                var $965 = $973;
                                                break;
                                        };
                                        var $957 = $965;
                                        break;
                                };
                                var $949 = $957;
                                break;
                        };
                        var $941 = $949;
                        break;
                };
                var $933 = $941;
                break;
        };
        return $933;
    };
    const Fm$Parser$letforin = x0 => x1 => Fm$Parser$letforin$(x0, x1);

    function Fm$Parser$let$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1042 = self.idx;
                var $1043 = self.code;
                var $1044 = self.err;
                var $1045 = Parser$Reply$error$($1042, $1043, $1044);
                var $1041 = $1045;
                break;
            case 'Parser.Reply.value':
                var $1046 = self.idx;
                var $1047 = self.code;
                var $1048 = self.val;
                var self = Fm$Parser$text$("let ", $1046, $1047);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1050 = self.idx;
                        var $1051 = self.code;
                        var $1052 = self.err;
                        var $1053 = Parser$Reply$error$($1050, $1051, $1052);
                        var $1049 = $1053;
                        break;
                    case 'Parser.Reply.value':
                        var $1054 = self.idx;
                        var $1055 = self.code;
                        var $1056 = self.val;
                        var self = Fm$Parser$name$($1054, $1055);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1058 = self.idx;
                                var $1059 = self.code;
                                var $1060 = self.err;
                                var $1061 = Parser$Reply$error$($1058, $1059, $1060);
                                var $1057 = $1061;
                                break;
                            case 'Parser.Reply.value':
                                var $1062 = self.idx;
                                var $1063 = self.code;
                                var $1064 = self.val;
                                var self = Fm$Parser$text$("=", $1062, $1063);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1066 = self.idx;
                                        var $1067 = self.code;
                                        var $1068 = self.err;
                                        var $1069 = Parser$Reply$error$($1066, $1067, $1068);
                                        var $1065 = $1069;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1070 = self.idx;
                                        var $1071 = self.code;
                                        var $1072 = self.val;
                                        var self = Fm$Parser$term$($1070, $1071);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1074 = self.idx;
                                                var $1075 = self.code;
                                                var $1076 = self.err;
                                                var $1077 = Parser$Reply$error$($1074, $1075, $1076);
                                                var $1073 = $1077;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1078 = self.idx;
                                                var $1079 = self.code;
                                                var $1080 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1078, $1079);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1082 = self.idx;
                                                        var $1083 = self.code;
                                                        var $1084 = self.err;
                                                        var $1085 = Parser$Reply$error$($1082, $1083, $1084);
                                                        var $1081 = $1085;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1086 = self.idx;
                                                        var $1087 = self.code;
                                                        var $1088 = self.val;
                                                        var self = Fm$Parser$term$($1086, $1087);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1090 = self.idx;
                                                                var $1091 = self.code;
                                                                var $1092 = self.err;
                                                                var $1093 = Parser$Reply$error$($1090, $1091, $1092);
                                                                var $1089 = $1093;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1094 = self.idx;
                                                                var $1095 = self.code;
                                                                var $1096 = self.val;
                                                                var self = Fm$Parser$stop$($1048, $1094, $1095);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1098 = self.idx;
                                                                        var $1099 = self.code;
                                                                        var $1100 = self.err;
                                                                        var $1101 = Parser$Reply$error$($1098, $1099, $1100);
                                                                        var $1097 = $1101;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1102 = self.idx;
                                                                        var $1103 = self.code;
                                                                        var $1104 = self.val;
                                                                        var $1105 = Parser$Reply$value$($1102, $1103, Fm$Term$ori$($1104, Fm$Term$let$($1064, $1080, (_x$27 => {
                                                                            var $1106 = $1096;
                                                                            return $1106;
                                                                        }))));
                                                                        var $1097 = $1105;
                                                                        break;
                                                                };
                                                                var $1089 = $1097;
                                                                break;
                                                        };
                                                        var $1081 = $1089;
                                                        break;
                                                };
                                                var $1073 = $1081;
                                                break;
                                        };
                                        var $1065 = $1073;
                                        break;
                                };
                                var $1057 = $1065;
                                break;
                        };
                        var $1049 = $1057;
                        break;
                };
                var $1041 = $1049;
                break;
        };
        return $1041;
    };
    const Fm$Parser$let = x0 => x1 => Fm$Parser$let$(x0, x1);

    function Fm$Parser$get$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1108 = self.idx;
                var $1109 = self.code;
                var $1110 = self.err;
                var $1111 = Parser$Reply$error$($1108, $1109, $1110);
                var $1107 = $1111;
                break;
            case 'Parser.Reply.value':
                var $1112 = self.idx;
                var $1113 = self.code;
                var $1114 = self.val;
                var self = Fm$Parser$text$("let ", $1112, $1113);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1116 = self.idx;
                        var $1117 = self.code;
                        var $1118 = self.err;
                        var $1119 = Parser$Reply$error$($1116, $1117, $1118);
                        var $1115 = $1119;
                        break;
                    case 'Parser.Reply.value':
                        var $1120 = self.idx;
                        var $1121 = self.code;
                        var $1122 = self.val;
                        var self = Fm$Parser$text$("{", $1120, $1121);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1124 = self.idx;
                                var $1125 = self.code;
                                var $1126 = self.err;
                                var $1127 = Parser$Reply$error$($1124, $1125, $1126);
                                var $1123 = $1127;
                                break;
                            case 'Parser.Reply.value':
                                var $1128 = self.idx;
                                var $1129 = self.code;
                                var $1130 = self.val;
                                var self = Fm$Parser$name$($1128, $1129);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1132 = self.idx;
                                        var $1133 = self.code;
                                        var $1134 = self.err;
                                        var $1135 = Parser$Reply$error$($1132, $1133, $1134);
                                        var $1131 = $1135;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1136 = self.idx;
                                        var $1137 = self.code;
                                        var $1138 = self.val;
                                        var self = Fm$Parser$text$(",", $1136, $1137);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1140 = self.idx;
                                                var $1141 = self.code;
                                                var $1142 = self.err;
                                                var $1143 = Parser$Reply$error$($1140, $1141, $1142);
                                                var $1139 = $1143;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1144 = self.idx;
                                                var $1145 = self.code;
                                                var $1146 = self.val;
                                                var self = Fm$Parser$name$($1144, $1145);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1148 = self.idx;
                                                        var $1149 = self.code;
                                                        var $1150 = self.err;
                                                        var $1151 = Parser$Reply$error$($1148, $1149, $1150);
                                                        var $1147 = $1151;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1152 = self.idx;
                                                        var $1153 = self.code;
                                                        var $1154 = self.val;
                                                        var self = Fm$Parser$text$("}", $1152, $1153);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1156 = self.idx;
                                                                var $1157 = self.code;
                                                                var $1158 = self.err;
                                                                var $1159 = Parser$Reply$error$($1156, $1157, $1158);
                                                                var $1155 = $1159;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1160 = self.idx;
                                                                var $1161 = self.code;
                                                                var $1162 = self.val;
                                                                var self = Fm$Parser$text$("=", $1160, $1161);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1164 = self.idx;
                                                                        var $1165 = self.code;
                                                                        var $1166 = self.err;
                                                                        var $1167 = Parser$Reply$error$($1164, $1165, $1166);
                                                                        var $1163 = $1167;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1168 = self.idx;
                                                                        var $1169 = self.code;
                                                                        var $1170 = self.val;
                                                                        var self = Fm$Parser$term$($1168, $1169);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1172 = self.idx;
                                                                                var $1173 = self.code;
                                                                                var $1174 = self.err;
                                                                                var $1175 = Parser$Reply$error$($1172, $1173, $1174);
                                                                                var $1171 = $1175;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1176 = self.idx;
                                                                                var $1177 = self.code;
                                                                                var $1178 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1176, $1177);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1180 = self.idx;
                                                                                        var $1181 = self.code;
                                                                                        var $1182 = self.err;
                                                                                        var $1183 = Parser$Reply$error$($1180, $1181, $1182);
                                                                                        var $1179 = $1183;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1184 = self.idx;
                                                                                        var $1185 = self.code;
                                                                                        var $1186 = self.val;
                                                                                        var self = Fm$Parser$term$($1184, $1185);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1188 = self.idx;
                                                                                                var $1189 = self.code;
                                                                                                var $1190 = self.err;
                                                                                                var $1191 = Parser$Reply$error$($1188, $1189, $1190);
                                                                                                var $1187 = $1191;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1192 = self.idx;
                                                                                                var $1193 = self.code;
                                                                                                var $1194 = self.val;
                                                                                                var self = Fm$Parser$stop$($1114, $1192, $1193);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1196 = self.idx;
                                                                                                        var $1197 = self.code;
                                                                                                        var $1198 = self.err;
                                                                                                        var $1199 = Parser$Reply$error$($1196, $1197, $1198);
                                                                                                        var $1195 = $1199;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1200 = self.idx;
                                                                                                        var $1201 = self.code;
                                                                                                        var $1202 = self.val;
                                                                                                        var _term$39 = $1178;
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$lam$("x", (_x$40 => {
                                                                                                            var $1204 = Fm$Term$hol$(Bits$e);
                                                                                                            return $1204;
                                                                                                        })));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, Fm$Term$lam$($1138, (_x$41 => {
                                                                                                            var $1205 = Fm$Term$lam$($1154, (_y$42 => {
                                                                                                                var $1206 = $1194;
                                                                                                                return $1206;
                                                                                                            }));
                                                                                                            return $1205;
                                                                                                        })));
                                                                                                        var $1203 = Parser$Reply$value$($1200, $1201, Fm$Term$ori$($1202, _term$41));
                                                                                                        var $1195 = $1203;
                                                                                                        break;
                                                                                                };
                                                                                                var $1187 = $1195;
                                                                                                break;
                                                                                        };
                                                                                        var $1179 = $1187;
                                                                                        break;
                                                                                };
                                                                                var $1171 = $1179;
                                                                                break;
                                                                        };
                                                                        var $1163 = $1171;
                                                                        break;
                                                                };
                                                                var $1155 = $1163;
                                                                break;
                                                        };
                                                        var $1147 = $1155;
                                                        break;
                                                };
                                                var $1139 = $1147;
                                                break;
                                        };
                                        var $1131 = $1139;
                                        break;
                                };
                                var $1123 = $1131;
                                break;
                        };
                        var $1115 = $1123;
                        break;
                };
                var $1107 = $1115;
                break;
        };
        return $1107;
    };
    const Fm$Parser$get = x0 => x1 => Fm$Parser$get$(x0, x1);

    function Fm$Term$def$(_name$1, _expr$2, _body$3) {
        var $1207 = ({
            _: 'Fm.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $1207;
    };
    const Fm$Term$def = x0 => x1 => x2 => Fm$Term$def$(x0, x1, x2);

    function Fm$Parser$def$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1209 = self.idx;
                var $1210 = self.code;
                var $1211 = self.err;
                var $1212 = Parser$Reply$error$($1209, $1210, $1211);
                var $1208 = $1212;
                break;
            case 'Parser.Reply.value':
                var $1213 = self.idx;
                var $1214 = self.code;
                var $1215 = self.val;
                var self = Fm$Parser$text$("def ", $1213, $1214);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1217 = self.idx;
                        var $1218 = self.code;
                        var $1219 = self.err;
                        var $1220 = Parser$Reply$error$($1217, $1218, $1219);
                        var $1216 = $1220;
                        break;
                    case 'Parser.Reply.value':
                        var $1221 = self.idx;
                        var $1222 = self.code;
                        var $1223 = self.val;
                        var self = Fm$Parser$name$($1221, $1222);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1225 = self.idx;
                                var $1226 = self.code;
                                var $1227 = self.err;
                                var $1228 = Parser$Reply$error$($1225, $1226, $1227);
                                var $1224 = $1228;
                                break;
                            case 'Parser.Reply.value':
                                var $1229 = self.idx;
                                var $1230 = self.code;
                                var $1231 = self.val;
                                var self = Fm$Parser$text$("=", $1229, $1230);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1233 = self.idx;
                                        var $1234 = self.code;
                                        var $1235 = self.err;
                                        var $1236 = Parser$Reply$error$($1233, $1234, $1235);
                                        var $1232 = $1236;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1237 = self.idx;
                                        var $1238 = self.code;
                                        var $1239 = self.val;
                                        var self = Fm$Parser$term$($1237, $1238);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1241 = self.idx;
                                                var $1242 = self.code;
                                                var $1243 = self.err;
                                                var $1244 = Parser$Reply$error$($1241, $1242, $1243);
                                                var $1240 = $1244;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1245 = self.idx;
                                                var $1246 = self.code;
                                                var $1247 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1245, $1246);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1249 = self.idx;
                                                        var $1250 = self.code;
                                                        var $1251 = self.err;
                                                        var $1252 = Parser$Reply$error$($1249, $1250, $1251);
                                                        var $1248 = $1252;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1253 = self.idx;
                                                        var $1254 = self.code;
                                                        var $1255 = self.val;
                                                        var self = Fm$Parser$term$($1253, $1254);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1257 = self.idx;
                                                                var $1258 = self.code;
                                                                var $1259 = self.err;
                                                                var $1260 = Parser$Reply$error$($1257, $1258, $1259);
                                                                var $1256 = $1260;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1261 = self.idx;
                                                                var $1262 = self.code;
                                                                var $1263 = self.val;
                                                                var self = Fm$Parser$stop$($1215, $1261, $1262);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1265 = self.idx;
                                                                        var $1266 = self.code;
                                                                        var $1267 = self.err;
                                                                        var $1268 = Parser$Reply$error$($1265, $1266, $1267);
                                                                        var $1264 = $1268;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1269 = self.idx;
                                                                        var $1270 = self.code;
                                                                        var $1271 = self.val;
                                                                        var $1272 = Parser$Reply$value$($1269, $1270, Fm$Term$ori$($1271, Fm$Term$def$($1231, $1247, (_x$27 => {
                                                                            var $1273 = $1263;
                                                                            return $1273;
                                                                        }))));
                                                                        var $1264 = $1272;
                                                                        break;
                                                                };
                                                                var $1256 = $1264;
                                                                break;
                                                        };
                                                        var $1248 = $1256;
                                                        break;
                                                };
                                                var $1240 = $1248;
                                                break;
                                        };
                                        var $1232 = $1240;
                                        break;
                                };
                                var $1224 = $1232;
                                break;
                        };
                        var $1216 = $1224;
                        break;
                };
                var $1208 = $1216;
                break;
        };
        return $1208;
    };
    const Fm$Parser$def = x0 => x1 => Fm$Parser$def$(x0, x1);

    function Fm$Parser$if$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1275 = self.idx;
                var $1276 = self.code;
                var $1277 = self.err;
                var $1278 = Parser$Reply$error$($1275, $1276, $1277);
                var $1274 = $1278;
                break;
            case 'Parser.Reply.value':
                var $1279 = self.idx;
                var $1280 = self.code;
                var $1281 = self.val;
                var self = Fm$Parser$text$("if ", $1279, $1280);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1283 = self.idx;
                        var $1284 = self.code;
                        var $1285 = self.err;
                        var $1286 = Parser$Reply$error$($1283, $1284, $1285);
                        var $1282 = $1286;
                        break;
                    case 'Parser.Reply.value':
                        var $1287 = self.idx;
                        var $1288 = self.code;
                        var $1289 = self.val;
                        var self = Fm$Parser$term$($1287, $1288);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1291 = self.idx;
                                var $1292 = self.code;
                                var $1293 = self.err;
                                var $1294 = Parser$Reply$error$($1291, $1292, $1293);
                                var $1290 = $1294;
                                break;
                            case 'Parser.Reply.value':
                                var $1295 = self.idx;
                                var $1296 = self.code;
                                var $1297 = self.val;
                                var self = Fm$Parser$text$("then", $1295, $1296);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1299 = self.idx;
                                        var $1300 = self.code;
                                        var $1301 = self.err;
                                        var $1302 = Parser$Reply$error$($1299, $1300, $1301);
                                        var $1298 = $1302;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1303 = self.idx;
                                        var $1304 = self.code;
                                        var $1305 = self.val;
                                        var self = Fm$Parser$term$($1303, $1304);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1307 = self.idx;
                                                var $1308 = self.code;
                                                var $1309 = self.err;
                                                var $1310 = Parser$Reply$error$($1307, $1308, $1309);
                                                var $1306 = $1310;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1311 = self.idx;
                                                var $1312 = self.code;
                                                var $1313 = self.val;
                                                var self = Fm$Parser$text$("else", $1311, $1312);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1315 = self.idx;
                                                        var $1316 = self.code;
                                                        var $1317 = self.err;
                                                        var $1318 = Parser$Reply$error$($1315, $1316, $1317);
                                                        var $1314 = $1318;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1319 = self.idx;
                                                        var $1320 = self.code;
                                                        var $1321 = self.val;
                                                        var self = Fm$Parser$term$($1319, $1320);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1323 = self.idx;
                                                                var $1324 = self.code;
                                                                var $1325 = self.err;
                                                                var $1326 = Parser$Reply$error$($1323, $1324, $1325);
                                                                var $1322 = $1326;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1327 = self.idx;
                                                                var $1328 = self.code;
                                                                var $1329 = self.val;
                                                                var self = Fm$Parser$stop$($1281, $1327, $1328);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1331 = self.idx;
                                                                        var $1332 = self.code;
                                                                        var $1333 = self.err;
                                                                        var $1334 = Parser$Reply$error$($1331, $1332, $1333);
                                                                        var $1330 = $1334;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1335 = self.idx;
                                                                        var $1336 = self.code;
                                                                        var $1337 = self.val;
                                                                        var _term$27 = $1297;
                                                                        var _term$28 = Fm$Term$app$(_term$27, Fm$Term$lam$("", (_x$28 => {
                                                                            var $1339 = Fm$Term$hol$(Bits$e);
                                                                            return $1339;
                                                                        })));
                                                                        var _term$29 = Fm$Term$app$(_term$28, $1313);
                                                                        var _term$30 = Fm$Term$app$(_term$29, $1329);
                                                                        var $1338 = Parser$Reply$value$($1335, $1336, Fm$Term$ori$($1337, _term$30));
                                                                        var $1330 = $1338;
                                                                        break;
                                                                };
                                                                var $1322 = $1330;
                                                                break;
                                                        };
                                                        var $1314 = $1322;
                                                        break;
                                                };
                                                var $1306 = $1314;
                                                break;
                                        };
                                        var $1298 = $1306;
                                        break;
                                };
                                var $1290 = $1298;
                                break;
                        };
                        var $1282 = $1290;
                        break;
                };
                var $1274 = $1282;
                break;
        };
        return $1274;
    };
    const Fm$Parser$if = x0 => x1 => Fm$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $1341 = List$nil;
                var $1340 = $1341;
                break;
            case 'List.cons':
                var $1342 = self.head;
                var $1343 = self.tail;
                var $1344 = List$cons$(_f$4($1342), List$mapped$($1343, _f$4));
                var $1340 = $1344;
                break;
        };
        return $1340;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function Pair$new$(_fst$3, _snd$4) {
        var $1345 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $1345;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);
    const Fm$backslash = 92;
    const Fm$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Fm$backslash, String$cons$(Fm$backslash, String$nil)), Fm$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Fm$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Fm$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $1347 = self.fst;
                var $1348 = self.snd;
                var $1349 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($1347, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $1351 = self.idx;
                            var $1352 = self.code;
                            var $1353 = self.err;
                            var $1354 = Parser$Reply$error$($1351, $1352, $1353);
                            var $1350 = $1354;
                            break;
                        case 'Parser.Reply.value':
                            var $1355 = self.idx;
                            var $1356 = self.code;
                            var $1357 = self.val;
                            var $1358 = Parser$Reply$value$($1355, $1356, $1348);
                            var $1350 = $1358;
                            break;
                    };
                    return $1350;
                });
                var $1346 = $1349;
                break;
        };
        return $1346;
    }))), List$cons$(Parser$one, List$nil)));

    function Fm$Term$chr$(_chrx$1) {
        var $1359 = ({
            _: 'Fm.Term.chr',
            'chrx': _chrx$1
        });
        return $1359;
    };
    const Fm$Term$chr = x0 => Fm$Term$chr$(x0);

    function Fm$Parser$char$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1361 = self.idx;
                var $1362 = self.code;
                var $1363 = self.err;
                var $1364 = Parser$Reply$error$($1361, $1362, $1363);
                var $1360 = $1364;
                break;
            case 'Parser.Reply.value':
                var $1365 = self.idx;
                var $1366 = self.code;
                var $1367 = self.val;
                var self = Fm$Parser$text$("\'", $1365, $1366);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1369 = self.idx;
                        var $1370 = self.code;
                        var $1371 = self.err;
                        var $1372 = Parser$Reply$error$($1369, $1370, $1371);
                        var $1368 = $1372;
                        break;
                    case 'Parser.Reply.value':
                        var $1373 = self.idx;
                        var $1374 = self.code;
                        var $1375 = self.val;
                        var self = Fm$Parser$char$single($1373)($1374);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1377 = self.idx;
                                var $1378 = self.code;
                                var $1379 = self.err;
                                var $1380 = Parser$Reply$error$($1377, $1378, $1379);
                                var $1376 = $1380;
                                break;
                            case 'Parser.Reply.value':
                                var $1381 = self.idx;
                                var $1382 = self.code;
                                var $1383 = self.val;
                                var self = Parser$text$("\'", $1381, $1382);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1385 = self.idx;
                                        var $1386 = self.code;
                                        var $1387 = self.err;
                                        var $1388 = Parser$Reply$error$($1385, $1386, $1387);
                                        var $1384 = $1388;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1389 = self.idx;
                                        var $1390 = self.code;
                                        var $1391 = self.val;
                                        var self = Fm$Parser$stop$($1367, $1389, $1390);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1393 = self.idx;
                                                var $1394 = self.code;
                                                var $1395 = self.err;
                                                var $1396 = Parser$Reply$error$($1393, $1394, $1395);
                                                var $1392 = $1396;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1397 = self.idx;
                                                var $1398 = self.code;
                                                var $1399 = self.val;
                                                var $1400 = Parser$Reply$value$($1397, $1398, Fm$Term$ori$($1399, Fm$Term$chr$($1383)));
                                                var $1392 = $1400;
                                                break;
                                        };
                                        var $1384 = $1392;
                                        break;
                                };
                                var $1376 = $1384;
                                break;
                        };
                        var $1368 = $1376;
                        break;
                };
                var $1360 = $1368;
                break;
        };
        return $1360;
    };
    const Fm$Parser$char = x0 => x1 => Fm$Parser$char$(x0, x1);

    function Fm$Term$str$(_strx$1) {
        var $1401 = ({
            _: 'Fm.Term.str',
            'strx': _strx$1
        });
        return $1401;
    };
    const Fm$Term$str = x0 => Fm$Term$str$(x0);

    function Fm$Parser$string$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1403 = self.idx;
                var $1404 = self.code;
                var $1405 = self.err;
                var $1406 = Parser$Reply$error$($1403, $1404, $1405);
                var $1402 = $1406;
                break;
            case 'Parser.Reply.value':
                var $1407 = self.idx;
                var $1408 = self.code;
                var $1409 = self.val;
                var _quot$6 = String$cons$(34, String$nil);
                var self = Fm$Parser$text$(_quot$6, $1407, $1408);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1411 = self.idx;
                        var $1412 = self.code;
                        var $1413 = self.err;
                        var $1414 = Parser$Reply$error$($1411, $1412, $1413);
                        var $1410 = $1414;
                        break;
                    case 'Parser.Reply.value':
                        var $1415 = self.idx;
                        var $1416 = self.code;
                        var $1417 = self.val;
                        var self = Parser$until$(Parser$text(_quot$6), Fm$Parser$char$single)($1415)($1416);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1419 = self.idx;
                                var $1420 = self.code;
                                var $1421 = self.err;
                                var $1422 = Parser$Reply$error$($1419, $1420, $1421);
                                var $1418 = $1422;
                                break;
                            case 'Parser.Reply.value':
                                var $1423 = self.idx;
                                var $1424 = self.code;
                                var $1425 = self.val;
                                var _strx$13 = List$fold$($1425, String$nil, String$cons);
                                var self = Fm$Parser$stop$($1409, $1423, $1424);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1427 = self.idx;
                                        var $1428 = self.code;
                                        var $1429 = self.err;
                                        var $1430 = Parser$Reply$error$($1427, $1428, $1429);
                                        var $1426 = $1430;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1431 = self.idx;
                                        var $1432 = self.code;
                                        var $1433 = self.val;
                                        var $1434 = Parser$Reply$value$($1431, $1432, Fm$Term$ori$($1433, Fm$Term$str$(_strx$13)));
                                        var $1426 = $1434;
                                        break;
                                };
                                var $1418 = $1426;
                                break;
                        };
                        var $1410 = $1418;
                        break;
                };
                var $1402 = $1410;
                break;
        };
        return $1402;
    };
    const Fm$Parser$string = x0 => x1 => Fm$Parser$string$(x0, x1);

    function Fm$Parser$pair$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1436 = self.idx;
                var $1437 = self.code;
                var $1438 = self.err;
                var $1439 = Parser$Reply$error$($1436, $1437, $1438);
                var $1435 = $1439;
                break;
            case 'Parser.Reply.value':
                var $1440 = self.idx;
                var $1441 = self.code;
                var $1442 = self.val;
                var self = Fm$Parser$text$("{", $1440, $1441);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1444 = self.idx;
                        var $1445 = self.code;
                        var $1446 = self.err;
                        var $1447 = Parser$Reply$error$($1444, $1445, $1446);
                        var $1443 = $1447;
                        break;
                    case 'Parser.Reply.value':
                        var $1448 = self.idx;
                        var $1449 = self.code;
                        var $1450 = self.val;
                        var self = Fm$Parser$term$($1448, $1449);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1452 = self.idx;
                                var $1453 = self.code;
                                var $1454 = self.err;
                                var $1455 = Parser$Reply$error$($1452, $1453, $1454);
                                var $1451 = $1455;
                                break;
                            case 'Parser.Reply.value':
                                var $1456 = self.idx;
                                var $1457 = self.code;
                                var $1458 = self.val;
                                var self = Fm$Parser$text$(",", $1456, $1457);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1460 = self.idx;
                                        var $1461 = self.code;
                                        var $1462 = self.err;
                                        var $1463 = Parser$Reply$error$($1460, $1461, $1462);
                                        var $1459 = $1463;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1464 = self.idx;
                                        var $1465 = self.code;
                                        var $1466 = self.val;
                                        var self = Fm$Parser$term$($1464, $1465);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1468 = self.idx;
                                                var $1469 = self.code;
                                                var $1470 = self.err;
                                                var $1471 = Parser$Reply$error$($1468, $1469, $1470);
                                                var $1467 = $1471;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1472 = self.idx;
                                                var $1473 = self.code;
                                                var $1474 = self.val;
                                                var self = Fm$Parser$text$("}", $1472, $1473);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1476 = self.idx;
                                                        var $1477 = self.code;
                                                        var $1478 = self.err;
                                                        var $1479 = Parser$Reply$error$($1476, $1477, $1478);
                                                        var $1475 = $1479;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1480 = self.idx;
                                                        var $1481 = self.code;
                                                        var $1482 = self.val;
                                                        var self = Fm$Parser$stop$($1442, $1480, $1481);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1484 = self.idx;
                                                                var $1485 = self.code;
                                                                var $1486 = self.err;
                                                                var $1487 = Parser$Reply$error$($1484, $1485, $1486);
                                                                var $1483 = $1487;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1488 = self.idx;
                                                                var $1489 = self.code;
                                                                var $1490 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Pair.new");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, $1458);
                                                                var _term$28 = Fm$Term$app$(_term$27, $1474);
                                                                var $1491 = Parser$Reply$value$($1488, $1489, Fm$Term$ori$($1490, _term$28));
                                                                var $1483 = $1491;
                                                                break;
                                                        };
                                                        var $1475 = $1483;
                                                        break;
                                                };
                                                var $1467 = $1475;
                                                break;
                                        };
                                        var $1459 = $1467;
                                        break;
                                };
                                var $1451 = $1459;
                                break;
                        };
                        var $1443 = $1451;
                        break;
                };
                var $1435 = $1443;
                break;
        };
        return $1435;
    };
    const Fm$Parser$pair = x0 => x1 => Fm$Parser$pair$(x0, x1);

    function Fm$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1493 = self.idx;
                var $1494 = self.code;
                var $1495 = self.err;
                var $1496 = Parser$Reply$error$($1493, $1494, $1495);
                var $1492 = $1496;
                break;
            case 'Parser.Reply.value':
                var $1497 = self.idx;
                var $1498 = self.code;
                var $1499 = self.val;
                var self = Fm$Parser$text$("{", $1497, $1498);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1501 = self.idx;
                        var $1502 = self.code;
                        var $1503 = self.err;
                        var $1504 = Parser$Reply$error$($1501, $1502, $1503);
                        var $1500 = $1504;
                        break;
                    case 'Parser.Reply.value':
                        var $1505 = self.idx;
                        var $1506 = self.code;
                        var $1507 = self.val;
                        var self = Fm$Parser$name1$($1505, $1506);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1509 = self.idx;
                                var $1510 = self.code;
                                var $1511 = self.err;
                                var $1512 = Parser$Reply$error$($1509, $1510, $1511);
                                var $1508 = $1512;
                                break;
                            case 'Parser.Reply.value':
                                var $1513 = self.idx;
                                var $1514 = self.code;
                                var $1515 = self.val;
                                var self = Fm$Parser$text$(":", $1513, $1514);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1517 = self.idx;
                                        var $1518 = self.code;
                                        var $1519 = self.err;
                                        var $1520 = Parser$Reply$error$($1517, $1518, $1519);
                                        var $1516 = $1520;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1521 = self.idx;
                                        var $1522 = self.code;
                                        var $1523 = self.val;
                                        var self = Fm$Parser$term$($1521, $1522);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1525 = self.idx;
                                                var $1526 = self.code;
                                                var $1527 = self.err;
                                                var $1528 = Parser$Reply$error$($1525, $1526, $1527);
                                                var $1524 = $1528;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1529 = self.idx;
                                                var $1530 = self.code;
                                                var $1531 = self.val;
                                                var self = Fm$Parser$text$("}", $1529, $1530);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1533 = self.idx;
                                                        var $1534 = self.code;
                                                        var $1535 = self.err;
                                                        var $1536 = Parser$Reply$error$($1533, $1534, $1535);
                                                        var $1532 = $1536;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1537 = self.idx;
                                                        var $1538 = self.code;
                                                        var $1539 = self.val;
                                                        var self = Fm$Parser$term$($1537, $1538);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1541 = self.idx;
                                                                var $1542 = self.code;
                                                                var $1543 = self.err;
                                                                var $1544 = Parser$Reply$error$($1541, $1542, $1543);
                                                                var $1540 = $1544;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1545 = self.idx;
                                                                var $1546 = self.code;
                                                                var $1547 = self.val;
                                                                var self = Fm$Parser$stop$($1499, $1545, $1546);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1549 = self.idx;
                                                                        var $1550 = self.code;
                                                                        var $1551 = self.err;
                                                                        var $1552 = Parser$Reply$error$($1549, $1550, $1551);
                                                                        var $1548 = $1552;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1553 = self.idx;
                                                                        var $1554 = self.code;
                                                                        var $1555 = self.val;
                                                                        var _term$27 = Fm$Term$ref$("Sigma");
                                                                        var _term$28 = Fm$Term$app$(_term$27, $1531);
                                                                        var _term$29 = Fm$Term$app$(_term$28, Fm$Term$lam$("x", (_x$29 => {
                                                                            var $1557 = $1547;
                                                                            return $1557;
                                                                        })));
                                                                        var $1556 = Parser$Reply$value$($1553, $1554, Fm$Term$ori$($1555, _term$29));
                                                                        var $1548 = $1556;
                                                                        break;
                                                                };
                                                                var $1540 = $1548;
                                                                break;
                                                        };
                                                        var $1532 = $1540;
                                                        break;
                                                };
                                                var $1524 = $1532;
                                                break;
                                        };
                                        var $1516 = $1524;
                                        break;
                                };
                                var $1508 = $1516;
                                break;
                        };
                        var $1500 = $1508;
                        break;
                };
                var $1492 = $1500;
                break;
        };
        return $1492;
    };
    const Fm$Parser$sigma$type = x0 => x1 => Fm$Parser$sigma$type$(x0, x1);

    function Fm$Parser$some$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1559 = self.idx;
                var $1560 = self.code;
                var $1561 = self.err;
                var $1562 = Parser$Reply$error$($1559, $1560, $1561);
                var $1558 = $1562;
                break;
            case 'Parser.Reply.value':
                var $1563 = self.idx;
                var $1564 = self.code;
                var $1565 = self.val;
                var self = Fm$Parser$text$("some(", $1563, $1564);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1567 = self.idx;
                        var $1568 = self.code;
                        var $1569 = self.err;
                        var $1570 = Parser$Reply$error$($1567, $1568, $1569);
                        var $1566 = $1570;
                        break;
                    case 'Parser.Reply.value':
                        var $1571 = self.idx;
                        var $1572 = self.code;
                        var $1573 = self.val;
                        var self = Fm$Parser$term$($1571, $1572);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1575 = self.idx;
                                var $1576 = self.code;
                                var $1577 = self.err;
                                var $1578 = Parser$Reply$error$($1575, $1576, $1577);
                                var $1574 = $1578;
                                break;
                            case 'Parser.Reply.value':
                                var $1579 = self.idx;
                                var $1580 = self.code;
                                var $1581 = self.val;
                                var self = Fm$Parser$text$(")", $1579, $1580);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1583 = self.idx;
                                        var $1584 = self.code;
                                        var $1585 = self.err;
                                        var $1586 = Parser$Reply$error$($1583, $1584, $1585);
                                        var $1582 = $1586;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1587 = self.idx;
                                        var $1588 = self.code;
                                        var $1589 = self.val;
                                        var self = Fm$Parser$stop$($1565, $1587, $1588);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1591 = self.idx;
                                                var $1592 = self.code;
                                                var $1593 = self.err;
                                                var $1594 = Parser$Reply$error$($1591, $1592, $1593);
                                                var $1590 = $1594;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1595 = self.idx;
                                                var $1596 = self.code;
                                                var $1597 = self.val;
                                                var _term$18 = Fm$Term$ref$("Maybe.some");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, $1581);
                                                var $1598 = Parser$Reply$value$($1595, $1596, Fm$Term$ori$($1597, _term$20));
                                                var $1590 = $1598;
                                                break;
                                        };
                                        var $1582 = $1590;
                                        break;
                                };
                                var $1574 = $1582;
                                break;
                        };
                        var $1566 = $1574;
                        break;
                };
                var $1558 = $1566;
                break;
        };
        return $1558;
    };
    const Fm$Parser$some = x0 => x1 => Fm$Parser$some$(x0, x1);

    function Fm$Parser$apply$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1600 = self.idx;
                var $1601 = self.code;
                var $1602 = self.err;
                var $1603 = Parser$Reply$error$($1600, $1601, $1602);
                var $1599 = $1603;
                break;
            case 'Parser.Reply.value':
                var $1604 = self.idx;
                var $1605 = self.code;
                var $1606 = self.val;
                var self = Fm$Parser$text$("apply(", $1604, $1605);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1608 = self.idx;
                        var $1609 = self.code;
                        var $1610 = self.err;
                        var $1611 = Parser$Reply$error$($1608, $1609, $1610);
                        var $1607 = $1611;
                        break;
                    case 'Parser.Reply.value':
                        var $1612 = self.idx;
                        var $1613 = self.code;
                        var $1614 = self.val;
                        var self = Fm$Parser$term$($1612, $1613);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1616 = self.idx;
                                var $1617 = self.code;
                                var $1618 = self.err;
                                var $1619 = Parser$Reply$error$($1616, $1617, $1618);
                                var $1615 = $1619;
                                break;
                            case 'Parser.Reply.value':
                                var $1620 = self.idx;
                                var $1621 = self.code;
                                var $1622 = self.val;
                                var self = Fm$Parser$text$(",", $1620, $1621);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1624 = self.idx;
                                        var $1625 = self.code;
                                        var $1626 = self.err;
                                        var $1627 = Parser$Reply$error$($1624, $1625, $1626);
                                        var $1623 = $1627;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1628 = self.idx;
                                        var $1629 = self.code;
                                        var $1630 = self.val;
                                        var self = Fm$Parser$term$($1628, $1629);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1632 = self.idx;
                                                var $1633 = self.code;
                                                var $1634 = self.err;
                                                var $1635 = Parser$Reply$error$($1632, $1633, $1634);
                                                var $1631 = $1635;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1636 = self.idx;
                                                var $1637 = self.code;
                                                var $1638 = self.val;
                                                var self = Fm$Parser$text$(")", $1636, $1637);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1640 = self.idx;
                                                        var $1641 = self.code;
                                                        var $1642 = self.err;
                                                        var $1643 = Parser$Reply$error$($1640, $1641, $1642);
                                                        var $1639 = $1643;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1644 = self.idx;
                                                        var $1645 = self.code;
                                                        var $1646 = self.val;
                                                        var self = Fm$Parser$stop$($1606, $1644, $1645);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1648 = self.idx;
                                                                var $1649 = self.code;
                                                                var $1650 = self.err;
                                                                var $1651 = Parser$Reply$error$($1648, $1649, $1650);
                                                                var $1647 = $1651;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1652 = self.idx;
                                                                var $1653 = self.code;
                                                                var $1654 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Equal.apply");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, Fm$Term$hol$(Bits$e));
                                                                var _term$28 = Fm$Term$app$(_term$27, Fm$Term$hol$(Bits$e));
                                                                var _term$29 = Fm$Term$app$(_term$28, $1622);
                                                                var _term$30 = Fm$Term$app$(_term$29, $1638);
                                                                var $1655 = Parser$Reply$value$($1652, $1653, Fm$Term$ori$($1654, _term$30));
                                                                var $1647 = $1655;
                                                                break;
                                                        };
                                                        var $1639 = $1647;
                                                        break;
                                                };
                                                var $1631 = $1639;
                                                break;
                                        };
                                        var $1623 = $1631;
                                        break;
                                };
                                var $1615 = $1623;
                                break;
                        };
                        var $1607 = $1615;
                        break;
                };
                var $1599 = $1607;
                break;
        };
        return $1599;
    };
    const Fm$Parser$apply = x0 => x1 => Fm$Parser$apply$(x0, x1);

    function Fm$Name$read$(_str$1) {
        var $1656 = _str$1;
        return $1656;
    };
    const Fm$Name$read = x0 => Fm$Name$read$(x0);

    function Fm$Parser$list$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1658 = self.idx;
                var $1659 = self.code;
                var $1660 = self.err;
                var $1661 = Parser$Reply$error$($1658, $1659, $1660);
                var $1657 = $1661;
                break;
            case 'Parser.Reply.value':
                var $1662 = self.idx;
                var $1663 = self.code;
                var $1664 = self.val;
                var self = Fm$Parser$text$("[", $1662, $1663);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1666 = self.idx;
                        var $1667 = self.code;
                        var $1668 = self.err;
                        var $1669 = Parser$Reply$error$($1666, $1667, $1668);
                        var $1665 = $1669;
                        break;
                    case 'Parser.Reply.value':
                        var $1670 = self.idx;
                        var $1671 = self.code;
                        var $1672 = self.val;
                        var self = Parser$until$(Fm$Parser$text("]"), Fm$Parser$item(Fm$Parser$term))($1670)($1671);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1674 = self.idx;
                                var $1675 = self.code;
                                var $1676 = self.err;
                                var $1677 = Parser$Reply$error$($1674, $1675, $1676);
                                var $1673 = $1677;
                                break;
                            case 'Parser.Reply.value':
                                var $1678 = self.idx;
                                var $1679 = self.code;
                                var $1680 = self.val;
                                var self = Fm$Parser$stop$($1664, $1678, $1679);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1682 = self.idx;
                                        var $1683 = self.code;
                                        var $1684 = self.err;
                                        var $1685 = Parser$Reply$error$($1682, $1683, $1684);
                                        var $1681 = $1685;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1686 = self.idx;
                                        var $1687 = self.code;
                                        var $1688 = self.val;
                                        var $1689 = Parser$Reply$value$($1686, $1687, List$fold$($1680, Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("List.nil")), Fm$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Fm$Term$ref$(Fm$Name$read$("List.cons"));
                                            var _term$18 = Fm$Term$app$(_term$17, Fm$Term$hol$(Bits$e));
                                            var _term$19 = Fm$Term$app$(_term$18, _x$15);
                                            var _term$20 = Fm$Term$app$(_term$19, _xs$16);
                                            var $1690 = Fm$Term$ori$($1688, _term$20);
                                            return $1690;
                                        })));
                                        var $1681 = $1689;
                                        break;
                                };
                                var $1673 = $1681;
                                break;
                        };
                        var $1665 = $1673;
                        break;
                };
                var $1657 = $1665;
                break;
        };
        return $1657;
    };
    const Fm$Parser$list = x0 => x1 => Fm$Parser$list$(x0, x1);

    function Fm$Parser$log$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1692 = self.idx;
                var $1693 = self.code;
                var $1694 = self.err;
                var $1695 = Parser$Reply$error$($1692, $1693, $1694);
                var $1691 = $1695;
                break;
            case 'Parser.Reply.value':
                var $1696 = self.idx;
                var $1697 = self.code;
                var $1698 = self.val;
                var self = Fm$Parser$text$("log(", $1696, $1697);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1700 = self.idx;
                        var $1701 = self.code;
                        var $1702 = self.err;
                        var $1703 = Parser$Reply$error$($1700, $1701, $1702);
                        var $1699 = $1703;
                        break;
                    case 'Parser.Reply.value':
                        var $1704 = self.idx;
                        var $1705 = self.code;
                        var $1706 = self.val;
                        var self = Parser$until$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term))($1704)($1705);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1708 = self.idx;
                                var $1709 = self.code;
                                var $1710 = self.err;
                                var $1711 = Parser$Reply$error$($1708, $1709, $1710);
                                var $1707 = $1711;
                                break;
                            case 'Parser.Reply.value':
                                var $1712 = self.idx;
                                var $1713 = self.code;
                                var $1714 = self.val;
                                var self = Fm$Parser$term$($1712, $1713);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1716 = self.idx;
                                        var $1717 = self.code;
                                        var $1718 = self.err;
                                        var $1719 = Parser$Reply$error$($1716, $1717, $1718);
                                        var $1715 = $1719;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1720 = self.idx;
                                        var $1721 = self.code;
                                        var $1722 = self.val;
                                        var _term$15 = Fm$Term$ref$("Debug.log");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($1714, Fm$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Fm$Term$ref$("String.concat");
                                            var _arg$20 = Fm$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Fm$Term$app$(_arg$20, _xs$18);
                                            var $1724 = _arg$21;
                                            return $1724;
                                        }));
                                        var _term$18 = Fm$Term$app$(_term$16, _args$17);
                                        var _term$19 = Fm$Term$app$(_term$18, Fm$Term$lam$("x", (_x$19 => {
                                            var $1725 = $1722;
                                            return $1725;
                                        })));
                                        var self = Fm$Parser$stop$($1698, $1720, $1721);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1726 = self.idx;
                                                var $1727 = self.code;
                                                var $1728 = self.err;
                                                var $1729 = Parser$Reply$error$($1726, $1727, $1728);
                                                var $1723 = $1729;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1730 = self.idx;
                                                var $1731 = self.code;
                                                var $1732 = self.val;
                                                var $1733 = Parser$Reply$value$($1730, $1731, Fm$Term$ori$($1732, _term$19));
                                                var $1723 = $1733;
                                                break;
                                        };
                                        var $1715 = $1723;
                                        break;
                                };
                                var $1707 = $1715;
                                break;
                        };
                        var $1699 = $1707;
                        break;
                };
                var $1691 = $1699;
                break;
        };
        return $1691;
    };
    const Fm$Parser$log = x0 => x1 => Fm$Parser$log$(x0, x1);

    function Fm$Parser$forrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1735 = self.idx;
                var $1736 = self.code;
                var $1737 = self.err;
                var $1738 = Parser$Reply$error$($1735, $1736, $1737);
                var $1734 = $1738;
                break;
            case 'Parser.Reply.value':
                var $1739 = self.idx;
                var $1740 = self.code;
                var $1741 = self.val;
                var self = Fm$Parser$text$("for ", $1739, $1740);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1743 = self.idx;
                        var $1744 = self.code;
                        var $1745 = self.err;
                        var $1746 = Parser$Reply$error$($1743, $1744, $1745);
                        var $1742 = $1746;
                        break;
                    case 'Parser.Reply.value':
                        var $1747 = self.idx;
                        var $1748 = self.code;
                        var $1749 = self.val;
                        var self = Fm$Parser$name1$($1747, $1748);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1751 = self.idx;
                                var $1752 = self.code;
                                var $1753 = self.err;
                                var $1754 = Parser$Reply$error$($1751, $1752, $1753);
                                var $1750 = $1754;
                                break;
                            case 'Parser.Reply.value':
                                var $1755 = self.idx;
                                var $1756 = self.code;
                                var $1757 = self.val;
                                var self = Fm$Parser$text$(":", $1755, $1756);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1759 = self.idx;
                                        var $1760 = self.code;
                                        var $1761 = self.err;
                                        var $1762 = Parser$Reply$error$($1759, $1760, $1761);
                                        var $1758 = $1762;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1763 = self.idx;
                                        var $1764 = self.code;
                                        var $1765 = self.val;
                                        var self = Fm$Parser$text$("U32", $1763, $1764);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1767 = self.idx;
                                                var $1768 = self.code;
                                                var $1769 = self.err;
                                                var $1770 = Parser$Reply$error$($1767, $1768, $1769);
                                                var $1766 = $1770;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1771 = self.idx;
                                                var $1772 = self.code;
                                                var $1773 = self.val;
                                                var self = Fm$Parser$text$("=", $1771, $1772);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1775 = self.idx;
                                                        var $1776 = self.code;
                                                        var $1777 = self.err;
                                                        var $1778 = Parser$Reply$error$($1775, $1776, $1777);
                                                        var $1774 = $1778;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1779 = self.idx;
                                                        var $1780 = self.code;
                                                        var $1781 = self.val;
                                                        var self = Fm$Parser$term$($1779, $1780);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1783 = self.idx;
                                                                var $1784 = self.code;
                                                                var $1785 = self.err;
                                                                var $1786 = Parser$Reply$error$($1783, $1784, $1785);
                                                                var $1782 = $1786;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1787 = self.idx;
                                                                var $1788 = self.code;
                                                                var $1789 = self.val;
                                                                var self = Fm$Parser$text$("..", $1787, $1788);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1791 = self.idx;
                                                                        var $1792 = self.code;
                                                                        var $1793 = self.err;
                                                                        var $1794 = Parser$Reply$error$($1791, $1792, $1793);
                                                                        var $1790 = $1794;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1795 = self.idx;
                                                                        var $1796 = self.code;
                                                                        var $1797 = self.val;
                                                                        var self = Fm$Parser$term$($1795, $1796);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1799 = self.idx;
                                                                                var $1800 = self.code;
                                                                                var $1801 = self.err;
                                                                                var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                                                                                var $1798 = $1802;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1803 = self.idx;
                                                                                var $1804 = self.code;
                                                                                var $1805 = self.val;
                                                                                var self = Fm$Parser$text$("with", $1803, $1804);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1807 = self.idx;
                                                                                        var $1808 = self.code;
                                                                                        var $1809 = self.err;
                                                                                        var $1810 = Parser$Reply$error$($1807, $1808, $1809);
                                                                                        var $1806 = $1810;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1811 = self.idx;
                                                                                        var $1812 = self.code;
                                                                                        var $1813 = self.val;
                                                                                        var self = Fm$Parser$name1$($1811, $1812);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1815 = self.idx;
                                                                                                var $1816 = self.code;
                                                                                                var $1817 = self.err;
                                                                                                var $1818 = Parser$Reply$error$($1815, $1816, $1817);
                                                                                                var $1814 = $1818;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1819 = self.idx;
                                                                                                var $1820 = self.code;
                                                                                                var $1821 = self.val;
                                                                                                var self = Fm$Parser$text$(":", $1819, $1820);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1823 = self.idx;
                                                                                                        var $1824 = self.code;
                                                                                                        var $1825 = self.err;
                                                                                                        var $1826 = Parser$Reply$error$($1823, $1824, $1825);
                                                                                                        var $1822 = $1826;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1827 = self.idx;
                                                                                                        var $1828 = self.code;
                                                                                                        var $1829 = self.val;
                                                                                                        var self = Fm$Parser$term$($1827, $1828);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1831 = self.idx;
                                                                                                                var $1832 = self.code;
                                                                                                                var $1833 = self.err;
                                                                                                                var $1834 = Parser$Reply$error$($1831, $1832, $1833);
                                                                                                                var $1830 = $1834;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1835 = self.idx;
                                                                                                                var $1836 = self.code;
                                                                                                                var $1837 = self.val;
                                                                                                                var self = Fm$Parser$stop$($1741, $1835, $1836);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1839 = self.idx;
                                                                                                                        var $1840 = self.code;
                                                                                                                        var $1841 = self.err;
                                                                                                                        var $1842 = Parser$Reply$error$($1839, $1840, $1841);
                                                                                                                        var $1838 = $1842;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1843 = self.idx;
                                                                                                                        var $1844 = self.code;
                                                                                                                        var $1845 = self.val;
                                                                                                                        var _term$45 = Fm$Term$ref$("U32.for");
                                                                                                                        var _term$46 = Fm$Term$app$(_term$45, Fm$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Fm$Term$app$(_term$46, Fm$Term$ref$($1821));
                                                                                                                        var _term$48 = Fm$Term$app$(_term$47, $1789);
                                                                                                                        var _term$49 = Fm$Term$app$(_term$48, $1805);
                                                                                                                        var _lamb$50 = Fm$Term$lam$($1757, (_e$50 => {
                                                                                                                            var $1847 = Fm$Term$lam$($1821, (_s$51 => {
                                                                                                                                var $1848 = $1837;
                                                                                                                                return $1848;
                                                                                                                            }));
                                                                                                                            return $1847;
                                                                                                                        }));
                                                                                                                        var _term$51 = Fm$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Fm$Term$let$($1821, _term$51, (_x$52 => {
                                                                                                                            var $1849 = Fm$Term$ref$($1821);
                                                                                                                            return $1849;
                                                                                                                        }));
                                                                                                                        var $1846 = Parser$Reply$value$($1843, $1844, Fm$Term$ori$($1845, _term$52));
                                                                                                                        var $1838 = $1846;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1830 = $1838;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1822 = $1830;
                                                                                                        break;
                                                                                                };
                                                                                                var $1814 = $1822;
                                                                                                break;
                                                                                        };
                                                                                        var $1806 = $1814;
                                                                                        break;
                                                                                };
                                                                                var $1798 = $1806;
                                                                                break;
                                                                        };
                                                                        var $1790 = $1798;
                                                                        break;
                                                                };
                                                                var $1782 = $1790;
                                                                break;
                                                        };
                                                        var $1774 = $1782;
                                                        break;
                                                };
                                                var $1766 = $1774;
                                                break;
                                        };
                                        var $1758 = $1766;
                                        break;
                                };
                                var $1750 = $1758;
                                break;
                        };
                        var $1742 = $1750;
                        break;
                };
                var $1734 = $1742;
                break;
        };
        return $1734;
    };
    const Fm$Parser$forrange$u32 = x0 => x1 => Fm$Parser$forrange$u32$(x0, x1);

    function Fm$Parser$forrange$u32$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1851 = self.idx;
                var $1852 = self.code;
                var $1853 = self.err;
                var $1854 = Parser$Reply$error$($1851, $1852, $1853);
                var $1850 = $1854;
                break;
            case 'Parser.Reply.value':
                var $1855 = self.idx;
                var $1856 = self.code;
                var $1857 = self.val;
                var self = Fm$Parser$text$("for ", $1855, $1856);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1859 = self.idx;
                        var $1860 = self.code;
                        var $1861 = self.err;
                        var $1862 = Parser$Reply$error$($1859, $1860, $1861);
                        var $1858 = $1862;
                        break;
                    case 'Parser.Reply.value':
                        var $1863 = self.idx;
                        var $1864 = self.code;
                        var $1865 = self.val;
                        var self = Fm$Parser$name1$($1863, $1864);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1867 = self.idx;
                                var $1868 = self.code;
                                var $1869 = self.err;
                                var $1870 = Parser$Reply$error$($1867, $1868, $1869);
                                var $1866 = $1870;
                                break;
                            case 'Parser.Reply.value':
                                var $1871 = self.idx;
                                var $1872 = self.code;
                                var $1873 = self.val;
                                var self = Fm$Parser$text$(":", $1871, $1872);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1875 = self.idx;
                                        var $1876 = self.code;
                                        var $1877 = self.err;
                                        var $1878 = Parser$Reply$error$($1875, $1876, $1877);
                                        var $1874 = $1878;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1879 = self.idx;
                                        var $1880 = self.code;
                                        var $1881 = self.val;
                                        var self = Fm$Parser$text$("U32", $1879, $1880);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1883 = self.idx;
                                                var $1884 = self.code;
                                                var $1885 = self.err;
                                                var $1886 = Parser$Reply$error$($1883, $1884, $1885);
                                                var $1882 = $1886;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1887 = self.idx;
                                                var $1888 = self.code;
                                                var $1889 = self.val;
                                                var self = Fm$Parser$text$("=", $1887, $1888);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1891 = self.idx;
                                                        var $1892 = self.code;
                                                        var $1893 = self.err;
                                                        var $1894 = Parser$Reply$error$($1891, $1892, $1893);
                                                        var $1890 = $1894;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1895 = self.idx;
                                                        var $1896 = self.code;
                                                        var $1897 = self.val;
                                                        var self = Fm$Parser$term$($1895, $1896);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1899 = self.idx;
                                                                var $1900 = self.code;
                                                                var $1901 = self.err;
                                                                var $1902 = Parser$Reply$error$($1899, $1900, $1901);
                                                                var $1898 = $1902;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1903 = self.idx;
                                                                var $1904 = self.code;
                                                                var $1905 = self.val;
                                                                var self = Fm$Parser$text$("..", $1903, $1904);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1907 = self.idx;
                                                                        var $1908 = self.code;
                                                                        var $1909 = self.err;
                                                                        var $1910 = Parser$Reply$error$($1907, $1908, $1909);
                                                                        var $1906 = $1910;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1911 = self.idx;
                                                                        var $1912 = self.code;
                                                                        var $1913 = self.val;
                                                                        var self = Fm$Parser$term$($1911, $1912);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1915 = self.idx;
                                                                                var $1916 = self.code;
                                                                                var $1917 = self.err;
                                                                                var $1918 = Parser$Reply$error$($1915, $1916, $1917);
                                                                                var $1914 = $1918;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1919 = self.idx;
                                                                                var $1920 = self.code;
                                                                                var $1921 = self.val;
                                                                                var self = Fm$Parser$text$(":", $1919, $1920);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1923 = self.idx;
                                                                                        var $1924 = self.code;
                                                                                        var $1925 = self.err;
                                                                                        var $1926 = Parser$Reply$error$($1923, $1924, $1925);
                                                                                        var $1922 = $1926;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1927 = self.idx;
                                                                                        var $1928 = self.code;
                                                                                        var $1929 = self.val;
                                                                                        var self = Fm$Parser$name1$($1927, $1928);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1931 = self.idx;
                                                                                                var $1932 = self.code;
                                                                                                var $1933 = self.err;
                                                                                                var $1934 = Parser$Reply$error$($1931, $1932, $1933);
                                                                                                var $1930 = $1934;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1935 = self.idx;
                                                                                                var $1936 = self.code;
                                                                                                var $1937 = self.val;
                                                                                                var self = Fm$Parser$text$("=", $1935, $1936);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1939 = self.idx;
                                                                                                        var $1940 = self.code;
                                                                                                        var $1941 = self.err;
                                                                                                        var $1942 = Parser$Reply$error$($1939, $1940, $1941);
                                                                                                        var $1938 = $1942;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1943 = self.idx;
                                                                                                        var $1944 = self.code;
                                                                                                        var $1945 = self.val;
                                                                                                        var self = Fm$Parser$term$($1943, $1944);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1947 = self.idx;
                                                                                                                var $1948 = self.code;
                                                                                                                var $1949 = self.err;
                                                                                                                var $1950 = Parser$Reply$error$($1947, $1948, $1949);
                                                                                                                var $1946 = $1950;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1951 = self.idx;
                                                                                                                var $1952 = self.code;
                                                                                                                var $1953 = self.val;
                                                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1951, $1952);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1955 = self.idx;
                                                                                                                        var $1956 = self.code;
                                                                                                                        var $1957 = self.err;
                                                                                                                        var $1958 = Parser$Reply$error$($1955, $1956, $1957);
                                                                                                                        var $1954 = $1958;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1959 = self.idx;
                                                                                                                        var $1960 = self.code;
                                                                                                                        var $1961 = self.val;
                                                                                                                        var self = Fm$Parser$term$($1959, $1960);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1963 = self.idx;
                                                                                                                                var $1964 = self.code;
                                                                                                                                var $1965 = self.err;
                                                                                                                                var $1966 = Parser$Reply$error$($1963, $1964, $1965);
                                                                                                                                var $1962 = $1966;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1967 = self.idx;
                                                                                                                                var $1968 = self.code;
                                                                                                                                var $1969 = self.val;
                                                                                                                                var self = Fm$Parser$stop$($1857, $1967, $1968);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1971 = self.idx;
                                                                                                                                        var $1972 = self.code;
                                                                                                                                        var $1973 = self.err;
                                                                                                                                        var $1974 = Parser$Reply$error$($1971, $1972, $1973);
                                                                                                                                        var $1970 = $1974;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1975 = self.idx;
                                                                                                                                        var $1976 = self.code;
                                                                                                                                        var $1977 = self.val;
                                                                                                                                        var _term$51 = Fm$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Fm$Term$app$(_term$51, Fm$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Fm$Term$app$(_term$52, Fm$Term$ref$($1937));
                                                                                                                                        var _term$54 = Fm$Term$app$(_term$53, $1905);
                                                                                                                                        var _term$55 = Fm$Term$app$(_term$54, $1921);
                                                                                                                                        var _lamb$56 = Fm$Term$lam$($1873, (_e$56 => {
                                                                                                                                            var $1979 = Fm$Term$lam$($1937, (_s$57 => {
                                                                                                                                                var $1980 = $1953;
                                                                                                                                                return $1980;
                                                                                                                                            }));
                                                                                                                                            return $1979;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Fm$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Fm$Term$let$($1937, _term$57, (_x$58 => {
                                                                                                                                            var $1981 = $1969;
                                                                                                                                            return $1981;
                                                                                                                                        }));
                                                                                                                                        var $1978 = Parser$Reply$value$($1975, $1976, Fm$Term$ori$($1977, _term$58));
                                                                                                                                        var $1970 = $1978;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1962 = $1970;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1954 = $1962;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1946 = $1954;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1938 = $1946;
                                                                                                        break;
                                                                                                };
                                                                                                var $1930 = $1938;
                                                                                                break;
                                                                                        };
                                                                                        var $1922 = $1930;
                                                                                        break;
                                                                                };
                                                                                var $1914 = $1922;
                                                                                break;
                                                                        };
                                                                        var $1906 = $1914;
                                                                        break;
                                                                };
                                                                var $1898 = $1906;
                                                                break;
                                                        };
                                                        var $1890 = $1898;
                                                        break;
                                                };
                                                var $1882 = $1890;
                                                break;
                                        };
                                        var $1874 = $1882;
                                        break;
                                };
                                var $1866 = $1874;
                                break;
                        };
                        var $1858 = $1866;
                        break;
                };
                var $1850 = $1858;
                break;
        };
        return $1850;
    };
    const Fm$Parser$forrange$u32$2 = x0 => x1 => Fm$Parser$forrange$u32$2$(x0, x1);

    function Fm$Parser$forin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1983 = self.idx;
                var $1984 = self.code;
                var $1985 = self.err;
                var $1986 = Parser$Reply$error$($1983, $1984, $1985);
                var $1982 = $1986;
                break;
            case 'Parser.Reply.value':
                var $1987 = self.idx;
                var $1988 = self.code;
                var $1989 = self.val;
                var self = Fm$Parser$text$("for ", $1987, $1988);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1991 = self.idx;
                        var $1992 = self.code;
                        var $1993 = self.err;
                        var $1994 = Parser$Reply$error$($1991, $1992, $1993);
                        var $1990 = $1994;
                        break;
                    case 'Parser.Reply.value':
                        var $1995 = self.idx;
                        var $1996 = self.code;
                        var $1997 = self.val;
                        var self = Fm$Parser$name1$($1995, $1996);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1999 = self.idx;
                                var $2000 = self.code;
                                var $2001 = self.err;
                                var $2002 = Parser$Reply$error$($1999, $2000, $2001);
                                var $1998 = $2002;
                                break;
                            case 'Parser.Reply.value':
                                var $2003 = self.idx;
                                var $2004 = self.code;
                                var $2005 = self.val;
                                var self = Fm$Parser$text$("in", $2003, $2004);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2007 = self.idx;
                                        var $2008 = self.code;
                                        var $2009 = self.err;
                                        var $2010 = Parser$Reply$error$($2007, $2008, $2009);
                                        var $2006 = $2010;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2011 = self.idx;
                                        var $2012 = self.code;
                                        var $2013 = self.val;
                                        var self = Fm$Parser$term$($2011, $2012);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2015 = self.idx;
                                                var $2016 = self.code;
                                                var $2017 = self.err;
                                                var $2018 = Parser$Reply$error$($2015, $2016, $2017);
                                                var $2014 = $2018;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2019 = self.idx;
                                                var $2020 = self.code;
                                                var $2021 = self.val;
                                                var self = Fm$Parser$text$("with", $2019, $2020);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2023 = self.idx;
                                                        var $2024 = self.code;
                                                        var $2025 = self.err;
                                                        var $2026 = Parser$Reply$error$($2023, $2024, $2025);
                                                        var $2022 = $2026;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2027 = self.idx;
                                                        var $2028 = self.code;
                                                        var $2029 = self.val;
                                                        var self = Fm$Parser$name1$($2027, $2028);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2031 = self.idx;
                                                                var $2032 = self.code;
                                                                var $2033 = self.err;
                                                                var $2034 = Parser$Reply$error$($2031, $2032, $2033);
                                                                var $2030 = $2034;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2035 = self.idx;
                                                                var $2036 = self.code;
                                                                var $2037 = self.val;
                                                                var self = Fm$Parser$text$(":", $2035, $2036);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2039 = self.idx;
                                                                        var $2040 = self.code;
                                                                        var $2041 = self.err;
                                                                        var $2042 = Parser$Reply$error$($2039, $2040, $2041);
                                                                        var $2038 = $2042;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2043 = self.idx;
                                                                        var $2044 = self.code;
                                                                        var $2045 = self.val;
                                                                        var self = Fm$Parser$term$($2043, $2044);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2047 = self.idx;
                                                                                var $2048 = self.code;
                                                                                var $2049 = self.err;
                                                                                var $2050 = Parser$Reply$error$($2047, $2048, $2049);
                                                                                var $2046 = $2050;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2051 = self.idx;
                                                                                var $2052 = self.code;
                                                                                var $2053 = self.val;
                                                                                var self = Fm$Parser$stop$($1989, $2051, $2052);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2055 = self.idx;
                                                                                        var $2056 = self.code;
                                                                                        var $2057 = self.err;
                                                                                        var $2058 = Parser$Reply$error$($2055, $2056, $2057);
                                                                                        var $2054 = $2058;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2059 = self.idx;
                                                                                        var $2060 = self.code;
                                                                                        var $2061 = self.val;
                                                                                        var _term$33 = Fm$Term$ref$("List.for");
                                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$hol$(Bits$e));
                                                                                        var _term$35 = Fm$Term$app$(_term$34, $2021);
                                                                                        var _term$36 = Fm$Term$app$(_term$35, Fm$Term$hol$(Bits$e));
                                                                                        var _term$37 = Fm$Term$app$(_term$36, Fm$Term$ref$($2037));
                                                                                        var _lamb$38 = Fm$Term$lam$($2005, (_i$38 => {
                                                                                            var $2063 = Fm$Term$lam$($2037, (_x$39 => {
                                                                                                var $2064 = $2053;
                                                                                                return $2064;
                                                                                            }));
                                                                                            return $2063;
                                                                                        }));
                                                                                        var _term$39 = Fm$Term$app$(_term$37, _lamb$38);
                                                                                        var _term$40 = Fm$Term$let$($2037, _term$39, (_x$40 => {
                                                                                            var $2065 = Fm$Term$ref$($2037);
                                                                                            return $2065;
                                                                                        }));
                                                                                        var $2062 = Parser$Reply$value$($2059, $2060, Fm$Term$ori$($2061, _term$40));
                                                                                        var $2054 = $2062;
                                                                                        break;
                                                                                };
                                                                                var $2046 = $2054;
                                                                                break;
                                                                        };
                                                                        var $2038 = $2046;
                                                                        break;
                                                                };
                                                                var $2030 = $2038;
                                                                break;
                                                        };
                                                        var $2022 = $2030;
                                                        break;
                                                };
                                                var $2014 = $2022;
                                                break;
                                        };
                                        var $2006 = $2014;
                                        break;
                                };
                                var $1998 = $2006;
                                break;
                        };
                        var $1990 = $1998;
                        break;
                };
                var $1982 = $1990;
                break;
        };
        return $1982;
    };
    const Fm$Parser$forin = x0 => x1 => Fm$Parser$forin$(x0, x1);

    function Fm$Parser$forin$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2067 = self.idx;
                var $2068 = self.code;
                var $2069 = self.err;
                var $2070 = Parser$Reply$error$($2067, $2068, $2069);
                var $2066 = $2070;
                break;
            case 'Parser.Reply.value':
                var $2071 = self.idx;
                var $2072 = self.code;
                var $2073 = self.val;
                var self = Fm$Parser$text$("for ", $2071, $2072);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2075 = self.idx;
                        var $2076 = self.code;
                        var $2077 = self.err;
                        var $2078 = Parser$Reply$error$($2075, $2076, $2077);
                        var $2074 = $2078;
                        break;
                    case 'Parser.Reply.value':
                        var $2079 = self.idx;
                        var $2080 = self.code;
                        var $2081 = self.val;
                        var self = Fm$Parser$name1$($2079, $2080);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2083 = self.idx;
                                var $2084 = self.code;
                                var $2085 = self.err;
                                var $2086 = Parser$Reply$error$($2083, $2084, $2085);
                                var $2082 = $2086;
                                break;
                            case 'Parser.Reply.value':
                                var $2087 = self.idx;
                                var $2088 = self.code;
                                var $2089 = self.val;
                                var self = Fm$Parser$text$("in", $2087, $2088);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2091 = self.idx;
                                        var $2092 = self.code;
                                        var $2093 = self.err;
                                        var $2094 = Parser$Reply$error$($2091, $2092, $2093);
                                        var $2090 = $2094;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2095 = self.idx;
                                        var $2096 = self.code;
                                        var $2097 = self.val;
                                        var self = Fm$Parser$term$($2095, $2096);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2099 = self.idx;
                                                var $2100 = self.code;
                                                var $2101 = self.err;
                                                var $2102 = Parser$Reply$error$($2099, $2100, $2101);
                                                var $2098 = $2102;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2103 = self.idx;
                                                var $2104 = self.code;
                                                var $2105 = self.val;
                                                var self = Fm$Parser$text$(":", $2103, $2104);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2107 = self.idx;
                                                        var $2108 = self.code;
                                                        var $2109 = self.err;
                                                        var $2110 = Parser$Reply$error$($2107, $2108, $2109);
                                                        var $2106 = $2110;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2111 = self.idx;
                                                        var $2112 = self.code;
                                                        var $2113 = self.val;
                                                        var self = Fm$Parser$name1$($2111, $2112);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2115 = self.idx;
                                                                var $2116 = self.code;
                                                                var $2117 = self.err;
                                                                var $2118 = Parser$Reply$error$($2115, $2116, $2117);
                                                                var $2114 = $2118;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2119 = self.idx;
                                                                var $2120 = self.code;
                                                                var $2121 = self.val;
                                                                var self = Fm$Parser$text$("=", $2119, $2120);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2123 = self.idx;
                                                                        var $2124 = self.code;
                                                                        var $2125 = self.err;
                                                                        var $2126 = Parser$Reply$error$($2123, $2124, $2125);
                                                                        var $2122 = $2126;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2127 = self.idx;
                                                                        var $2128 = self.code;
                                                                        var $2129 = self.val;
                                                                        var self = Fm$Parser$term$($2127, $2128);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2131 = self.idx;
                                                                                var $2132 = self.code;
                                                                                var $2133 = self.err;
                                                                                var $2134 = Parser$Reply$error$($2131, $2132, $2133);
                                                                                var $2130 = $2134;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2135 = self.idx;
                                                                                var $2136 = self.code;
                                                                                var $2137 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2135, $2136);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2139 = self.idx;
                                                                                        var $2140 = self.code;
                                                                                        var $2141 = self.err;
                                                                                        var $2142 = Parser$Reply$error$($2139, $2140, $2141);
                                                                                        var $2138 = $2142;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2143 = self.idx;
                                                                                        var $2144 = self.code;
                                                                                        var $2145 = self.val;
                                                                                        var self = Fm$Parser$term$($2143, $2144);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2147 = self.idx;
                                                                                                var $2148 = self.code;
                                                                                                var $2149 = self.err;
                                                                                                var $2150 = Parser$Reply$error$($2147, $2148, $2149);
                                                                                                var $2146 = $2150;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2151 = self.idx;
                                                                                                var $2152 = self.code;
                                                                                                var $2153 = self.val;
                                                                                                var self = Fm$Parser$stop$($2073, $2151, $2152);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2155 = self.idx;
                                                                                                        var $2156 = self.code;
                                                                                                        var $2157 = self.err;
                                                                                                        var $2158 = Parser$Reply$error$($2155, $2156, $2157);
                                                                                                        var $2154 = $2158;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2159 = self.idx;
                                                                                                        var $2160 = self.code;
                                                                                                        var $2161 = self.val;
                                                                                                        var _term$39 = Fm$Term$ref$("List.for");
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, $2105);
                                                                                                        var _term$42 = Fm$Term$app$(_term$41, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Fm$Term$app$(_term$42, Fm$Term$ref$($2121));
                                                                                                        var _lamb$44 = Fm$Term$lam$($2089, (_i$44 => {
                                                                                                            var $2163 = Fm$Term$lam$($2121, (_x$45 => {
                                                                                                                var $2164 = $2137;
                                                                                                                return $2164;
                                                                                                            }));
                                                                                                            return $2163;
                                                                                                        }));
                                                                                                        var _term$45 = Fm$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Fm$Term$let$($2121, _term$45, (_x$46 => {
                                                                                                            var $2165 = $2153;
                                                                                                            return $2165;
                                                                                                        }));
                                                                                                        var $2162 = Parser$Reply$value$($2159, $2160, Fm$Term$ori$($2161, _term$46));
                                                                                                        var $2154 = $2162;
                                                                                                        break;
                                                                                                };
                                                                                                var $2146 = $2154;
                                                                                                break;
                                                                                        };
                                                                                        var $2138 = $2146;
                                                                                        break;
                                                                                };
                                                                                var $2130 = $2138;
                                                                                break;
                                                                        };
                                                                        var $2122 = $2130;
                                                                        break;
                                                                };
                                                                var $2114 = $2122;
                                                                break;
                                                        };
                                                        var $2106 = $2114;
                                                        break;
                                                };
                                                var $2098 = $2106;
                                                break;
                                        };
                                        var $2090 = $2098;
                                        break;
                                };
                                var $2082 = $2090;
                                break;
                        };
                        var $2074 = $2082;
                        break;
                };
                var $2066 = $2074;
                break;
        };
        return $2066;
    };
    const Fm$Parser$forin$2 = x0 => x1 => Fm$Parser$forin$2$(x0, x1);

    function Fm$Parser$do$statements$(_monad_name$1) {
        var $2166 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2168 = self.idx;
                    var $2169 = self.code;
                    var $2170 = self.err;
                    var $2171 = Parser$Reply$error$($2168, $2169, $2170);
                    var $2167 = $2171;
                    break;
                case 'Parser.Reply.value':
                    var $2172 = self.idx;
                    var $2173 = self.code;
                    var $2174 = self.val;
                    var self = Fm$Parser$text$("var ", $2172, $2173);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2176 = self.idx;
                            var $2177 = self.code;
                            var $2178 = self.err;
                            var $2179 = Parser$Reply$error$($2176, $2177, $2178);
                            var $2175 = $2179;
                            break;
                        case 'Parser.Reply.value':
                            var $2180 = self.idx;
                            var $2181 = self.code;
                            var $2182 = self.val;
                            var self = Fm$Parser$name1$($2180, $2181);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2184 = self.idx;
                                    var $2185 = self.code;
                                    var $2186 = self.err;
                                    var $2187 = Parser$Reply$error$($2184, $2185, $2186);
                                    var $2183 = $2187;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2188 = self.idx;
                                    var $2189 = self.code;
                                    var $2190 = self.val;
                                    var self = Fm$Parser$text$("=", $2188, $2189);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2192 = self.idx;
                                            var $2193 = self.code;
                                            var $2194 = self.err;
                                            var $2195 = Parser$Reply$error$($2192, $2193, $2194);
                                            var $2191 = $2195;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2196 = self.idx;
                                            var $2197 = self.code;
                                            var $2198 = self.val;
                                            var self = Fm$Parser$term$($2196, $2197);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2200 = self.idx;
                                                    var $2201 = self.code;
                                                    var $2202 = self.err;
                                                    var $2203 = Parser$Reply$error$($2200, $2201, $2202);
                                                    var $2199 = $2203;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2204 = self.idx;
                                                    var $2205 = self.code;
                                                    var $2206 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2204, $2205);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2208 = self.idx;
                                                            var $2209 = self.code;
                                                            var $2210 = self.err;
                                                            var $2211 = Parser$Reply$error$($2208, $2209, $2210);
                                                            var $2207 = $2211;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2212 = self.idx;
                                                            var $2213 = self.code;
                                                            var $2214 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2212)($2213);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2216 = self.idx;
                                                                    var $2217 = self.code;
                                                                    var $2218 = self.err;
                                                                    var $2219 = Parser$Reply$error$($2216, $2217, $2218);
                                                                    var $2215 = $2219;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2220 = self.idx;
                                                                    var $2221 = self.code;
                                                                    var $2222 = self.val;
                                                                    var self = Fm$Parser$stop$($2174, $2220, $2221);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2224 = self.idx;
                                                                            var $2225 = self.code;
                                                                            var $2226 = self.err;
                                                                            var $2227 = Parser$Reply$error$($2224, $2225, $2226);
                                                                            var $2223 = $2227;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2228 = self.idx;
                                                                            var $2229 = self.code;
                                                                            var $2230 = self.val;
                                                                            var _term$28 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Fm$Term$app$(_term$28, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                            var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                            var _term$32 = Fm$Term$app$(_term$31, $2206);
                                                                            var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($2190, (_x$33 => {
                                                                                var $2232 = $2222;
                                                                                return $2232;
                                                                            })));
                                                                            var $2231 = Parser$Reply$value$($2228, $2229, Fm$Term$ori$($2230, _term$33));
                                                                            var $2223 = $2231;
                                                                            break;
                                                                    };
                                                                    var $2215 = $2223;
                                                                    break;
                                                            };
                                                            var $2207 = $2215;
                                                            break;
                                                    };
                                                    var $2199 = $2207;
                                                    break;
                                            };
                                            var $2191 = $2199;
                                            break;
                                    };
                                    var $2183 = $2191;
                                    break;
                            };
                            var $2175 = $2183;
                            break;
                    };
                    var $2167 = $2175;
                    break;
            };
            return $2167;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2234 = self.idx;
                    var $2235 = self.code;
                    var $2236 = self.err;
                    var $2237 = Parser$Reply$error$($2234, $2235, $2236);
                    var $2233 = $2237;
                    break;
                case 'Parser.Reply.value':
                    var $2238 = self.idx;
                    var $2239 = self.code;
                    var $2240 = self.val;
                    var self = Fm$Parser$text$("let ", $2238, $2239);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2242 = self.idx;
                            var $2243 = self.code;
                            var $2244 = self.err;
                            var $2245 = Parser$Reply$error$($2242, $2243, $2244);
                            var $2241 = $2245;
                            break;
                        case 'Parser.Reply.value':
                            var $2246 = self.idx;
                            var $2247 = self.code;
                            var $2248 = self.val;
                            var self = Fm$Parser$name1$($2246, $2247);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2250 = self.idx;
                                    var $2251 = self.code;
                                    var $2252 = self.err;
                                    var $2253 = Parser$Reply$error$($2250, $2251, $2252);
                                    var $2249 = $2253;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2254 = self.idx;
                                    var $2255 = self.code;
                                    var $2256 = self.val;
                                    var self = Fm$Parser$text$("=", $2254, $2255);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2258 = self.idx;
                                            var $2259 = self.code;
                                            var $2260 = self.err;
                                            var $2261 = Parser$Reply$error$($2258, $2259, $2260);
                                            var $2257 = $2261;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2262 = self.idx;
                                            var $2263 = self.code;
                                            var $2264 = self.val;
                                            var self = Fm$Parser$term$($2262, $2263);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2266 = self.idx;
                                                    var $2267 = self.code;
                                                    var $2268 = self.err;
                                                    var $2269 = Parser$Reply$error$($2266, $2267, $2268);
                                                    var $2265 = $2269;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2270 = self.idx;
                                                    var $2271 = self.code;
                                                    var $2272 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2270, $2271);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2274 = self.idx;
                                                            var $2275 = self.code;
                                                            var $2276 = self.err;
                                                            var $2277 = Parser$Reply$error$($2274, $2275, $2276);
                                                            var $2273 = $2277;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2278 = self.idx;
                                                            var $2279 = self.code;
                                                            var $2280 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2278)($2279);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2282 = self.idx;
                                                                    var $2283 = self.code;
                                                                    var $2284 = self.err;
                                                                    var $2285 = Parser$Reply$error$($2282, $2283, $2284);
                                                                    var $2281 = $2285;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2286 = self.idx;
                                                                    var $2287 = self.code;
                                                                    var $2288 = self.val;
                                                                    var self = Fm$Parser$stop$($2240, $2286, $2287);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2290 = self.idx;
                                                                            var $2291 = self.code;
                                                                            var $2292 = self.err;
                                                                            var $2293 = Parser$Reply$error$($2290, $2291, $2292);
                                                                            var $2289 = $2293;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2294 = self.idx;
                                                                            var $2295 = self.code;
                                                                            var $2296 = self.val;
                                                                            var $2297 = Parser$Reply$value$($2294, $2295, Fm$Term$ori$($2296, Fm$Term$let$($2256, $2272, (_x$28 => {
                                                                                var $2298 = $2288;
                                                                                return $2298;
                                                                            }))));
                                                                            var $2289 = $2297;
                                                                            break;
                                                                    };
                                                                    var $2281 = $2289;
                                                                    break;
                                                            };
                                                            var $2273 = $2281;
                                                            break;
                                                    };
                                                    var $2265 = $2273;
                                                    break;
                                            };
                                            var $2257 = $2265;
                                            break;
                                    };
                                    var $2249 = $2257;
                                    break;
                            };
                            var $2241 = $2249;
                            break;
                    };
                    var $2233 = $2241;
                    break;
            };
            return $2233;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2300 = self.idx;
                    var $2301 = self.code;
                    var $2302 = self.err;
                    var $2303 = Parser$Reply$error$($2300, $2301, $2302);
                    var $2299 = $2303;
                    break;
                case 'Parser.Reply.value':
                    var $2304 = self.idx;
                    var $2305 = self.code;
                    var $2306 = self.val;
                    var self = Fm$Parser$text$("return ", $2304, $2305);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2308 = self.idx;
                            var $2309 = self.code;
                            var $2310 = self.err;
                            var $2311 = Parser$Reply$error$($2308, $2309, $2310);
                            var $2307 = $2311;
                            break;
                        case 'Parser.Reply.value':
                            var $2312 = self.idx;
                            var $2313 = self.code;
                            var $2314 = self.val;
                            var self = Fm$Parser$term$($2312, $2313);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2316 = self.idx;
                                    var $2317 = self.code;
                                    var $2318 = self.err;
                                    var $2319 = Parser$Reply$error$($2316, $2317, $2318);
                                    var $2315 = $2319;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2320 = self.idx;
                                    var $2321 = self.code;
                                    var $2322 = self.val;
                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2320, $2321);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2324 = self.idx;
                                            var $2325 = self.code;
                                            var $2326 = self.err;
                                            var $2327 = Parser$Reply$error$($2324, $2325, $2326);
                                            var $2323 = $2327;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2328 = self.idx;
                                            var $2329 = self.code;
                                            var $2330 = self.val;
                                            var self = Fm$Parser$stop$($2306, $2328, $2329);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2332 = self.idx;
                                                    var $2333 = self.code;
                                                    var $2334 = self.err;
                                                    var $2335 = Parser$Reply$error$($2332, $2333, $2334);
                                                    var $2331 = $2335;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2336 = self.idx;
                                                    var $2337 = self.code;
                                                    var $2338 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.pure"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, $2322);
                                                    var $2339 = Parser$Reply$value$($2336, $2337, Fm$Term$ori$($2338, _term$22));
                                                    var $2331 = $2339;
                                                    break;
                                            };
                                            var $2323 = $2331;
                                            break;
                                    };
                                    var $2315 = $2323;
                                    break;
                            };
                            var $2307 = $2315;
                            break;
                    };
                    var $2299 = $2307;
                    break;
            };
            return $2299;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2341 = self.idx;
                    var $2342 = self.code;
                    var $2343 = self.err;
                    var $2344 = Parser$Reply$error$($2341, $2342, $2343);
                    var $2340 = $2344;
                    break;
                case 'Parser.Reply.value':
                    var $2345 = self.idx;
                    var $2346 = self.code;
                    var $2347 = self.val;
                    var self = Fm$Parser$term$($2345, $2346);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2349 = self.idx;
                            var $2350 = self.code;
                            var $2351 = self.err;
                            var $2352 = Parser$Reply$error$($2349, $2350, $2351);
                            var $2348 = $2352;
                            break;
                        case 'Parser.Reply.value':
                            var $2353 = self.idx;
                            var $2354 = self.code;
                            var $2355 = self.val;
                            var self = Parser$maybe$(Fm$Parser$text(";"), $2353, $2354);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2357 = self.idx;
                                    var $2358 = self.code;
                                    var $2359 = self.err;
                                    var $2360 = Parser$Reply$error$($2357, $2358, $2359);
                                    var $2356 = $2360;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2361 = self.idx;
                                    var $2362 = self.code;
                                    var $2363 = self.val;
                                    var self = Fm$Parser$do$statements$(_monad_name$1)($2361)($2362);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2365 = self.idx;
                                            var $2366 = self.code;
                                            var $2367 = self.err;
                                            var $2368 = Parser$Reply$error$($2365, $2366, $2367);
                                            var $2364 = $2368;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2369 = self.idx;
                                            var $2370 = self.code;
                                            var $2371 = self.val;
                                            var self = Fm$Parser$stop$($2347, $2369, $2370);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2373 = self.idx;
                                                    var $2374 = self.code;
                                                    var $2375 = self.err;
                                                    var $2376 = Parser$Reply$error$($2373, $2374, $2375);
                                                    var $2372 = $2376;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2377 = self.idx;
                                                    var $2378 = self.code;
                                                    var $2379 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, Fm$Term$hol$(Bits$e));
                                                    var _term$23 = Fm$Term$app$(_term$22, $2355);
                                                    var _term$24 = Fm$Term$app$(_term$23, Fm$Term$lam$("", (_x$24 => {
                                                        var $2381 = $2371;
                                                        return $2381;
                                                    })));
                                                    var $2380 = Parser$Reply$value$($2377, $2378, Fm$Term$ori$($2379, _term$24));
                                                    var $2372 = $2380;
                                                    break;
                                            };
                                            var $2364 = $2372;
                                            break;
                                    };
                                    var $2356 = $2364;
                                    break;
                            };
                            var $2348 = $2356;
                            break;
                    };
                    var $2340 = $2348;
                    break;
            };
            return $2340;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2383 = self.idx;
                    var $2384 = self.code;
                    var $2385 = self.err;
                    var $2386 = Parser$Reply$error$($2383, $2384, $2385);
                    var $2382 = $2386;
                    break;
                case 'Parser.Reply.value':
                    var $2387 = self.idx;
                    var $2388 = self.code;
                    var $2389 = self.val;
                    var self = Parser$maybe$(Fm$Parser$text(";"), $2387, $2388);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2391 = self.idx;
                            var $2392 = self.code;
                            var $2393 = self.err;
                            var $2394 = Parser$Reply$error$($2391, $2392, $2393);
                            var $2390 = $2394;
                            break;
                        case 'Parser.Reply.value':
                            var $2395 = self.idx;
                            var $2396 = self.code;
                            var $2397 = self.val;
                            var $2398 = Parser$Reply$value$($2395, $2396, $2389);
                            var $2390 = $2398;
                            break;
                    };
                    var $2382 = $2390;
                    break;
            };
            return $2382;
        }), List$nil))))));
        return $2166;
    };
    const Fm$Parser$do$statements = x0 => Fm$Parser$do$statements$(x0);

    function Fm$Parser$do$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("do ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2400 = self.idx;
                var $2401 = self.code;
                var $2402 = self.err;
                var $2403 = Parser$Reply$error$($2400, $2401, $2402);
                var $2399 = $2403;
                break;
            case 'Parser.Reply.value':
                var $2404 = self.idx;
                var $2405 = self.code;
                var $2406 = self.val;
                var self = Fm$Parser$name1$($2404, $2405);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2408 = self.idx;
                        var $2409 = self.code;
                        var $2410 = self.err;
                        var $2411 = Parser$Reply$error$($2408, $2409, $2410);
                        var $2407 = $2411;
                        break;
                    case 'Parser.Reply.value':
                        var $2412 = self.idx;
                        var $2413 = self.code;
                        var $2414 = self.val;
                        var self = Fm$Parser$text$("{", $2412, $2413);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2416 = self.idx;
                                var $2417 = self.code;
                                var $2418 = self.err;
                                var $2419 = Parser$Reply$error$($2416, $2417, $2418);
                                var $2415 = $2419;
                                break;
                            case 'Parser.Reply.value':
                                var $2420 = self.idx;
                                var $2421 = self.code;
                                var $2422 = self.val;
                                var self = Fm$Parser$do$statements$($2414)($2420)($2421);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2424 = self.idx;
                                        var $2425 = self.code;
                                        var $2426 = self.err;
                                        var $2427 = Parser$Reply$error$($2424, $2425, $2426);
                                        var $2423 = $2427;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2428 = self.idx;
                                        var $2429 = self.code;
                                        var $2430 = self.val;
                                        var self = Fm$Parser$text$("}", $2428, $2429);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2432 = self.idx;
                                                var $2433 = self.code;
                                                var $2434 = self.err;
                                                var $2435 = Parser$Reply$error$($2432, $2433, $2434);
                                                var $2431 = $2435;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2436 = self.idx;
                                                var $2437 = self.code;
                                                var $2438 = self.val;
                                                var $2439 = Parser$Reply$value$($2436, $2437, $2430);
                                                var $2431 = $2439;
                                                break;
                                        };
                                        var $2423 = $2431;
                                        break;
                                };
                                var $2415 = $2423;
                                break;
                        };
                        var $2407 = $2415;
                        break;
                };
                var $2399 = $2407;
                break;
        };
        return $2399;
    };
    const Fm$Parser$do = x0 => x1 => Fm$Parser$do$(x0, x1);

    function Fm$Term$nat$(_natx$1) {
        var $2440 = ({
            _: 'Fm.Term.nat',
            'natx': _natx$1
        });
        return $2440;
    };
    const Fm$Term$nat = x0 => Fm$Term$nat$(x0);

    function Fm$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $2442 = Fm$Term$ref$(Fm$Name$read$("Nat.zero"));
            var $2441 = $2442;
        } else {
            var $2443 = (self - 1n);
            var _func$3 = Fm$Term$ref$(Fm$Name$read$("Nat.succ"));
            var _argm$4 = Fm$Term$nat$($2443);
            var $2444 = Fm$Term$app$(_func$3, _argm$4);
            var $2441 = $2444;
        };
        return $2441;
    };
    const Fm$Term$unroll_nat = x0 => Fm$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Fm$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $2446 = Fm$Term$ref$(Fm$Name$read$("Bits.e"));
                var $2445 = $2446;
                break;
            case 'o':
                var $2447 = self.slice(0, -1);
                var $2448 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.o")), Fm$Term$unroll_chr$bits$($2447));
                var $2445 = $2448;
                break;
            case 'i':
                var $2449 = self.slice(0, -1);
                var $2450 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.i")), Fm$Term$unroll_chr$bits$($2449));
                var $2445 = $2450;
                break;
        };
        return $2445;
    };
    const Fm$Term$unroll_chr$bits = x0 => Fm$Term$unroll_chr$bits$(x0);

    function Fm$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Fm$Term$ref$(Fm$Name$read$("Word.from_bits"));
        var _term$4 = Fm$Term$app$(_term$3, Fm$Term$nat$(16n));
        var _term$5 = Fm$Term$app$(_term$4, Fm$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("U16.new")), _term$5);
        var $2451 = _term$6;
        return $2451;
    };
    const Fm$Term$unroll_chr = x0 => Fm$Term$unroll_chr$(x0);

    function Fm$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $2453 = Fm$Term$ref$(Fm$Name$read$("String.nil"));
            var $2452 = $2453;
        } else {
            var $2454 = self.charCodeAt(0);
            var $2455 = self.slice(1);
            var _char$4 = Fm$Term$chr$($2454);
            var _term$5 = Fm$Term$ref$(Fm$Name$read$("String.cons"));
            var _term$6 = Fm$Term$app$(_term$5, _char$4);
            var _term$7 = Fm$Term$app$(_term$6, Fm$Term$str$($2455));
            var $2456 = _term$7;
            var $2452 = $2456;
        };
        return $2452;
    };
    const Fm$Term$unroll_str = x0 => Fm$Term$unroll_str$(x0);

    function Fm$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $2458 = self.name;
                var $2459 = self.indx;
                var $2460 = _term$1;
                var $2457 = $2460;
                break;
            case 'Fm.Term.ref':
                var $2461 = self.name;
                var self = Fm$get$($2461, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $2463 = Fm$Term$ref$($2461);
                        var $2462 = $2463;
                        break;
                    case 'Maybe.some':
                        var $2464 = self.value;
                        var self = $2464;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $2466 = self.file;
                                var $2467 = self.code;
                                var $2468 = self.name;
                                var $2469 = self.term;
                                var $2470 = self.type;
                                var $2471 = self.stat;
                                var $2472 = Fm$Term$reduce$($2469, _defs$2);
                                var $2465 = $2472;
                                break;
                        };
                        var $2462 = $2465;
                        break;
                };
                var $2457 = $2462;
                break;
            case 'Fm.Term.typ':
                var $2473 = _term$1;
                var $2457 = $2473;
                break;
            case 'Fm.Term.all':
                var $2474 = self.eras;
                var $2475 = self.self;
                var $2476 = self.name;
                var $2477 = self.xtyp;
                var $2478 = self.body;
                var $2479 = _term$1;
                var $2457 = $2479;
                break;
            case 'Fm.Term.lam':
                var $2480 = self.name;
                var $2481 = self.body;
                var $2482 = _term$1;
                var $2457 = $2482;
                break;
            case 'Fm.Term.app':
                var $2483 = self.func;
                var $2484 = self.argm;
                var _func$5 = Fm$Term$reduce$($2483, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $2486 = self.name;
                        var $2487 = self.indx;
                        var $2488 = _term$1;
                        var $2485 = $2488;
                        break;
                    case 'Fm.Term.ref':
                        var $2489 = self.name;
                        var $2490 = _term$1;
                        var $2485 = $2490;
                        break;
                    case 'Fm.Term.typ':
                        var $2491 = _term$1;
                        var $2485 = $2491;
                        break;
                    case 'Fm.Term.all':
                        var $2492 = self.eras;
                        var $2493 = self.self;
                        var $2494 = self.name;
                        var $2495 = self.xtyp;
                        var $2496 = self.body;
                        var $2497 = _term$1;
                        var $2485 = $2497;
                        break;
                    case 'Fm.Term.lam':
                        var $2498 = self.name;
                        var $2499 = self.body;
                        var $2500 = Fm$Term$reduce$($2499($2484), _defs$2);
                        var $2485 = $2500;
                        break;
                    case 'Fm.Term.app':
                        var $2501 = self.func;
                        var $2502 = self.argm;
                        var $2503 = _term$1;
                        var $2485 = $2503;
                        break;
                    case 'Fm.Term.let':
                        var $2504 = self.name;
                        var $2505 = self.expr;
                        var $2506 = self.body;
                        var $2507 = _term$1;
                        var $2485 = $2507;
                        break;
                    case 'Fm.Term.def':
                        var $2508 = self.name;
                        var $2509 = self.expr;
                        var $2510 = self.body;
                        var $2511 = _term$1;
                        var $2485 = $2511;
                        break;
                    case 'Fm.Term.ann':
                        var $2512 = self.done;
                        var $2513 = self.term;
                        var $2514 = self.type;
                        var $2515 = _term$1;
                        var $2485 = $2515;
                        break;
                    case 'Fm.Term.gol':
                        var $2516 = self.name;
                        var $2517 = self.dref;
                        var $2518 = self.verb;
                        var $2519 = _term$1;
                        var $2485 = $2519;
                        break;
                    case 'Fm.Term.hol':
                        var $2520 = self.path;
                        var $2521 = _term$1;
                        var $2485 = $2521;
                        break;
                    case 'Fm.Term.nat':
                        var $2522 = self.natx;
                        var $2523 = _term$1;
                        var $2485 = $2523;
                        break;
                    case 'Fm.Term.chr':
                        var $2524 = self.chrx;
                        var $2525 = _term$1;
                        var $2485 = $2525;
                        break;
                    case 'Fm.Term.str':
                        var $2526 = self.strx;
                        var $2527 = _term$1;
                        var $2485 = $2527;
                        break;
                    case 'Fm.Term.cse':
                        var $2528 = self.path;
                        var $2529 = self.expr;
                        var $2530 = self.name;
                        var $2531 = self.with;
                        var $2532 = self.cses;
                        var $2533 = self.moti;
                        var $2534 = _term$1;
                        var $2485 = $2534;
                        break;
                    case 'Fm.Term.ori':
                        var $2535 = self.orig;
                        var $2536 = self.expr;
                        var $2537 = _term$1;
                        var $2485 = $2537;
                        break;
                };
                var $2457 = $2485;
                break;
            case 'Fm.Term.let':
                var $2538 = self.name;
                var $2539 = self.expr;
                var $2540 = self.body;
                var $2541 = Fm$Term$reduce$($2540($2539), _defs$2);
                var $2457 = $2541;
                break;
            case 'Fm.Term.def':
                var $2542 = self.name;
                var $2543 = self.expr;
                var $2544 = self.body;
                var $2545 = Fm$Term$reduce$($2544($2543), _defs$2);
                var $2457 = $2545;
                break;
            case 'Fm.Term.ann':
                var $2546 = self.done;
                var $2547 = self.term;
                var $2548 = self.type;
                var $2549 = Fm$Term$reduce$($2547, _defs$2);
                var $2457 = $2549;
                break;
            case 'Fm.Term.gol':
                var $2550 = self.name;
                var $2551 = self.dref;
                var $2552 = self.verb;
                var $2553 = _term$1;
                var $2457 = $2553;
                break;
            case 'Fm.Term.hol':
                var $2554 = self.path;
                var $2555 = _term$1;
                var $2457 = $2555;
                break;
            case 'Fm.Term.nat':
                var $2556 = self.natx;
                var $2557 = Fm$Term$reduce$(Fm$Term$unroll_nat$($2556), _defs$2);
                var $2457 = $2557;
                break;
            case 'Fm.Term.chr':
                var $2558 = self.chrx;
                var $2559 = Fm$Term$reduce$(Fm$Term$unroll_chr$($2558), _defs$2);
                var $2457 = $2559;
                break;
            case 'Fm.Term.str':
                var $2560 = self.strx;
                var $2561 = Fm$Term$reduce$(Fm$Term$unroll_str$($2560), _defs$2);
                var $2457 = $2561;
                break;
            case 'Fm.Term.cse':
                var $2562 = self.path;
                var $2563 = self.expr;
                var $2564 = self.name;
                var $2565 = self.with;
                var $2566 = self.cses;
                var $2567 = self.moti;
                var $2568 = _term$1;
                var $2457 = $2568;
                break;
            case 'Fm.Term.ori':
                var $2569 = self.orig;
                var $2570 = self.expr;
                var $2571 = Fm$Term$reduce$($2570, _defs$2);
                var $2457 = $2571;
                break;
        };
        return $2457;
    };
    const Fm$Term$reduce = x0 => x1 => Fm$Term$reduce$(x0, x1);
    const Map$new = ({
        _: 'Map.new'
    });

    function Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$6) {
        var $2572 = ({
            _: 'Fm.Def.new',
            'file': _file$1,
            'code': _code$2,
            'name': _name$3,
            'term': _term$4,
            'type': _type$5,
            'stat': _stat$6
        });
        return $2572;
    };
    const Fm$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Def$new$(x0, x1, x2, x3, x4, x5);
    const Fm$Status$init = ({
        _: 'Fm.Status.init'
    });

    function Fm$Parser$case$with$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("with", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2574 = self.idx;
                var $2575 = self.code;
                var $2576 = self.err;
                var $2577 = Parser$Reply$error$($2574, $2575, $2576);
                var $2573 = $2577;
                break;
            case 'Parser.Reply.value':
                var $2578 = self.idx;
                var $2579 = self.code;
                var $2580 = self.val;
                var self = Fm$Parser$name1$($2578, $2579);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2582 = self.idx;
                        var $2583 = self.code;
                        var $2584 = self.err;
                        var $2585 = Parser$Reply$error$($2582, $2583, $2584);
                        var $2581 = $2585;
                        break;
                    case 'Parser.Reply.value':
                        var $2586 = self.idx;
                        var $2587 = self.code;
                        var $2588 = self.val;
                        var self = Fm$Parser$text$(":", $2586, $2587);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2590 = self.idx;
                                var $2591 = self.code;
                                var $2592 = self.err;
                                var $2593 = Parser$Reply$error$($2590, $2591, $2592);
                                var $2589 = $2593;
                                break;
                            case 'Parser.Reply.value':
                                var $2594 = self.idx;
                                var $2595 = self.code;
                                var $2596 = self.val;
                                var self = Fm$Parser$term$($2594, $2595);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2598 = self.idx;
                                        var $2599 = self.code;
                                        var $2600 = self.err;
                                        var $2601 = Parser$Reply$error$($2598, $2599, $2600);
                                        var $2597 = $2601;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2602 = self.idx;
                                        var $2603 = self.code;
                                        var $2604 = self.val;
                                        var self = Fm$Parser$text$("=", $2602, $2603);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2606 = self.idx;
                                                var $2607 = self.code;
                                                var $2608 = self.err;
                                                var $2609 = Parser$Reply$error$($2606, $2607, $2608);
                                                var $2605 = $2609;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2610 = self.idx;
                                                var $2611 = self.code;
                                                var $2612 = self.val;
                                                var self = Fm$Parser$term$($2610, $2611);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2614 = self.idx;
                                                        var $2615 = self.code;
                                                        var $2616 = self.err;
                                                        var $2617 = Parser$Reply$error$($2614, $2615, $2616);
                                                        var $2613 = $2617;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2618 = self.idx;
                                                        var $2619 = self.code;
                                                        var $2620 = self.val;
                                                        var $2621 = Parser$Reply$value$($2618, $2619, Fm$Def$new$("", "", $2588, $2620, $2604, Fm$Status$init));
                                                        var $2613 = $2621;
                                                        break;
                                                };
                                                var $2605 = $2613;
                                                break;
                                        };
                                        var $2597 = $2605;
                                        break;
                                };
                                var $2589 = $2597;
                                break;
                        };
                        var $2581 = $2589;
                        break;
                };
                var $2573 = $2581;
                break;
        };
        return $2573;
    };
    const Fm$Parser$case$with = x0 => x1 => Fm$Parser$case$with$(x0, x1);

    function Fm$Parser$case$case$(_idx$1, _code$2) {
        var self = Fm$Parser$name1$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2623 = self.idx;
                var $2624 = self.code;
                var $2625 = self.err;
                var $2626 = Parser$Reply$error$($2623, $2624, $2625);
                var $2622 = $2626;
                break;
            case 'Parser.Reply.value':
                var $2627 = self.idx;
                var $2628 = self.code;
                var $2629 = self.val;
                var self = Fm$Parser$text$(":", $2627, $2628);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2631 = self.idx;
                        var $2632 = self.code;
                        var $2633 = self.err;
                        var $2634 = Parser$Reply$error$($2631, $2632, $2633);
                        var $2630 = $2634;
                        break;
                    case 'Parser.Reply.value':
                        var $2635 = self.idx;
                        var $2636 = self.code;
                        var $2637 = self.val;
                        var self = Fm$Parser$term$($2635, $2636);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2639 = self.idx;
                                var $2640 = self.code;
                                var $2641 = self.err;
                                var $2642 = Parser$Reply$error$($2639, $2640, $2641);
                                var $2638 = $2642;
                                break;
                            case 'Parser.Reply.value':
                                var $2643 = self.idx;
                                var $2644 = self.code;
                                var $2645 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text(","), $2643, $2644);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2647 = self.idx;
                                        var $2648 = self.code;
                                        var $2649 = self.err;
                                        var $2650 = Parser$Reply$error$($2647, $2648, $2649);
                                        var $2646 = $2650;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2651 = self.idx;
                                        var $2652 = self.code;
                                        var $2653 = self.val;
                                        var $2654 = Parser$Reply$value$($2651, $2652, Pair$new$($2629, $2645));
                                        var $2646 = $2654;
                                        break;
                                };
                                var $2638 = $2646;
                                break;
                        };
                        var $2630 = $2638;
                        break;
                };
                var $2622 = $2630;
                break;
        };
        return $2622;
    };
    const Fm$Parser$case$case = x0 => x1 => Fm$Parser$case$case$(x0, x1);

    function Map$tie$(_val$2, _lft$3, _rgt$4) {
        var $2655 = ({
            _: 'Map.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $2655;
    };
    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);

    function Map$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2658 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);
                        var $2657 = $2658;
                        break;
                    case 'Map.tie':
                        var $2659 = self.val;
                        var $2660 = self.lft;
                        var $2661 = self.rgt;
                        var $2662 = Map$tie$(Maybe$some$(_val$3), $2660, $2661);
                        var $2657 = $2662;
                        break;
                };
                var $2656 = $2657;
                break;
            case 'o':
                var $2663 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2665 = Map$tie$(Maybe$none, Map$set$($2663, _val$3, Map$new), Map$new);
                        var $2664 = $2665;
                        break;
                    case 'Map.tie':
                        var $2666 = self.val;
                        var $2667 = self.lft;
                        var $2668 = self.rgt;
                        var $2669 = Map$tie$($2666, Map$set$($2663, _val$3, $2667), $2668);
                        var $2664 = $2669;
                        break;
                };
                var $2656 = $2664;
                break;
            case 'i':
                var $2670 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2672 = Map$tie$(Maybe$none, Map$new, Map$set$($2670, _val$3, Map$new));
                        var $2671 = $2672;
                        break;
                    case 'Map.tie':
                        var $2673 = self.val;
                        var $2674 = self.lft;
                        var $2675 = self.rgt;
                        var $2676 = Map$tie$($2673, $2674, Map$set$($2670, _val$3, $2675));
                        var $2671 = $2676;
                        break;
                };
                var $2656 = $2671;
                break;
        };
        return $2656;
    };
    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $2678 = Map$new;
                var $2677 = $2678;
                break;
            case 'List.cons':
                var $2679 = self.head;
                var $2680 = self.tail;
                var self = $2679;
                switch (self._) {
                    case 'Pair.new':
                        var $2682 = self.fst;
                        var $2683 = self.snd;
                        var $2684 = Map$set$($2682, $2683, Map$from_list$($2680));
                        var $2681 = $2684;
                        break;
                };
                var $2677 = $2681;
                break;
        };
        return $2677;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2686 = self.fst;
                var $2687 = self.snd;
                var $2688 = $2686;
                var $2685 = $2688;
                break;
        };
        return $2685;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2690 = self.fst;
                var $2691 = self.snd;
                var $2692 = $2691;
                var $2689 = $2692;
                break;
        };
        return $2689;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Fm$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $2693 = ({
            _: 'Fm.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $2693;
    };
    const Fm$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Fm$Parser$case$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2695 = self.idx;
                var $2696 = self.code;
                var $2697 = self.err;
                var $2698 = Parser$Reply$error$($2695, $2696, $2697);
                var $2694 = $2698;
                break;
            case 'Parser.Reply.value':
                var $2699 = self.idx;
                var $2700 = self.code;
                var $2701 = self.val;
                var self = Fm$Parser$text$("case ", $2699, $2700);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2703 = self.idx;
                        var $2704 = self.code;
                        var $2705 = self.err;
                        var $2706 = Parser$Reply$error$($2703, $2704, $2705);
                        var $2702 = $2706;
                        break;
                    case 'Parser.Reply.value':
                        var $2707 = self.idx;
                        var $2708 = self.code;
                        var $2709 = self.val;
                        var self = Fm$Parser$spaces($2707)($2708);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2711 = self.idx;
                                var $2712 = self.code;
                                var $2713 = self.err;
                                var $2714 = Parser$Reply$error$($2711, $2712, $2713);
                                var $2710 = $2714;
                                break;
                            case 'Parser.Reply.value':
                                var $2715 = self.idx;
                                var $2716 = self.code;
                                var $2717 = self.val;
                                var self = Fm$Parser$term$($2715, $2716);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2719 = self.idx;
                                        var $2720 = self.code;
                                        var $2721 = self.err;
                                        var $2722 = Parser$Reply$error$($2719, $2720, $2721);
                                        var $2718 = $2722;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2723 = self.idx;
                                        var $2724 = self.code;
                                        var $2725 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2728 = self.idx;
                                                    var $2729 = self.code;
                                                    var $2730 = self.err;
                                                    var $2731 = Parser$Reply$error$($2728, $2729, $2730);
                                                    var $2727 = $2731;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2732 = self.idx;
                                                    var $2733 = self.code;
                                                    var $2734 = self.val;
                                                    var $2735 = Fm$Parser$name1$($2732, $2733);
                                                    var $2727 = $2735;
                                                    break;
                                            };
                                            return $2727;
                                        }), $2723, $2724);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2736 = self.idx;
                                                var $2737 = self.code;
                                                var $2738 = self.err;
                                                var $2739 = Parser$Reply$error$($2736, $2737, $2738);
                                                var $2726 = $2739;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2740 = self.idx;
                                                var $2741 = self.code;
                                                var $2742 = self.val;
                                                var self = $2742;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var self = Fm$Term$reduce$($2725, Map$new);
                                                        switch (self._) {
                                                            case 'Fm.Term.var':
                                                                var $2745 = self.name;
                                                                var $2746 = self.indx;
                                                                var $2747 = $2745;
                                                                var $2744 = $2747;
                                                                break;
                                                            case 'Fm.Term.ref':
                                                                var $2748 = self.name;
                                                                var $2749 = $2748;
                                                                var $2744 = $2749;
                                                                break;
                                                            case 'Fm.Term.typ':
                                                                var $2750 = Fm$Name$read$("self");
                                                                var $2744 = $2750;
                                                                break;
                                                            case 'Fm.Term.all':
                                                                var $2751 = self.eras;
                                                                var $2752 = self.self;
                                                                var $2753 = self.name;
                                                                var $2754 = self.xtyp;
                                                                var $2755 = self.body;
                                                                var $2756 = Fm$Name$read$("self");
                                                                var $2744 = $2756;
                                                                break;
                                                            case 'Fm.Term.lam':
                                                                var $2757 = self.name;
                                                                var $2758 = self.body;
                                                                var $2759 = Fm$Name$read$("self");
                                                                var $2744 = $2759;
                                                                break;
                                                            case 'Fm.Term.app':
                                                                var $2760 = self.func;
                                                                var $2761 = self.argm;
                                                                var $2762 = Fm$Name$read$("self");
                                                                var $2744 = $2762;
                                                                break;
                                                            case 'Fm.Term.let':
                                                                var $2763 = self.name;
                                                                var $2764 = self.expr;
                                                                var $2765 = self.body;
                                                                var $2766 = Fm$Name$read$("self");
                                                                var $2744 = $2766;
                                                                break;
                                                            case 'Fm.Term.def':
                                                                var $2767 = self.name;
                                                                var $2768 = self.expr;
                                                                var $2769 = self.body;
                                                                var $2770 = Fm$Name$read$("self");
                                                                var $2744 = $2770;
                                                                break;
                                                            case 'Fm.Term.ann':
                                                                var $2771 = self.done;
                                                                var $2772 = self.term;
                                                                var $2773 = self.type;
                                                                var $2774 = Fm$Name$read$("self");
                                                                var $2744 = $2774;
                                                                break;
                                                            case 'Fm.Term.gol':
                                                                var $2775 = self.name;
                                                                var $2776 = self.dref;
                                                                var $2777 = self.verb;
                                                                var $2778 = Fm$Name$read$("self");
                                                                var $2744 = $2778;
                                                                break;
                                                            case 'Fm.Term.hol':
                                                                var $2779 = self.path;
                                                                var $2780 = Fm$Name$read$("self");
                                                                var $2744 = $2780;
                                                                break;
                                                            case 'Fm.Term.nat':
                                                                var $2781 = self.natx;
                                                                var $2782 = Fm$Name$read$("self");
                                                                var $2744 = $2782;
                                                                break;
                                                            case 'Fm.Term.chr':
                                                                var $2783 = self.chrx;
                                                                var $2784 = Fm$Name$read$("self");
                                                                var $2744 = $2784;
                                                                break;
                                                            case 'Fm.Term.str':
                                                                var $2785 = self.strx;
                                                                var $2786 = Fm$Name$read$("self");
                                                                var $2744 = $2786;
                                                                break;
                                                            case 'Fm.Term.cse':
                                                                var $2787 = self.path;
                                                                var $2788 = self.expr;
                                                                var $2789 = self.name;
                                                                var $2790 = self.with;
                                                                var $2791 = self.cses;
                                                                var $2792 = self.moti;
                                                                var $2793 = Fm$Name$read$("self");
                                                                var $2744 = $2793;
                                                                break;
                                                            case 'Fm.Term.ori':
                                                                var $2794 = self.orig;
                                                                var $2795 = self.expr;
                                                                var $2796 = Fm$Name$read$("self");
                                                                var $2744 = $2796;
                                                                break;
                                                        };
                                                        var _name$18 = $2744;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $2797 = self.value;
                                                        var $2798 = $2797;
                                                        var _name$18 = $2798;
                                                        break;
                                                };
                                                var self = Parser$many$(Fm$Parser$case$with)($2740)($2741);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2799 = self.idx;
                                                        var $2800 = self.code;
                                                        var $2801 = self.err;
                                                        var $2802 = Parser$Reply$error$($2799, $2800, $2801);
                                                        var $2743 = $2802;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2803 = self.idx;
                                                        var $2804 = self.code;
                                                        var $2805 = self.val;
                                                        var self = Fm$Parser$text$("{", $2803, $2804);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2807 = self.idx;
                                                                var $2808 = self.code;
                                                                var $2809 = self.err;
                                                                var $2810 = Parser$Reply$error$($2807, $2808, $2809);
                                                                var $2806 = $2810;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2811 = self.idx;
                                                                var $2812 = self.code;
                                                                var $2813 = self.val;
                                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$case$case)($2811)($2812);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2815 = self.idx;
                                                                        var $2816 = self.code;
                                                                        var $2817 = self.err;
                                                                        var $2818 = Parser$Reply$error$($2815, $2816, $2817);
                                                                        var $2814 = $2818;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2819 = self.idx;
                                                                        var $2820 = self.code;
                                                                        var $2821 = self.val;
                                                                        var _cses$28 = Map$from_list$(List$mapped$($2821, (_x$28 => {
                                                                            var $2823 = Pair$new$((fm_name_to_bits(Pair$fst$(_x$28))), Pair$snd$(_x$28));
                                                                            return $2823;
                                                                        })));
                                                                        var self = Parser$first_of$(List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$(":", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2825 = self.idx;
                                                                                    var $2826 = self.code;
                                                                                    var $2827 = self.err;
                                                                                    var $2828 = Parser$Reply$error$($2825, $2826, $2827);
                                                                                    var $2824 = $2828;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2829 = self.idx;
                                                                                    var $2830 = self.code;
                                                                                    var $2831 = self.val;
                                                                                    var self = Fm$Parser$term$($2829, $2830);
                                                                                    switch (self._) {
                                                                                        case 'Parser.Reply.error':
                                                                                            var $2833 = self.idx;
                                                                                            var $2834 = self.code;
                                                                                            var $2835 = self.err;
                                                                                            var $2836 = Parser$Reply$error$($2833, $2834, $2835);
                                                                                            var $2832 = $2836;
                                                                                            break;
                                                                                        case 'Parser.Reply.value':
                                                                                            var $2837 = self.idx;
                                                                                            var $2838 = self.code;
                                                                                            var $2839 = self.val;
                                                                                            var $2840 = Parser$Reply$value$($2837, $2838, Maybe$some$($2839));
                                                                                            var $2832 = $2840;
                                                                                            break;
                                                                                    };
                                                                                    var $2824 = $2832;
                                                                                    break;
                                                                            };
                                                                            return $2824;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$("!", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2842 = self.idx;
                                                                                    var $2843 = self.code;
                                                                                    var $2844 = self.err;
                                                                                    var $2845 = Parser$Reply$error$($2842, $2843, $2844);
                                                                                    var $2841 = $2845;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2846 = self.idx;
                                                                                    var $2847 = self.code;
                                                                                    var $2848 = self.val;
                                                                                    var $2849 = Parser$Reply$value$($2846, $2847, Maybe$none);
                                                                                    var $2841 = $2849;
                                                                                    break;
                                                                            };
                                                                            return $2841;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var $2850 = Parser$Reply$value$(_idx$29, _code$30, Maybe$some$(Fm$Term$hol$(Bits$e)));
                                                                            return $2850;
                                                                        }), List$nil))))($2819)($2820);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2851 = self.idx;
                                                                                var $2852 = self.code;
                                                                                var $2853 = self.err;
                                                                                var $2854 = Parser$Reply$error$($2851, $2852, $2853);
                                                                                var $2822 = $2854;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2855 = self.idx;
                                                                                var $2856 = self.code;
                                                                                var $2857 = self.val;
                                                                                var self = Fm$Parser$stop$($2701, $2855, $2856);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2859 = self.idx;
                                                                                        var $2860 = self.code;
                                                                                        var $2861 = self.err;
                                                                                        var $2862 = Parser$Reply$error$($2859, $2860, $2861);
                                                                                        var $2858 = $2862;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2863 = self.idx;
                                                                                        var $2864 = self.code;
                                                                                        var $2865 = self.val;
                                                                                        var $2866 = Parser$Reply$value$($2863, $2864, Fm$Term$ori$($2865, Fm$Term$cse$(Bits$e, $2725, _name$18, $2805, _cses$28, $2857)));
                                                                                        var $2858 = $2866;
                                                                                        break;
                                                                                };
                                                                                var $2822 = $2858;
                                                                                break;
                                                                        };
                                                                        var $2814 = $2822;
                                                                        break;
                                                                };
                                                                var $2806 = $2814;
                                                                break;
                                                        };
                                                        var $2743 = $2806;
                                                        break;
                                                };
                                                var $2726 = $2743;
                                                break;
                                        };
                                        var $2718 = $2726;
                                        break;
                                };
                                var $2710 = $2718;
                                break;
                        };
                        var $2702 = $2710;
                        break;
                };
                var $2694 = $2702;
                break;
        };
        return $2694;
    };
    const Fm$Parser$case = x0 => x1 => Fm$Parser$case$(x0, x1);

    function Fm$set$(_name$2, _val$3, _map$4) {
        var $2867 = Map$set$((fm_name_to_bits(_name$2)), _val$3, _map$4);
        return $2867;
    };
    const Fm$set = x0 => x1 => x2 => Fm$set$(x0, x1, x2);

    function Fm$Parser$open$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2869 = self.idx;
                var $2870 = self.code;
                var $2871 = self.err;
                var $2872 = Parser$Reply$error$($2869, $2870, $2871);
                var $2868 = $2872;
                break;
            case 'Parser.Reply.value':
                var $2873 = self.idx;
                var $2874 = self.code;
                var $2875 = self.val;
                var self = Fm$Parser$text$("open ", $2873, $2874);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2877 = self.idx;
                        var $2878 = self.code;
                        var $2879 = self.err;
                        var $2880 = Parser$Reply$error$($2877, $2878, $2879);
                        var $2876 = $2880;
                        break;
                    case 'Parser.Reply.value':
                        var $2881 = self.idx;
                        var $2882 = self.code;
                        var $2883 = self.val;
                        var self = Fm$Parser$spaces($2881)($2882);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2885 = self.idx;
                                var $2886 = self.code;
                                var $2887 = self.err;
                                var $2888 = Parser$Reply$error$($2885, $2886, $2887);
                                var $2884 = $2888;
                                break;
                            case 'Parser.Reply.value':
                                var $2889 = self.idx;
                                var $2890 = self.code;
                                var $2891 = self.val;
                                var self = Fm$Parser$term$($2889, $2890);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2893 = self.idx;
                                        var $2894 = self.code;
                                        var $2895 = self.err;
                                        var $2896 = Parser$Reply$error$($2893, $2894, $2895);
                                        var $2892 = $2896;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2897 = self.idx;
                                        var $2898 = self.code;
                                        var $2899 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2902 = self.idx;
                                                    var $2903 = self.code;
                                                    var $2904 = self.err;
                                                    var $2905 = Parser$Reply$error$($2902, $2903, $2904);
                                                    var $2901 = $2905;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2906 = self.idx;
                                                    var $2907 = self.code;
                                                    var $2908 = self.val;
                                                    var $2909 = Fm$Parser$name1$($2906, $2907);
                                                    var $2901 = $2909;
                                                    break;
                                            };
                                            return $2901;
                                        }), $2897, $2898);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2910 = self.idx;
                                                var $2911 = self.code;
                                                var $2912 = self.err;
                                                var $2913 = Parser$Reply$error$($2910, $2911, $2912);
                                                var $2900 = $2913;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2914 = self.idx;
                                                var $2915 = self.code;
                                                var $2916 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2914, $2915);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2918 = self.idx;
                                                        var $2919 = self.code;
                                                        var $2920 = self.err;
                                                        var $2921 = Parser$Reply$error$($2918, $2919, $2920);
                                                        var $2917 = $2921;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2922 = self.idx;
                                                        var $2923 = self.code;
                                                        var $2924 = self.val;
                                                        var self = $2916;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var self = Fm$Term$reduce$($2899, Map$new);
                                                                switch (self._) {
                                                                    case 'Fm.Term.var':
                                                                        var $2927 = self.name;
                                                                        var $2928 = self.indx;
                                                                        var $2929 = $2927;
                                                                        var $2926 = $2929;
                                                                        break;
                                                                    case 'Fm.Term.ref':
                                                                        var $2930 = self.name;
                                                                        var $2931 = $2930;
                                                                        var $2926 = $2931;
                                                                        break;
                                                                    case 'Fm.Term.typ':
                                                                        var $2932 = Fm$Name$read$("self");
                                                                        var $2926 = $2932;
                                                                        break;
                                                                    case 'Fm.Term.all':
                                                                        var $2933 = self.eras;
                                                                        var $2934 = self.self;
                                                                        var $2935 = self.name;
                                                                        var $2936 = self.xtyp;
                                                                        var $2937 = self.body;
                                                                        var $2938 = Fm$Name$read$("self");
                                                                        var $2926 = $2938;
                                                                        break;
                                                                    case 'Fm.Term.lam':
                                                                        var $2939 = self.name;
                                                                        var $2940 = self.body;
                                                                        var $2941 = Fm$Name$read$("self");
                                                                        var $2926 = $2941;
                                                                        break;
                                                                    case 'Fm.Term.app':
                                                                        var $2942 = self.func;
                                                                        var $2943 = self.argm;
                                                                        var $2944 = Fm$Name$read$("self");
                                                                        var $2926 = $2944;
                                                                        break;
                                                                    case 'Fm.Term.let':
                                                                        var $2945 = self.name;
                                                                        var $2946 = self.expr;
                                                                        var $2947 = self.body;
                                                                        var $2948 = Fm$Name$read$("self");
                                                                        var $2926 = $2948;
                                                                        break;
                                                                    case 'Fm.Term.def':
                                                                        var $2949 = self.name;
                                                                        var $2950 = self.expr;
                                                                        var $2951 = self.body;
                                                                        var $2952 = Fm$Name$read$("self");
                                                                        var $2926 = $2952;
                                                                        break;
                                                                    case 'Fm.Term.ann':
                                                                        var $2953 = self.done;
                                                                        var $2954 = self.term;
                                                                        var $2955 = self.type;
                                                                        var $2956 = Fm$Name$read$("self");
                                                                        var $2926 = $2956;
                                                                        break;
                                                                    case 'Fm.Term.gol':
                                                                        var $2957 = self.name;
                                                                        var $2958 = self.dref;
                                                                        var $2959 = self.verb;
                                                                        var $2960 = Fm$Name$read$("self");
                                                                        var $2926 = $2960;
                                                                        break;
                                                                    case 'Fm.Term.hol':
                                                                        var $2961 = self.path;
                                                                        var $2962 = Fm$Name$read$("self");
                                                                        var $2926 = $2962;
                                                                        break;
                                                                    case 'Fm.Term.nat':
                                                                        var $2963 = self.natx;
                                                                        var $2964 = Fm$Name$read$("self");
                                                                        var $2926 = $2964;
                                                                        break;
                                                                    case 'Fm.Term.chr':
                                                                        var $2965 = self.chrx;
                                                                        var $2966 = Fm$Name$read$("self");
                                                                        var $2926 = $2966;
                                                                        break;
                                                                    case 'Fm.Term.str':
                                                                        var $2967 = self.strx;
                                                                        var $2968 = Fm$Name$read$("self");
                                                                        var $2926 = $2968;
                                                                        break;
                                                                    case 'Fm.Term.cse':
                                                                        var $2969 = self.path;
                                                                        var $2970 = self.expr;
                                                                        var $2971 = self.name;
                                                                        var $2972 = self.with;
                                                                        var $2973 = self.cses;
                                                                        var $2974 = self.moti;
                                                                        var $2975 = Fm$Name$read$("self");
                                                                        var $2926 = $2975;
                                                                        break;
                                                                    case 'Fm.Term.ori':
                                                                        var $2976 = self.orig;
                                                                        var $2977 = self.expr;
                                                                        var $2978 = Fm$Name$read$("self");
                                                                        var $2926 = $2978;
                                                                        break;
                                                                };
                                                                var _name$21 = $2926;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $2979 = self.value;
                                                                var $2980 = $2979;
                                                                var _name$21 = $2980;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Fm$Parser$term$($2922, $2923);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2981 = self.idx;
                                                                var $2982 = self.code;
                                                                var $2983 = self.err;
                                                                var $2984 = Parser$Reply$error$($2981, $2982, $2983);
                                                                var $2925 = $2984;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2985 = self.idx;
                                                                var $2986 = self.code;
                                                                var $2987 = self.val;
                                                                var _cses$26 = Fm$set$("_", $2987, Map$new);
                                                                var _moti$27 = Maybe$some$(Fm$Term$hol$(Bits$e));
                                                                var self = Fm$Parser$stop$($2875, $2985, $2986);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2989 = self.idx;
                                                                        var $2990 = self.code;
                                                                        var $2991 = self.err;
                                                                        var $2992 = Parser$Reply$error$($2989, $2990, $2991);
                                                                        var $2988 = $2992;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2993 = self.idx;
                                                                        var $2994 = self.code;
                                                                        var $2995 = self.val;
                                                                        var $2996 = Parser$Reply$value$($2993, $2994, Fm$Term$ori$($2995, Fm$Term$cse$(Bits$e, $2899, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $2988 = $2996;
                                                                        break;
                                                                };
                                                                var $2925 = $2988;
                                                                break;
                                                        };
                                                        var $2917 = $2925;
                                                        break;
                                                };
                                                var $2900 = $2917;
                                                break;
                                        };
                                        var $2892 = $2900;
                                        break;
                                };
                                var $2884 = $2892;
                                break;
                        };
                        var $2876 = $2884;
                        break;
                };
                var $2868 = $2876;
                break;
        };
        return $2868;
    };
    const Fm$Parser$open = x0 => x1 => Fm$Parser$open$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $2998 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $2997 = $2998;
        } else {
            var $2999 = self.charCodeAt(0);
            var $3000 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($2999 === 48);
            if (self) {
                var $3002 = Parser$Reply$value$(_sidx$5, $3000, 0n);
                var $3001 = $3002;
            } else {
                var self = ($2999 === 49);
                if (self) {
                    var $3004 = Parser$Reply$value$(_sidx$5, $3000, 1n);
                    var $3003 = $3004;
                } else {
                    var self = ($2999 === 50);
                    if (self) {
                        var $3006 = Parser$Reply$value$(_sidx$5, $3000, 2n);
                        var $3005 = $3006;
                    } else {
                        var self = ($2999 === 51);
                        if (self) {
                            var $3008 = Parser$Reply$value$(_sidx$5, $3000, 3n);
                            var $3007 = $3008;
                        } else {
                            var self = ($2999 === 52);
                            if (self) {
                                var $3010 = Parser$Reply$value$(_sidx$5, $3000, 4n);
                                var $3009 = $3010;
                            } else {
                                var self = ($2999 === 53);
                                if (self) {
                                    var $3012 = Parser$Reply$value$(_sidx$5, $3000, 5n);
                                    var $3011 = $3012;
                                } else {
                                    var self = ($2999 === 54);
                                    if (self) {
                                        var $3014 = Parser$Reply$value$(_sidx$5, $3000, 6n);
                                        var $3013 = $3014;
                                    } else {
                                        var self = ($2999 === 55);
                                        if (self) {
                                            var $3016 = Parser$Reply$value$(_sidx$5, $3000, 7n);
                                            var $3015 = $3016;
                                        } else {
                                            var self = ($2999 === 56);
                                            if (self) {
                                                var $3018 = Parser$Reply$value$(_sidx$5, $3000, 8n);
                                                var $3017 = $3018;
                                            } else {
                                                var self = ($2999 === 57);
                                                if (self) {
                                                    var $3020 = Parser$Reply$value$(_sidx$5, $3000, 9n);
                                                    var $3019 = $3020;
                                                } else {
                                                    var $3021 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3019 = $3021;
                                                };
                                                var $3017 = $3019;
                                            };
                                            var $3015 = $3017;
                                        };
                                        var $3013 = $3015;
                                    };
                                    var $3011 = $3013;
                                };
                                var $3009 = $3011;
                            };
                            var $3007 = $3009;
                        };
                        var $3005 = $3007;
                    };
                    var $3003 = $3005;
                };
                var $3001 = $3003;
            };
            var $2997 = $3001;
        };
        return $2997;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.nil':
                        var $3022 = _res$4;
                        return $3022;
                    case 'List.cons':
                        var $3023 = self.head;
                        var $3024 = self.tail;
                        var $3025 = Nat$from_base$go$(_b$1, $3024, (_b$1 * _p$3), (($3023 * _p$3) + _res$4));
                        return $3025;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.nil':
                        var $3026 = _res$3;
                        return $3026;
                    case 'List.cons':
                        var $3027 = self.head;
                        var $3028 = self.tail;
                        var $3029 = List$reverse$go$($3028, List$cons$($3027, _res$3));
                        return $3029;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $3030 = List$reverse$go$(_xs$2, List$nil);
        return $3030;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3031 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3031;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3033 = self.idx;
                var $3034 = self.code;
                var $3035 = self.err;
                var $3036 = Parser$Reply$error$($3033, $3034, $3035);
                var $3032 = $3036;
                break;
            case 'Parser.Reply.value':
                var $3037 = self.idx;
                var $3038 = self.code;
                var $3039 = self.val;
                var $3040 = Parser$Reply$value$($3037, $3038, Nat$from_base$(10n, $3039));
                var $3032 = $3040;
                break;
        };
        return $3032;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3042 = Bits$e;
                var $3041 = $3042;
                break;
            case 'o':
                var $3043 = self.slice(0, -1);
                var $3044 = $3043;
                var $3041 = $3044;
                break;
            case 'i':
                var $3045 = self.slice(0, -1);
                var $3046 = $3045;
                var $3041 = $3046;
                break;
        };
        return $3041;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3048 = (Bits$e + '1');
                var $3047 = $3048;
                break;
            case 'o':
                var $3049 = self.slice(0, -1);
                var $3050 = ($3049 + '1');
                var $3047 = $3050;
                break;
            case 'i':
                var $3051 = self.slice(0, -1);
                var $3052 = (Bits$inc$($3051) + '0');
                var $3047 = $3052;
                break;
        };
        return $3047;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$to_bool$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3054 = Bool$false;
                var $3053 = $3054;
                break;
            case 'Maybe.some':
                var $3055 = self.value;
                var $3056 = Bool$true;
                var $3053 = $3056;
                break;
        };
        return $3053;
    };
    const Maybe$to_bool = x0 => Maybe$to_bool$(x0);

    function Fm$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3057 = ({
            _: 'Fm.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3057;
    };
    const Fm$Term$gol = x0 => x1 => x2 => Fm$Term$gol$(x0, x1, x2);

    function Fm$Parser$goal$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3059 = self.idx;
                var $3060 = self.code;
                var $3061 = self.err;
                var $3062 = Parser$Reply$error$($3059, $3060, $3061);
                var $3058 = $3062;
                break;
            case 'Parser.Reply.value':
                var $3063 = self.idx;
                var $3064 = self.code;
                var $3065 = self.val;
                var self = Fm$Parser$text$("?", $3063, $3064);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3067 = self.idx;
                        var $3068 = self.code;
                        var $3069 = self.err;
                        var $3070 = Parser$Reply$error$($3067, $3068, $3069);
                        var $3066 = $3070;
                        break;
                    case 'Parser.Reply.value':
                        var $3071 = self.idx;
                        var $3072 = self.code;
                        var $3073 = self.val;
                        var self = Fm$Parser$name$($3071, $3072);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3075 = self.idx;
                                var $3076 = self.code;
                                var $3077 = self.err;
                                var $3078 = Parser$Reply$error$($3075, $3076, $3077);
                                var $3074 = $3078;
                                break;
                            case 'Parser.Reply.value':
                                var $3079 = self.idx;
                                var $3080 = self.code;
                                var $3081 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3084 = self.idx;
                                            var $3085 = self.code;
                                            var $3086 = self.err;
                                            var $3087 = Parser$Reply$error$($3084, $3085, $3086);
                                            var $3083 = $3087;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3088 = self.idx;
                                            var $3089 = self.code;
                                            var $3090 = self.val;
                                            var self = Parser$nat$($3088, $3089);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3092 = self.idx;
                                                    var $3093 = self.code;
                                                    var $3094 = self.err;
                                                    var $3095 = Parser$Reply$error$($3092, $3093, $3094);
                                                    var $3091 = $3095;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3096 = self.idx;
                                                    var $3097 = self.code;
                                                    var $3098 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3098)))));
                                                    var $3099 = Parser$Reply$value$($3096, $3097, _bits$20);
                                                    var $3091 = $3099;
                                                    break;
                                            };
                                            var $3083 = $3091;
                                            break;
                                    };
                                    return $3083;
                                }))($3079)($3080);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3100 = self.idx;
                                        var $3101 = self.code;
                                        var $3102 = self.err;
                                        var $3103 = Parser$Reply$error$($3100, $3101, $3102);
                                        var $3082 = $3103;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3104 = self.idx;
                                        var $3105 = self.code;
                                        var $3106 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3104, $3105);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3108 = self.idx;
                                                var $3109 = self.code;
                                                var $3110 = self.err;
                                                var $3111 = Parser$Reply$error$($3108, $3109, $3110);
                                                var self = $3111;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3112 = self.idx;
                                                var $3113 = self.code;
                                                var $3114 = self.val;
                                                var $3115 = Parser$Reply$value$($3112, $3113, Maybe$to_bool$($3114));
                                                var self = $3115;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3116 = self.idx;
                                                var $3117 = self.code;
                                                var $3118 = self.err;
                                                var $3119 = Parser$Reply$error$($3116, $3117, $3118);
                                                var $3107 = $3119;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3120 = self.idx;
                                                var $3121 = self.code;
                                                var $3122 = self.val;
                                                var self = Fm$Parser$stop$($3065, $3120, $3121);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3124 = self.idx;
                                                        var $3125 = self.code;
                                                        var $3126 = self.err;
                                                        var $3127 = Parser$Reply$error$($3124, $3125, $3126);
                                                        var $3123 = $3127;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3128 = self.idx;
                                                        var $3129 = self.code;
                                                        var $3130 = self.val;
                                                        var $3131 = Parser$Reply$value$($3128, $3129, Fm$Term$ori$($3130, Fm$Term$gol$($3081, $3106, $3122)));
                                                        var $3123 = $3131;
                                                        break;
                                                };
                                                var $3107 = $3123;
                                                break;
                                        };
                                        var $3082 = $3107;
                                        break;
                                };
                                var $3074 = $3082;
                                break;
                        };
                        var $3066 = $3074;
                        break;
                };
                var $3058 = $3066;
                break;
        };
        return $3058;
    };
    const Fm$Parser$goal = x0 => x1 => Fm$Parser$goal$(x0, x1);

    function Fm$Parser$hole$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3133 = self.idx;
                var $3134 = self.code;
                var $3135 = self.err;
                var $3136 = Parser$Reply$error$($3133, $3134, $3135);
                var $3132 = $3136;
                break;
            case 'Parser.Reply.value':
                var $3137 = self.idx;
                var $3138 = self.code;
                var $3139 = self.val;
                var self = Fm$Parser$text$("_", $3137, $3138);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3141 = self.idx;
                        var $3142 = self.code;
                        var $3143 = self.err;
                        var $3144 = Parser$Reply$error$($3141, $3142, $3143);
                        var $3140 = $3144;
                        break;
                    case 'Parser.Reply.value':
                        var $3145 = self.idx;
                        var $3146 = self.code;
                        var $3147 = self.val;
                        var self = Fm$Parser$stop$($3139, $3145, $3146);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3149 = self.idx;
                                var $3150 = self.code;
                                var $3151 = self.err;
                                var $3152 = Parser$Reply$error$($3149, $3150, $3151);
                                var $3148 = $3152;
                                break;
                            case 'Parser.Reply.value':
                                var $3153 = self.idx;
                                var $3154 = self.code;
                                var $3155 = self.val;
                                var $3156 = Parser$Reply$value$($3153, $3154, Fm$Term$ori$($3155, Fm$Term$hol$(Bits$e)));
                                var $3148 = $3156;
                                break;
                        };
                        var $3140 = $3148;
                        break;
                };
                var $3132 = $3140;
                break;
        };
        return $3132;
    };
    const Fm$Parser$hole = x0 => x1 => Fm$Parser$hole$(x0, x1);

    function Fm$Parser$u8$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3158 = self.idx;
                var $3159 = self.code;
                var $3160 = self.err;
                var $3161 = Parser$Reply$error$($3158, $3159, $3160);
                var $3157 = $3161;
                break;
            case 'Parser.Reply.value':
                var $3162 = self.idx;
                var $3163 = self.code;
                var $3164 = self.val;
                var self = Fm$Parser$spaces($3162)($3163);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3166 = self.idx;
                        var $3167 = self.code;
                        var $3168 = self.err;
                        var $3169 = Parser$Reply$error$($3166, $3167, $3168);
                        var $3165 = $3169;
                        break;
                    case 'Parser.Reply.value':
                        var $3170 = self.idx;
                        var $3171 = self.code;
                        var $3172 = self.val;
                        var self = Parser$nat$($3170, $3171);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3174 = self.idx;
                                var $3175 = self.code;
                                var $3176 = self.err;
                                var $3177 = Parser$Reply$error$($3174, $3175, $3176);
                                var $3173 = $3177;
                                break;
                            case 'Parser.Reply.value':
                                var $3178 = self.idx;
                                var $3179 = self.code;
                                var $3180 = self.val;
                                var self = Fm$Parser$text$("b", $3178, $3179);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3182 = self.idx;
                                        var $3183 = self.code;
                                        var $3184 = self.err;
                                        var $3185 = Parser$Reply$error$($3182, $3183, $3184);
                                        var $3181 = $3185;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3186 = self.idx;
                                        var $3187 = self.code;
                                        var $3188 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u8");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3180));
                                        var self = Fm$Parser$stop$($3164, $3186, $3187);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3190 = self.idx;
                                                var $3191 = self.code;
                                                var $3192 = self.err;
                                                var $3193 = Parser$Reply$error$($3190, $3191, $3192);
                                                var $3189 = $3193;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3194 = self.idx;
                                                var $3195 = self.code;
                                                var $3196 = self.val;
                                                var $3197 = Parser$Reply$value$($3194, $3195, Fm$Term$ori$($3196, _term$16));
                                                var $3189 = $3197;
                                                break;
                                        };
                                        var $3181 = $3189;
                                        break;
                                };
                                var $3173 = $3181;
                                break;
                        };
                        var $3165 = $3173;
                        break;
                };
                var $3157 = $3165;
                break;
        };
        return $3157;
    };
    const Fm$Parser$u8 = x0 => x1 => Fm$Parser$u8$(x0, x1);

    function Fm$Parser$u16$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3199 = self.idx;
                var $3200 = self.code;
                var $3201 = self.err;
                var $3202 = Parser$Reply$error$($3199, $3200, $3201);
                var $3198 = $3202;
                break;
            case 'Parser.Reply.value':
                var $3203 = self.idx;
                var $3204 = self.code;
                var $3205 = self.val;
                var self = Fm$Parser$spaces($3203)($3204);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3207 = self.idx;
                        var $3208 = self.code;
                        var $3209 = self.err;
                        var $3210 = Parser$Reply$error$($3207, $3208, $3209);
                        var $3206 = $3210;
                        break;
                    case 'Parser.Reply.value':
                        var $3211 = self.idx;
                        var $3212 = self.code;
                        var $3213 = self.val;
                        var self = Parser$nat$($3211, $3212);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3215 = self.idx;
                                var $3216 = self.code;
                                var $3217 = self.err;
                                var $3218 = Parser$Reply$error$($3215, $3216, $3217);
                                var $3214 = $3218;
                                break;
                            case 'Parser.Reply.value':
                                var $3219 = self.idx;
                                var $3220 = self.code;
                                var $3221 = self.val;
                                var self = Fm$Parser$text$("s", $3219, $3220);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3223 = self.idx;
                                        var $3224 = self.code;
                                        var $3225 = self.err;
                                        var $3226 = Parser$Reply$error$($3223, $3224, $3225);
                                        var $3222 = $3226;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3227 = self.idx;
                                        var $3228 = self.code;
                                        var $3229 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u16");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3221));
                                        var self = Fm$Parser$stop$($3205, $3227, $3228);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3231 = self.idx;
                                                var $3232 = self.code;
                                                var $3233 = self.err;
                                                var $3234 = Parser$Reply$error$($3231, $3232, $3233);
                                                var $3230 = $3234;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3235 = self.idx;
                                                var $3236 = self.code;
                                                var $3237 = self.val;
                                                var $3238 = Parser$Reply$value$($3235, $3236, Fm$Term$ori$($3237, _term$16));
                                                var $3230 = $3238;
                                                break;
                                        };
                                        var $3222 = $3230;
                                        break;
                                };
                                var $3214 = $3222;
                                break;
                        };
                        var $3206 = $3214;
                        break;
                };
                var $3198 = $3206;
                break;
        };
        return $3198;
    };
    const Fm$Parser$u16 = x0 => x1 => Fm$Parser$u16$(x0, x1);

    function Fm$Parser$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3240 = self.idx;
                var $3241 = self.code;
                var $3242 = self.err;
                var $3243 = Parser$Reply$error$($3240, $3241, $3242);
                var $3239 = $3243;
                break;
            case 'Parser.Reply.value':
                var $3244 = self.idx;
                var $3245 = self.code;
                var $3246 = self.val;
                var self = Fm$Parser$spaces($3244)($3245);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3248 = self.idx;
                        var $3249 = self.code;
                        var $3250 = self.err;
                        var $3251 = Parser$Reply$error$($3248, $3249, $3250);
                        var $3247 = $3251;
                        break;
                    case 'Parser.Reply.value':
                        var $3252 = self.idx;
                        var $3253 = self.code;
                        var $3254 = self.val;
                        var self = Parser$nat$($3252, $3253);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3256 = self.idx;
                                var $3257 = self.code;
                                var $3258 = self.err;
                                var $3259 = Parser$Reply$error$($3256, $3257, $3258);
                                var $3255 = $3259;
                                break;
                            case 'Parser.Reply.value':
                                var $3260 = self.idx;
                                var $3261 = self.code;
                                var $3262 = self.val;
                                var self = Fm$Parser$text$("u", $3260, $3261);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3264 = self.idx;
                                        var $3265 = self.code;
                                        var $3266 = self.err;
                                        var $3267 = Parser$Reply$error$($3264, $3265, $3266);
                                        var $3263 = $3267;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3268 = self.idx;
                                        var $3269 = self.code;
                                        var $3270 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u32");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3262));
                                        var self = Fm$Parser$stop$($3246, $3268, $3269);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3272 = self.idx;
                                                var $3273 = self.code;
                                                var $3274 = self.err;
                                                var $3275 = Parser$Reply$error$($3272, $3273, $3274);
                                                var $3271 = $3275;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3276 = self.idx;
                                                var $3277 = self.code;
                                                var $3278 = self.val;
                                                var $3279 = Parser$Reply$value$($3276, $3277, Fm$Term$ori$($3278, _term$16));
                                                var $3271 = $3279;
                                                break;
                                        };
                                        var $3263 = $3271;
                                        break;
                                };
                                var $3255 = $3263;
                                break;
                        };
                        var $3247 = $3255;
                        break;
                };
                var $3239 = $3247;
                break;
        };
        return $3239;
    };
    const Fm$Parser$u32 = x0 => x1 => Fm$Parser$u32$(x0, x1);

    function Fm$Parser$u64$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3281 = self.idx;
                var $3282 = self.code;
                var $3283 = self.err;
                var $3284 = Parser$Reply$error$($3281, $3282, $3283);
                var $3280 = $3284;
                break;
            case 'Parser.Reply.value':
                var $3285 = self.idx;
                var $3286 = self.code;
                var $3287 = self.val;
                var self = Fm$Parser$spaces($3285)($3286);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3289 = self.idx;
                        var $3290 = self.code;
                        var $3291 = self.err;
                        var $3292 = Parser$Reply$error$($3289, $3290, $3291);
                        var $3288 = $3292;
                        break;
                    case 'Parser.Reply.value':
                        var $3293 = self.idx;
                        var $3294 = self.code;
                        var $3295 = self.val;
                        var self = Parser$nat$($3293, $3294);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3297 = self.idx;
                                var $3298 = self.code;
                                var $3299 = self.err;
                                var $3300 = Parser$Reply$error$($3297, $3298, $3299);
                                var $3296 = $3300;
                                break;
                            case 'Parser.Reply.value':
                                var $3301 = self.idx;
                                var $3302 = self.code;
                                var $3303 = self.val;
                                var self = Fm$Parser$text$("l", $3301, $3302);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3305 = self.idx;
                                        var $3306 = self.code;
                                        var $3307 = self.err;
                                        var $3308 = Parser$Reply$error$($3305, $3306, $3307);
                                        var $3304 = $3308;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3309 = self.idx;
                                        var $3310 = self.code;
                                        var $3311 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u64");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3303));
                                        var self = Fm$Parser$stop$($3287, $3309, $3310);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3313 = self.idx;
                                                var $3314 = self.code;
                                                var $3315 = self.err;
                                                var $3316 = Parser$Reply$error$($3313, $3314, $3315);
                                                var $3312 = $3316;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3317 = self.idx;
                                                var $3318 = self.code;
                                                var $3319 = self.val;
                                                var $3320 = Parser$Reply$value$($3317, $3318, Fm$Term$ori$($3319, _term$16));
                                                var $3312 = $3320;
                                                break;
                                        };
                                        var $3304 = $3312;
                                        break;
                                };
                                var $3296 = $3304;
                                break;
                        };
                        var $3288 = $3296;
                        break;
                };
                var $3280 = $3288;
                break;
        };
        return $3280;
    };
    const Fm$Parser$u64 = x0 => x1 => Fm$Parser$u64$(x0, x1);

    function Fm$Parser$nat$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3322 = self.idx;
                var $3323 = self.code;
                var $3324 = self.err;
                var $3325 = Parser$Reply$error$($3322, $3323, $3324);
                var $3321 = $3325;
                break;
            case 'Parser.Reply.value':
                var $3326 = self.idx;
                var $3327 = self.code;
                var $3328 = self.val;
                var self = Fm$Parser$spaces($3326)($3327);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3330 = self.idx;
                        var $3331 = self.code;
                        var $3332 = self.err;
                        var $3333 = Parser$Reply$error$($3330, $3331, $3332);
                        var $3329 = $3333;
                        break;
                    case 'Parser.Reply.value':
                        var $3334 = self.idx;
                        var $3335 = self.code;
                        var $3336 = self.val;
                        var self = Parser$nat$($3334, $3335);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3338 = self.idx;
                                var $3339 = self.code;
                                var $3340 = self.err;
                                var $3341 = Parser$Reply$error$($3338, $3339, $3340);
                                var $3337 = $3341;
                                break;
                            case 'Parser.Reply.value':
                                var $3342 = self.idx;
                                var $3343 = self.code;
                                var $3344 = self.val;
                                var self = Fm$Parser$stop$($3328, $3342, $3343);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3346 = self.idx;
                                        var $3347 = self.code;
                                        var $3348 = self.err;
                                        var $3349 = Parser$Reply$error$($3346, $3347, $3348);
                                        var $3345 = $3349;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3350 = self.idx;
                                        var $3351 = self.code;
                                        var $3352 = self.val;
                                        var $3353 = Parser$Reply$value$($3350, $3351, Fm$Term$ori$($3352, Fm$Term$nat$($3344)));
                                        var $3345 = $3353;
                                        break;
                                };
                                var $3337 = $3345;
                                break;
                        };
                        var $3329 = $3337;
                        break;
                };
                var $3321 = $3329;
                break;
        };
        return $3321;
    };
    const Fm$Parser$nat = x0 => x1 => Fm$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3354 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3354;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Fm$Parser$reference$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3356 = self.idx;
                var $3357 = self.code;
                var $3358 = self.err;
                var $3359 = Parser$Reply$error$($3356, $3357, $3358);
                var $3355 = $3359;
                break;
            case 'Parser.Reply.value':
                var $3360 = self.idx;
                var $3361 = self.code;
                var $3362 = self.val;
                var self = Fm$Parser$name1$($3360, $3361);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3364 = self.idx;
                        var $3365 = self.code;
                        var $3366 = self.err;
                        var $3367 = Parser$Reply$error$($3364, $3365, $3366);
                        var $3363 = $3367;
                        break;
                    case 'Parser.Reply.value':
                        var $3368 = self.idx;
                        var $3369 = self.code;
                        var $3370 = self.val;
                        var self = ($3370 === "case");
                        if (self) {
                            var $3372 = Parser$fail("Reserved keyword.");
                            var $3371 = $3372;
                        } else {
                            var self = ($3370 === "do");
                            if (self) {
                                var $3374 = Parser$fail("Reserved keyword.");
                                var $3373 = $3374;
                            } else {
                                var self = ($3370 === "if");
                                if (self) {
                                    var $3376 = Parser$fail("Reserved keyword.");
                                    var $3375 = $3376;
                                } else {
                                    var self = ($3370 === "let");
                                    if (self) {
                                        var $3378 = Parser$fail("Reserved keyword.");
                                        var $3377 = $3378;
                                    } else {
                                        var self = ($3370 === "def");
                                        if (self) {
                                            var $3380 = Parser$fail("Reserved keyword.");
                                            var $3379 = $3380;
                                        } else {
                                            var self = ($3370 === "true");
                                            if (self) {
                                                var $3382 = (_idx$9 => _code$10 => {
                                                    var $3383 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.true"));
                                                    return $3383;
                                                });
                                                var $3381 = $3382;
                                            } else {
                                                var self = ($3370 === "false");
                                                if (self) {
                                                    var $3385 = (_idx$9 => _code$10 => {
                                                        var $3386 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.false"));
                                                        return $3386;
                                                    });
                                                    var $3384 = $3385;
                                                } else {
                                                    var self = ($3370 === "unit");
                                                    if (self) {
                                                        var $3388 = (_idx$9 => _code$10 => {
                                                            var $3389 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Unit.new"));
                                                            return $3389;
                                                        });
                                                        var $3387 = $3388;
                                                    } else {
                                                        var self = ($3370 === "none");
                                                        if (self) {
                                                            var _term$9 = Fm$Term$ref$("Maybe.none");
                                                            var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                            var $3391 = (_idx$11 => _code$12 => {
                                                                var $3392 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                return $3392;
                                                            });
                                                            var $3390 = $3391;
                                                        } else {
                                                            var self = ($3370 === "refl");
                                                            if (self) {
                                                                var _term$9 = Fm$Term$ref$("Equal.refl");
                                                                var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                var _term$11 = Fm$Term$app$(_term$10, Fm$Term$hol$(Bits$e));
                                                                var $3394 = (_idx$12 => _code$13 => {
                                                                    var $3395 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                    return $3395;
                                                                });
                                                                var $3393 = $3394;
                                                            } else {
                                                                var $3396 = (_idx$9 => _code$10 => {
                                                                    var self = Fm$Parser$stop$($3362, _idx$9, _code$10);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3398 = self.idx;
                                                                            var $3399 = self.code;
                                                                            var $3400 = self.err;
                                                                            var $3401 = Parser$Reply$error$($3398, $3399, $3400);
                                                                            var $3397 = $3401;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3402 = self.idx;
                                                                            var $3403 = self.code;
                                                                            var $3404 = self.val;
                                                                            var $3405 = Parser$Reply$value$($3402, $3403, Fm$Term$ori$($3404, Fm$Term$ref$($3370)));
                                                                            var $3397 = $3405;
                                                                            break;
                                                                    };
                                                                    return $3397;
                                                                });
                                                                var $3393 = $3396;
                                                            };
                                                            var $3390 = $3393;
                                                        };
                                                        var $3387 = $3390;
                                                    };
                                                    var $3384 = $3387;
                                                };
                                                var $3381 = $3384;
                                            };
                                            var $3379 = $3381;
                                        };
                                        var $3377 = $3379;
                                    };
                                    var $3375 = $3377;
                                };
                                var $3373 = $3375;
                            };
                            var $3371 = $3373;
                        };
                        var $3371 = $3371($3368)($3369);
                        var $3363 = $3371;
                        break;
                };
                var $3355 = $3363;
                break;
        };
        return $3355;
    };
    const Fm$Parser$reference = x0 => x1 => Fm$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Fm$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3407 = self.idx;
                var $3408 = self.code;
                var $3409 = self.err;
                var $3410 = Parser$Reply$error$($3407, $3408, $3409);
                var $3406 = $3410;
                break;
            case 'Parser.Reply.value':
                var $3411 = self.idx;
                var $3412 = self.code;
                var $3413 = self.val;
                var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term), $3411, $3412);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3415 = self.idx;
                        var $3416 = self.code;
                        var $3417 = self.err;
                        var $3418 = Parser$Reply$error$($3415, $3416, $3417);
                        var $3414 = $3418;
                        break;
                    case 'Parser.Reply.value':
                        var $3419 = self.idx;
                        var $3420 = self.code;
                        var $3421 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3419, $3420);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3423 = self.idx;
                                var $3424 = self.code;
                                var $3425 = self.err;
                                var $3426 = Parser$Reply$error$($3423, $3424, $3425);
                                var $3422 = $3426;
                                break;
                            case 'Parser.Reply.value':
                                var $3427 = self.idx;
                                var $3428 = self.code;
                                var $3429 = self.val;
                                var _expr$14 = (() => {
                                    var $3432 = _func$2;
                                    var $3433 = $3421;
                                    let _f$15 = $3432;
                                    let _x$14;
                                    while ($3433._ === 'List.cons') {
                                        _x$14 = $3433.head;
                                        var $3432 = Fm$Term$app$(_f$15, _x$14);
                                        _f$15 = $3432;
                                        $3433 = $3433.tail;
                                    }
                                    return _f$15;
                                })();
                                var $3430 = Parser$Reply$value$($3427, $3428, Fm$Term$ori$($3429, _expr$14));
                                var $3422 = $3430;
                                break;
                        };
                        var $3414 = $3422;
                        break;
                };
                var $3406 = $3414;
                break;
        };
        return $3406;
    };
    const Fm$Parser$application = x0 => x1 => x2 => x3 => Fm$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3435 = self.idx;
                var $3436 = self.code;
                var $3437 = self.err;
                var $3438 = Parser$Reply$error$($3435, $3436, $3437);
                var $3434 = $3438;
                break;
            case 'Parser.Reply.value':
                var $3439 = self.idx;
                var $3440 = self.code;
                var $3441 = self.val;
                var $3442 = Parser$text$(_text$1, $3439, $3440);
                var $3434 = $3442;
                break;
        };
        return $3434;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Fm$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3444 = self.idx;
                var $3445 = self.code;
                var $3446 = self.err;
                var $3447 = Parser$Reply$error$($3444, $3445, $3446);
                var $3443 = $3447;
                break;
            case 'Parser.Reply.value':
                var $3448 = self.idx;
                var $3449 = self.code;
                var $3450 = self.val;
                var self = Parser$text$("<", $3448, $3449);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3452 = self.idx;
                        var $3453 = self.code;
                        var $3454 = self.err;
                        var $3455 = Parser$Reply$error$($3452, $3453, $3454);
                        var $3451 = $3455;
                        break;
                    case 'Parser.Reply.value':
                        var $3456 = self.idx;
                        var $3457 = self.code;
                        var $3458 = self.val;
                        var self = Parser$until1$(Parser$spaces_text(">"), Fm$Parser$item(Fm$Parser$term), $3456, $3457);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3460 = self.idx;
                                var $3461 = self.code;
                                var $3462 = self.err;
                                var $3463 = Parser$Reply$error$($3460, $3461, $3462);
                                var $3459 = $3463;
                                break;
                            case 'Parser.Reply.value':
                                var $3464 = self.idx;
                                var $3465 = self.code;
                                var $3466 = self.val;
                                var self = Fm$Parser$stop$($3450, $3464, $3465);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3468 = self.idx;
                                        var $3469 = self.code;
                                        var $3470 = self.err;
                                        var $3471 = Parser$Reply$error$($3468, $3469, $3470);
                                        var $3467 = $3471;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3472 = self.idx;
                                        var $3473 = self.code;
                                        var $3474 = self.val;
                                        var _expr$17 = (() => {
                                            var $3477 = _func$2;
                                            var $3478 = $3466;
                                            let _f$18 = $3477;
                                            let _x$17;
                                            while ($3478._ === 'List.cons') {
                                                _x$17 = $3478.head;
                                                var $3477 = Fm$Term$app$(_f$18, _x$17);
                                                _f$18 = $3477;
                                                $3478 = $3478.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $3475 = Parser$Reply$value$($3472, $3473, Fm$Term$ori$($3474, _expr$17));
                                        var $3467 = $3475;
                                        break;
                                };
                                var $3459 = $3467;
                                break;
                        };
                        var $3451 = $3459;
                        break;
                };
                var $3443 = $3451;
                break;
        };
        return $3443;
    };
    const Fm$Parser$application$erased = x0 => x1 => x2 => x3 => Fm$Parser$application$erased$(x0, x1, x2, x3);

    function Fm$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3480 = self.idx;
                var $3481 = self.code;
                var $3482 = self.err;
                var $3483 = Parser$Reply$error$($3480, $3481, $3482);
                var $3479 = $3483;
                break;
            case 'Parser.Reply.value':
                var $3484 = self.idx;
                var $3485 = self.code;
                var $3486 = self.val;
                var self = Fm$Parser$stop$(_init$1, $3484, $3485);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3488 = self.idx;
                        var $3489 = self.code;
                        var $3490 = self.err;
                        var $3491 = Parser$Reply$error$($3488, $3489, $3490);
                        var $3487 = $3491;
                        break;
                    case 'Parser.Reply.value':
                        var $3492 = self.idx;
                        var $3493 = self.code;
                        var $3494 = self.val;
                        var $3495 = Parser$Reply$value$($3492, $3493, Fm$Term$ori$($3494, Fm$Term$app$(_term$2, Fm$Term$hol$(Bits$e))));
                        var $3487 = $3495;
                        break;
                };
                var $3479 = $3487;
                break;
        };
        return $3479;
    };
    const Fm$Parser$application$hole = x0 => x1 => x2 => x3 => Fm$Parser$application$hole$(x0, x1, x2, x3);

    function Fm$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3497 = self.idx;
                var $3498 = self.code;
                var $3499 = self.err;
                var $3500 = Parser$Reply$error$($3497, $3498, $3499);
                var $3496 = $3500;
                break;
            case 'Parser.Reply.value':
                var $3501 = self.idx;
                var $3502 = self.code;
                var $3503 = self.val;
                var self = Fm$Parser$term$($3501, $3502);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3505 = self.idx;
                        var $3506 = self.code;
                        var $3507 = self.err;
                        var $3508 = Parser$Reply$error$($3505, $3506, $3507);
                        var $3504 = $3508;
                        break;
                    case 'Parser.Reply.value':
                        var $3509 = self.idx;
                        var $3510 = self.code;
                        var $3511 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3509, $3510);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3513 = self.idx;
                                var $3514 = self.code;
                                var $3515 = self.err;
                                var $3516 = Parser$Reply$error$($3513, $3514, $3515);
                                var $3512 = $3516;
                                break;
                            case 'Parser.Reply.value':
                                var $3517 = self.idx;
                                var $3518 = self.code;
                                var $3519 = self.val;
                                var $3520 = Parser$Reply$value$($3517, $3518, Fm$Term$ori$($3519, Fm$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $3521 = $3511;
                                    return $3521;
                                }))));
                                var $3512 = $3520;
                                break;
                        };
                        var $3504 = $3512;
                        break;
                };
                var $3496 = $3504;
                break;
        };
        return $3496;
    };
    const Fm$Parser$arrow = x0 => x1 => x2 => x3 => Fm$Parser$arrow$(x0, x1, x2, x3);

    function Fm$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Fm$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3523 = self.idx;
                var $3524 = self.code;
                var $3525 = self.err;
                var $3526 = Parser$Reply$error$($3523, $3524, $3525);
                var $3522 = $3526;
                break;
            case 'Parser.Reply.value':
                var $3527 = self.idx;
                var $3528 = self.code;
                var $3529 = self.val;
                var self = Fm$Parser$term$($3527, $3528);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3531 = self.idx;
                        var $3532 = self.code;
                        var $3533 = self.err;
                        var $3534 = Parser$Reply$error$($3531, $3532, $3533);
                        var $3530 = $3534;
                        break;
                    case 'Parser.Reply.value':
                        var $3535 = self.idx;
                        var $3536 = self.code;
                        var $3537 = self.val;
                        var self = Fm$Parser$stop$(_init$3, $3535, $3536);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3539 = self.idx;
                                var $3540 = self.code;
                                var $3541 = self.err;
                                var $3542 = Parser$Reply$error$($3539, $3540, $3541);
                                var $3538 = $3542;
                                break;
                            case 'Parser.Reply.value':
                                var $3543 = self.idx;
                                var $3544 = self.code;
                                var $3545 = self.val;
                                var _term$16 = Fm$Term$ref$(_ref$2);
                                var _term$17 = Fm$Term$app$(_term$16, _val0$4);
                                var _term$18 = Fm$Term$app$(_term$17, $3537);
                                var $3546 = Parser$Reply$value$($3543, $3544, Fm$Term$ori$($3545, _term$18));
                                var $3538 = $3546;
                                break;
                        };
                        var $3530 = $3538;
                        break;
                };
                var $3522 = $3530;
                break;
        };
        return $3522;
    };
    const Fm$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Fm$Parser$add = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$sub = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$mul = Fm$Parser$op("*")("Nat.mul");
    const Fm$Parser$div = Fm$Parser$op("/")("Nat.div");
    const Fm$Parser$mod = Fm$Parser$op("%")("Nat.mod");

    function Fm$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3548 = self.idx;
                var $3549 = self.code;
                var $3550 = self.err;
                var $3551 = Parser$Reply$error$($3548, $3549, $3550);
                var $3547 = $3551;
                break;
            case 'Parser.Reply.value':
                var $3552 = self.idx;
                var $3553 = self.code;
                var $3554 = self.val;
                var self = Fm$Parser$term$($3552, $3553);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3556 = self.idx;
                        var $3557 = self.code;
                        var $3558 = self.err;
                        var $3559 = Parser$Reply$error$($3556, $3557, $3558);
                        var $3555 = $3559;
                        break;
                    case 'Parser.Reply.value':
                        var $3560 = self.idx;
                        var $3561 = self.code;
                        var $3562 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3560, $3561);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3564 = self.idx;
                                var $3565 = self.code;
                                var $3566 = self.err;
                                var $3567 = Parser$Reply$error$($3564, $3565, $3566);
                                var $3563 = $3567;
                                break;
                            case 'Parser.Reply.value':
                                var $3568 = self.idx;
                                var $3569 = self.code;
                                var $3570 = self.val;
                                var _term$14 = Fm$Term$ref$("List.cons");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _head$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3562);
                                var self = Fm$Parser$stop$(_init$1, $3568, $3569);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3572 = self.idx;
                                        var $3573 = self.code;
                                        var $3574 = self.err;
                                        var $3575 = Parser$Reply$error$($3572, $3573, $3574);
                                        var $3571 = $3575;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3576 = self.idx;
                                        var $3577 = self.code;
                                        var $3578 = self.val;
                                        var $3579 = Parser$Reply$value$($3576, $3577, Fm$Term$ori$($3578, _term$17));
                                        var $3571 = $3579;
                                        break;
                                };
                                var $3563 = $3571;
                                break;
                        };
                        var $3555 = $3563;
                        break;
                };
                var $3547 = $3555;
                break;
        };
        return $3547;
    };
    const Fm$Parser$cons = x0 => x1 => x2 => x3 => Fm$Parser$cons$(x0, x1, x2, x3);

    function Fm$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3581 = self.idx;
                var $3582 = self.code;
                var $3583 = self.err;
                var $3584 = Parser$Reply$error$($3581, $3582, $3583);
                var $3580 = $3584;
                break;
            case 'Parser.Reply.value':
                var $3585 = self.idx;
                var $3586 = self.code;
                var $3587 = self.val;
                var self = Fm$Parser$term$($3585, $3586);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3589 = self.idx;
                        var $3590 = self.code;
                        var $3591 = self.err;
                        var $3592 = Parser$Reply$error$($3589, $3590, $3591);
                        var $3588 = $3592;
                        break;
                    case 'Parser.Reply.value':
                        var $3593 = self.idx;
                        var $3594 = self.code;
                        var $3595 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3593, $3594);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3597 = self.idx;
                                var $3598 = self.code;
                                var $3599 = self.err;
                                var $3600 = Parser$Reply$error$($3597, $3598, $3599);
                                var $3596 = $3600;
                                break;
                            case 'Parser.Reply.value':
                                var $3601 = self.idx;
                                var $3602 = self.code;
                                var $3603 = self.val;
                                var _term$14 = Fm$Term$ref$("List.concat");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3595);
                                var self = Fm$Parser$stop$(_init$1, $3601, $3602);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3605 = self.idx;
                                        var $3606 = self.code;
                                        var $3607 = self.err;
                                        var $3608 = Parser$Reply$error$($3605, $3606, $3607);
                                        var $3604 = $3608;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3609 = self.idx;
                                        var $3610 = self.code;
                                        var $3611 = self.val;
                                        var $3612 = Parser$Reply$value$($3609, $3610, Fm$Term$ori$($3611, _term$17));
                                        var $3604 = $3612;
                                        break;
                                };
                                var $3596 = $3604;
                                break;
                        };
                        var $3588 = $3596;
                        break;
                };
                var $3580 = $3588;
                break;
        };
        return $3580;
    };
    const Fm$Parser$concat = x0 => x1 => x2 => x3 => Fm$Parser$concat$(x0, x1, x2, x3);

    function Fm$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3614 = self.idx;
                var $3615 = self.code;
                var $3616 = self.err;
                var $3617 = Parser$Reply$error$($3614, $3615, $3616);
                var $3613 = $3617;
                break;
            case 'Parser.Reply.value':
                var $3618 = self.idx;
                var $3619 = self.code;
                var $3620 = self.val;
                var self = Fm$Parser$term$($3618, $3619);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3622 = self.idx;
                        var $3623 = self.code;
                        var $3624 = self.err;
                        var $3625 = Parser$Reply$error$($3622, $3623, $3624);
                        var $3621 = $3625;
                        break;
                    case 'Parser.Reply.value':
                        var $3626 = self.idx;
                        var $3627 = self.code;
                        var $3628 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3626, $3627);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3630 = self.idx;
                                var $3631 = self.code;
                                var $3632 = self.err;
                                var $3633 = Parser$Reply$error$($3630, $3631, $3632);
                                var $3629 = $3633;
                                break;
                            case 'Parser.Reply.value':
                                var $3634 = self.idx;
                                var $3635 = self.code;
                                var $3636 = self.val;
                                var _term$14 = Fm$Term$ref$("String.concat");
                                var _term$15 = Fm$Term$app$(_term$14, _str0$2);
                                var _term$16 = Fm$Term$app$(_term$15, $3628);
                                var self = Fm$Parser$stop$(_init$1, $3634, $3635);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3638 = self.idx;
                                        var $3639 = self.code;
                                        var $3640 = self.err;
                                        var $3641 = Parser$Reply$error$($3638, $3639, $3640);
                                        var $3637 = $3641;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3642 = self.idx;
                                        var $3643 = self.code;
                                        var $3644 = self.val;
                                        var $3645 = Parser$Reply$value$($3642, $3643, Fm$Term$ori$($3644, _term$16));
                                        var $3637 = $3645;
                                        break;
                                };
                                var $3629 = $3637;
                                break;
                        };
                        var $3621 = $3629;
                        break;
                };
                var $3613 = $3621;
                break;
        };
        return $3613;
    };
    const Fm$Parser$string_concat = x0 => x1 => x2 => x3 => Fm$Parser$string_concat$(x0, x1, x2, x3);

    function Fm$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3647 = self.idx;
                var $3648 = self.code;
                var $3649 = self.err;
                var $3650 = Parser$Reply$error$($3647, $3648, $3649);
                var $3646 = $3650;
                break;
            case 'Parser.Reply.value':
                var $3651 = self.idx;
                var $3652 = self.code;
                var $3653 = self.val;
                var self = Fm$Parser$term$($3651, $3652);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3655 = self.idx;
                        var $3656 = self.code;
                        var $3657 = self.err;
                        var $3658 = Parser$Reply$error$($3655, $3656, $3657);
                        var $3654 = $3658;
                        break;
                    case 'Parser.Reply.value':
                        var $3659 = self.idx;
                        var $3660 = self.code;
                        var $3661 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3659, $3660);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3663 = self.idx;
                                var $3664 = self.code;
                                var $3665 = self.err;
                                var $3666 = Parser$Reply$error$($3663, $3664, $3665);
                                var $3662 = $3666;
                                break;
                            case 'Parser.Reply.value':
                                var $3667 = self.idx;
                                var $3668 = self.code;
                                var $3669 = self.val;
                                var _term$14 = Fm$Term$ref$("Sigma.new");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                var _term$17 = Fm$Term$app$(_term$16, _val0$2);
                                var _term$18 = Fm$Term$app$(_term$17, $3661);
                                var $3670 = Parser$Reply$value$($3667, $3668, Fm$Term$ori$($3669, _term$18));
                                var $3662 = $3670;
                                break;
                        };
                        var $3654 = $3662;
                        break;
                };
                var $3646 = $3654;
                break;
        };
        return $3646;
    };
    const Fm$Parser$sigma = x0 => x1 => x2 => x3 => Fm$Parser$sigma$(x0, x1, x2, x3);

    function Fm$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3672 = self.idx;
                var $3673 = self.code;
                var $3674 = self.err;
                var $3675 = Parser$Reply$error$($3672, $3673, $3674);
                var $3671 = $3675;
                break;
            case 'Parser.Reply.value':
                var $3676 = self.idx;
                var $3677 = self.code;
                var $3678 = self.val;
                var self = Fm$Parser$term$($3676, $3677);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3680 = self.idx;
                        var $3681 = self.code;
                        var $3682 = self.err;
                        var $3683 = Parser$Reply$error$($3680, $3681, $3682);
                        var $3679 = $3683;
                        break;
                    case 'Parser.Reply.value':
                        var $3684 = self.idx;
                        var $3685 = self.code;
                        var $3686 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3684, $3685);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3688 = self.idx;
                                var $3689 = self.code;
                                var $3690 = self.err;
                                var $3691 = Parser$Reply$error$($3688, $3689, $3690);
                                var $3687 = $3691;
                                break;
                            case 'Parser.Reply.value':
                                var $3692 = self.idx;
                                var $3693 = self.code;
                                var $3694 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3686);
                                var $3695 = Parser$Reply$value$($3692, $3693, Fm$Term$ori$($3694, _term$17));
                                var $3687 = $3695;
                                break;
                        };
                        var $3679 = $3687;
                        break;
                };
                var $3671 = $3679;
                break;
        };
        return $3671;
    };
    const Fm$Parser$equality = x0 => x1 => x2 => x3 => Fm$Parser$equality$(x0, x1, x2, x3);

    function Fm$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3697 = self.idx;
                var $3698 = self.code;
                var $3699 = self.err;
                var $3700 = Parser$Reply$error$($3697, $3698, $3699);
                var $3696 = $3700;
                break;
            case 'Parser.Reply.value':
                var $3701 = self.idx;
                var $3702 = self.code;
                var $3703 = self.val;
                var self = Fm$Parser$term$($3701, $3702);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3705 = self.idx;
                        var $3706 = self.code;
                        var $3707 = self.err;
                        var $3708 = Parser$Reply$error$($3705, $3706, $3707);
                        var $3704 = $3708;
                        break;
                    case 'Parser.Reply.value':
                        var $3709 = self.idx;
                        var $3710 = self.code;
                        var $3711 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3709, $3710);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3713 = self.idx;
                                var $3714 = self.code;
                                var $3715 = self.err;
                                var $3716 = Parser$Reply$error$($3713, $3714, $3715);
                                var $3712 = $3716;
                                break;
                            case 'Parser.Reply.value':
                                var $3717 = self.idx;
                                var $3718 = self.code;
                                var $3719 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3711);
                                var _term$18 = Fm$Term$app$(Fm$Term$ref$("Not"), _term$17);
                                var $3720 = Parser$Reply$value$($3717, $3718, Fm$Term$ori$($3719, _term$18));
                                var $3712 = $3720;
                                break;
                        };
                        var $3704 = $3712;
                        break;
                };
                var $3696 = $3704;
                break;
        };
        return $3696;
    };
    const Fm$Parser$inequality = x0 => x1 => x2 => x3 => Fm$Parser$inequality$(x0, x1, x2, x3);

    function Fm$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3722 = self.idx;
                var $3723 = self.code;
                var $3724 = self.err;
                var $3725 = Parser$Reply$error$($3722, $3723, $3724);
                var $3721 = $3725;
                break;
            case 'Parser.Reply.value':
                var $3726 = self.idx;
                var $3727 = self.code;
                var $3728 = self.val;
                var self = Fm$Parser$text$("rewrite", $3726, $3727);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3730 = self.idx;
                        var $3731 = self.code;
                        var $3732 = self.err;
                        var $3733 = Parser$Reply$error$($3730, $3731, $3732);
                        var $3729 = $3733;
                        break;
                    case 'Parser.Reply.value':
                        var $3734 = self.idx;
                        var $3735 = self.code;
                        var $3736 = self.val;
                        var self = Fm$Parser$name1$($3734, $3735);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3738 = self.idx;
                                var $3739 = self.code;
                                var $3740 = self.err;
                                var $3741 = Parser$Reply$error$($3738, $3739, $3740);
                                var $3737 = $3741;
                                break;
                            case 'Parser.Reply.value':
                                var $3742 = self.idx;
                                var $3743 = self.code;
                                var $3744 = self.val;
                                var self = Fm$Parser$text$("in", $3742, $3743);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3746 = self.idx;
                                        var $3747 = self.code;
                                        var $3748 = self.err;
                                        var $3749 = Parser$Reply$error$($3746, $3747, $3748);
                                        var $3745 = $3749;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3750 = self.idx;
                                        var $3751 = self.code;
                                        var $3752 = self.val;
                                        var self = Fm$Parser$term$($3750, $3751);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3754 = self.idx;
                                                var $3755 = self.code;
                                                var $3756 = self.err;
                                                var $3757 = Parser$Reply$error$($3754, $3755, $3756);
                                                var $3753 = $3757;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3758 = self.idx;
                                                var $3759 = self.code;
                                                var $3760 = self.val;
                                                var self = Fm$Parser$text$("with", $3758, $3759);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3762 = self.idx;
                                                        var $3763 = self.code;
                                                        var $3764 = self.err;
                                                        var $3765 = Parser$Reply$error$($3762, $3763, $3764);
                                                        var $3761 = $3765;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3766 = self.idx;
                                                        var $3767 = self.code;
                                                        var $3768 = self.val;
                                                        var self = Fm$Parser$term$($3766, $3767);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3770 = self.idx;
                                                                var $3771 = self.code;
                                                                var $3772 = self.err;
                                                                var $3773 = Parser$Reply$error$($3770, $3771, $3772);
                                                                var $3769 = $3773;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3774 = self.idx;
                                                                var $3775 = self.code;
                                                                var $3776 = self.val;
                                                                var self = Fm$Parser$stop$(_init$1, $3774, $3775);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3778 = self.idx;
                                                                        var $3779 = self.code;
                                                                        var $3780 = self.err;
                                                                        var $3781 = Parser$Reply$error$($3778, $3779, $3780);
                                                                        var $3777 = $3781;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3782 = self.idx;
                                                                        var $3783 = self.code;
                                                                        var $3784 = self.val;
                                                                        var _term$29 = Fm$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                        var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                        var _term$32 = Fm$Term$app$(_term$31, Fm$Term$hol$(Bits$e));
                                                                        var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($3744, (_x$33 => {
                                                                            var $3786 = $3760;
                                                                            return $3786;
                                                                        })));
                                                                        var _term$34 = Fm$Term$app$(_term$33, $3776);
                                                                        var _term$35 = Fm$Term$app$(_term$34, _subt$2);
                                                                        var $3785 = Parser$Reply$value$($3782, $3783, Fm$Term$ori$($3784, _term$35));
                                                                        var $3777 = $3785;
                                                                        break;
                                                                };
                                                                var $3769 = $3777;
                                                                break;
                                                        };
                                                        var $3761 = $3769;
                                                        break;
                                                };
                                                var $3753 = $3761;
                                                break;
                                        };
                                        var $3745 = $3753;
                                        break;
                                };
                                var $3737 = $3745;
                                break;
                        };
                        var $3729 = $3737;
                        break;
                };
                var $3721 = $3729;
                break;
        };
        return $3721;
    };
    const Fm$Parser$rewrite = x0 => x1 => x2 => x3 => Fm$Parser$rewrite$(x0, x1, x2, x3);

    function Fm$Term$ann$(_done$1, _term$2, _type$3) {
        var $3787 = ({
            _: 'Fm.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3787;
    };
    const Fm$Term$ann = x0 => x1 => x2 => Fm$Term$ann$(x0, x1, x2);

    function Fm$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3789 = self.idx;
                var $3790 = self.code;
                var $3791 = self.err;
                var $3792 = Parser$Reply$error$($3789, $3790, $3791);
                var $3788 = $3792;
                break;
            case 'Parser.Reply.value':
                var $3793 = self.idx;
                var $3794 = self.code;
                var $3795 = self.val;
                var self = Fm$Parser$term$($3793, $3794);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3797 = self.idx;
                        var $3798 = self.code;
                        var $3799 = self.err;
                        var $3800 = Parser$Reply$error$($3797, $3798, $3799);
                        var $3796 = $3800;
                        break;
                    case 'Parser.Reply.value':
                        var $3801 = self.idx;
                        var $3802 = self.code;
                        var $3803 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3801, $3802);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3805 = self.idx;
                                var $3806 = self.code;
                                var $3807 = self.err;
                                var $3808 = Parser$Reply$error$($3805, $3806, $3807);
                                var $3804 = $3808;
                                break;
                            case 'Parser.Reply.value':
                                var $3809 = self.idx;
                                var $3810 = self.code;
                                var $3811 = self.val;
                                var $3812 = Parser$Reply$value$($3809, $3810, Fm$Term$ori$($3811, Fm$Term$ann$(Bool$false, _term$2, $3803)));
                                var $3804 = $3812;
                                break;
                        };
                        var $3796 = $3804;
                        break;
                };
                var $3788 = $3796;
                break;
        };
        return $3788;
    };
    const Fm$Parser$annotation = x0 => x1 => x2 => x3 => Fm$Parser$annotation$(x0, x1, x2, x3);

    function Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Fm$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Fm$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Fm$Parser$application(_init$1)(_term$2), List$cons$(Fm$Parser$application$erased(_init$1)(_term$2), List$cons$(Fm$Parser$application$hole(_init$1)(_term$2), List$cons$(Fm$Parser$arrow(_init$1)(_term$2), List$cons$(Fm$Parser$add(_init$1)(_term$2), List$cons$(Fm$Parser$sub(_init$1)(_term$2), List$cons$(Fm$Parser$mul(_init$1)(_term$2), List$cons$(Fm$Parser$div(_init$1)(_term$2), List$cons$(Fm$Parser$mod(_init$1)(_term$2), List$cons$(Fm$Parser$cons(_init$1)(_term$2), List$cons$(Fm$Parser$concat(_init$1)(_term$2), List$cons$(Fm$Parser$string_concat(_init$1)(_term$2), List$cons$(Fm$Parser$sigma(_init$1)(_term$2), List$cons$(Fm$Parser$equality(_init$1)(_term$2), List$cons$(Fm$Parser$inequality(_init$1)(_term$2), List$cons$(Fm$Parser$rewrite(_init$1)(_term$2), List$cons$(Fm$Parser$annotation(_init$1)(_term$2), List$nil))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3814 = self.idx;
                        var $3815 = self.code;
                        var $3816 = self.err;
                        var $3817 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $3813 = $3817;
                        break;
                    case 'Parser.Reply.value':
                        var $3818 = self.idx;
                        var $3819 = self.code;
                        var $3820 = self.val;
                        var $3821 = Fm$Parser$suffix$(_init$1, $3820, $3818, $3819);
                        var $3813 = $3821;
                        break;
                };
                return $3813;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$suffix = x0 => x1 => x2 => x3 => Fm$Parser$suffix$(x0, x1, x2, x3);

    function Fm$Parser$term$(_idx$1, _code$2) {
        var self = Parser$get_code$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3823 = self.idx;
                var $3824 = self.code;
                var $3825 = self.err;
                var $3826 = Parser$Reply$error$($3823, $3824, $3825);
                var $3822 = $3826;
                break;
            case 'Parser.Reply.value':
                var $3827 = self.idx;
                var $3828 = self.code;
                var $3829 = self.val;
                var self = Fm$Parser$init$($3827, $3828);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3831 = self.idx;
                        var $3832 = self.code;
                        var $3833 = self.err;
                        var $3834 = Parser$Reply$error$($3831, $3832, $3833);
                        var $3830 = $3834;
                        break;
                    case 'Parser.Reply.value':
                        var $3835 = self.idx;
                        var $3836 = self.code;
                        var $3837 = self.val;
                        var self = Parser$first_of$(List$cons$(Fm$Parser$type, List$cons$(Fm$Parser$forall, List$cons$(Fm$Parser$lambda, List$cons$(Fm$Parser$lambda$erased, List$cons$(Fm$Parser$lambda$nameless, List$cons$(Fm$Parser$parenthesis, List$cons$(Fm$Parser$letforrange$u32, List$cons$(Fm$Parser$letforin, List$cons$(Fm$Parser$let, List$cons$(Fm$Parser$get, List$cons$(Fm$Parser$def, List$cons$(Fm$Parser$if, List$cons$(Fm$Parser$char, List$cons$(Fm$Parser$string, List$cons$(Fm$Parser$pair, List$cons$(Fm$Parser$sigma$type, List$cons$(Fm$Parser$some, List$cons$(Fm$Parser$apply, List$cons$(Fm$Parser$list, List$cons$(Fm$Parser$log, List$cons$(Fm$Parser$forrange$u32, List$cons$(Fm$Parser$forrange$u32$2, List$cons$(Fm$Parser$forin, List$cons$(Fm$Parser$forin$2, List$cons$(Fm$Parser$do, List$cons$(Fm$Parser$case, List$cons$(Fm$Parser$open, List$cons$(Fm$Parser$goal, List$cons$(Fm$Parser$hole, List$cons$(Fm$Parser$u8, List$cons$(Fm$Parser$u16, List$cons$(Fm$Parser$u32, List$cons$(Fm$Parser$u64, List$cons$(Fm$Parser$nat, List$cons$(Fm$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))($3835)($3836);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3839 = self.idx;
                                var $3840 = self.code;
                                var $3841 = self.err;
                                var $3842 = Parser$Reply$error$($3839, $3840, $3841);
                                var $3838 = $3842;
                                break;
                            case 'Parser.Reply.value':
                                var $3843 = self.idx;
                                var $3844 = self.code;
                                var $3845 = self.val;
                                var $3846 = Fm$Parser$suffix$($3837, $3845, $3843, $3844);
                                var $3838 = $3846;
                                break;
                        };
                        var $3830 = $3838;
                        break;
                };
                var $3822 = $3830;
                break;
        };
        return $3822;
    };
    const Fm$Parser$term = x0 => x1 => Fm$Parser$term$(x0, x1);

    function Fm$Parser$name_term$(_idx$1, _code$2) {
        var self = Fm$Parser$name$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3848 = self.idx;
                var $3849 = self.code;
                var $3850 = self.err;
                var $3851 = Parser$Reply$error$($3848, $3849, $3850);
                var $3847 = $3851;
                break;
            case 'Parser.Reply.value':
                var $3852 = self.idx;
                var $3853 = self.code;
                var $3854 = self.val;
                var self = Fm$Parser$text$(":", $3852, $3853);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3856 = self.idx;
                        var $3857 = self.code;
                        var $3858 = self.err;
                        var $3859 = Parser$Reply$error$($3856, $3857, $3858);
                        var $3855 = $3859;
                        break;
                    case 'Parser.Reply.value':
                        var $3860 = self.idx;
                        var $3861 = self.code;
                        var $3862 = self.val;
                        var self = Fm$Parser$term$($3860, $3861);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3864 = self.idx;
                                var $3865 = self.code;
                                var $3866 = self.err;
                                var $3867 = Parser$Reply$error$($3864, $3865, $3866);
                                var $3863 = $3867;
                                break;
                            case 'Parser.Reply.value':
                                var $3868 = self.idx;
                                var $3869 = self.code;
                                var $3870 = self.val;
                                var $3871 = Parser$Reply$value$($3868, $3869, Pair$new$($3854, $3870));
                                var $3863 = $3871;
                                break;
                        };
                        var $3855 = $3863;
                        break;
                };
                var $3847 = $3855;
                break;
        };
        return $3847;
    };
    const Fm$Parser$name_term = x0 => x1 => Fm$Parser$name_term$(x0, x1);

    function Fm$Binder$new$(_eras$1, _name$2, _term$3) {
        var $3872 = ({
            _: 'Fm.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $3872;
    };
    const Fm$Binder$new = x0 => x1 => x2 => Fm$Binder$new$(x0, x1, x2);

    function Fm$Parser$binder$homo$(_eras$1, _idx$2, _code$3) {
        var self = Fm$Parser$text$((() => {
            var self = _eras$1;
            if (self) {
                var $3874 = "<";
                return $3874;
            } else {
                var $3875 = "(";
                return $3875;
            };
        })(), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3876 = self.idx;
                var $3877 = self.code;
                var $3878 = self.err;
                var $3879 = Parser$Reply$error$($3876, $3877, $3878);
                var $3873 = $3879;
                break;
            case 'Parser.Reply.value':
                var $3880 = self.idx;
                var $3881 = self.code;
                var $3882 = self.val;
                var self = Parser$until1$(Fm$Parser$text((() => {
                    var self = _eras$1;
                    if (self) {
                        var $3884 = ">";
                        return $3884;
                    } else {
                        var $3885 = ")";
                        return $3885;
                    };
                })()), Fm$Parser$item(Fm$Parser$name_term), $3880, $3881);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3886 = self.idx;
                        var $3887 = self.code;
                        var $3888 = self.err;
                        var $3889 = Parser$Reply$error$($3886, $3887, $3888);
                        var $3883 = $3889;
                        break;
                    case 'Parser.Reply.value':
                        var $3890 = self.idx;
                        var $3891 = self.code;
                        var $3892 = self.val;
                        var $3893 = Parser$Reply$value$($3890, $3891, List$mapped$($3892, (_pair$10 => {
                            var self = _pair$10;
                            switch (self._) {
                                case 'Pair.new':
                                    var $3895 = self.fst;
                                    var $3896 = self.snd;
                                    var $3897 = Fm$Binder$new$(_eras$1, $3895, $3896);
                                    var $3894 = $3897;
                                    break;
                            };
                            return $3894;
                        })));
                        var $3883 = $3893;
                        break;
                };
                var $3873 = $3883;
                break;
        };
        return $3873;
    };
    const Fm$Parser$binder$homo = x0 => x1 => x2 => Fm$Parser$binder$homo$(x0, x1, x2);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $3899 = _bs$3;
                var $3898 = $3899;
                break;
            case 'List.cons':
                var $3900 = self.head;
                var $3901 = self.tail;
                var $3902 = List$cons$($3900, List$concat$($3901, _bs$3));
                var $3898 = $3902;
                break;
        };
        return $3898;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $3904 = List$nil;
                var $3903 = $3904;
                break;
            case 'List.cons':
                var $3905 = self.head;
                var $3906 = self.tail;
                var $3907 = List$concat$($3905, List$flatten$($3906));
                var $3903 = $3907;
                break;
        };
        return $3903;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Fm$Parser$binder$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Fm$Parser$binder$homo(Bool$true), List$cons$(Fm$Parser$binder$homo(Bool$false), List$nil))), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3909 = self.idx;
                var $3910 = self.code;
                var $3911 = self.err;
                var $3912 = Parser$Reply$error$($3909, $3910, $3911);
                var $3908 = $3912;
                break;
            case 'Parser.Reply.value':
                var $3913 = self.idx;
                var $3914 = self.code;
                var $3915 = self.val;
                var $3916 = Parser$Reply$value$($3913, $3914, List$flatten$($3915));
                var $3908 = $3916;
                break;
        };
        return $3908;
    };
    const Fm$Parser$binder = x0 => x1 => Fm$Parser$binder$(x0, x1);

    function Fm$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.nil':
                var $3918 = _body$2;
                var $3917 = $3918;
                break;
            case 'List.cons':
                var $3919 = self.head;
                var $3920 = self.tail;
                var self = $3919;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $3922 = self.eras;
                        var $3923 = self.name;
                        var $3924 = self.term;
                        var $3925 = Fm$Term$all$($3922, "", $3923, $3924, (_s$8 => _x$9 => {
                            var $3926 = Fm$Parser$make_forall$($3920, _body$2);
                            return $3926;
                        }));
                        var $3921 = $3925;
                        break;
                };
                var $3917 = $3921;
                break;
        };
        return $3917;
    };
    const Fm$Parser$make_forall = x0 => x1 => Fm$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.nil':
                        var $3927 = Maybe$none;
                        return $3927;
                    case 'List.cons':
                        var $3928 = self.head;
                        var $3929 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $3931 = Maybe$some$($3928);
                            var $3930 = $3931;
                        } else {
                            var $3932 = (self - 1n);
                            var $3933 = List$at$($3932, $3929);
                            var $3930 = $3933;
                        };
                        return $3930;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $3934 = List$at$(_index$2, List$reverse$(_list$3));
        return $3934;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Fm$Term$var$(_name$1, _indx$2) {
        var $3935 = ({
            _: 'Fm.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $3935;
    };
    const Fm$Term$var = x0 => x1 => Fm$Term$var$(x0, x1);

    function Fm$Name$eql$(_a$1, _b$2) {
        var $3936 = (_a$1 === _b$2);
        return $3936;
    };
    const Fm$Name$eql = x0 => x1 => Fm$Name$eql$(x0, x1);

    function Fm$Context$find$(_name$1, _ctx$2) {
        var Fm$Context$find$ = (_name$1, _ctx$2) => ({
            ctr: 'TCO',
            arg: [_name$1, _ctx$2]
        });
        var Fm$Context$find = _name$1 => _ctx$2 => Fm$Context$find$(_name$1, _ctx$2);
        var arg = [_name$1, _ctx$2];
        while (true) {
            let [_name$1, _ctx$2] = arg;
            var R = (() => {
                var self = _ctx$2;
                switch (self._) {
                    case 'List.nil':
                        var $3937 = Maybe$none;
                        return $3937;
                    case 'List.cons':
                        var $3938 = self.head;
                        var $3939 = self.tail;
                        var self = $3938;
                        switch (self._) {
                            case 'Pair.new':
                                var $3941 = self.fst;
                                var $3942 = self.snd;
                                var self = Fm$Name$eql$(_name$1, $3941);
                                if (self) {
                                    var $3944 = Maybe$some$($3942);
                                    var $3943 = $3944;
                                } else {
                                    var $3945 = Fm$Context$find$(_name$1, $3939);
                                    var $3943 = $3945;
                                };
                                var $3940 = $3943;
                                break;
                        };
                        return $3940;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Context$find = x0 => x1 => Fm$Context$find$(x0, x1);
    const List$length = a0 => (list_length(a0));

    function Fm$Path$o$(_path$1, _x$2) {
        var $3946 = _path$1((_x$2 + '0'));
        return $3946;
    };
    const Fm$Path$o = x0 => x1 => Fm$Path$o$(x0, x1);

    function Fm$Path$i$(_path$1, _x$2) {
        var $3947 = _path$1((_x$2 + '1'));
        return $3947;
    };
    const Fm$Path$i = x0 => x1 => Fm$Path$i$(x0, x1);

    function Fm$Path$to_bits$(_path$1) {
        var $3948 = _path$1(Bits$e);
        return $3948;
    };
    const Fm$Path$to_bits = x0 => Fm$Path$to_bits$(x0);

    function Fm$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Fm.Term.var':
                var $3950 = self.name;
                var $3951 = self.indx;
                var self = List$at_last$($3951, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $3953 = Fm$Term$var$($3950, $3951);
                        var $3952 = $3953;
                        break;
                    case 'Maybe.some':
                        var $3954 = self.value;
                        var $3955 = Pair$snd$($3954);
                        var $3952 = $3955;
                        break;
                };
                var $3949 = $3952;
                break;
            case 'Fm.Term.ref':
                var $3956 = self.name;
                var self = Fm$Context$find$($3956, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $3958 = Fm$Term$ref$($3956);
                        var $3957 = $3958;
                        break;
                    case 'Maybe.some':
                        var $3959 = self.value;
                        var $3960 = $3959;
                        var $3957 = $3960;
                        break;
                };
                var $3949 = $3957;
                break;
            case 'Fm.Term.typ':
                var $3961 = Fm$Term$typ;
                var $3949 = $3961;
                break;
            case 'Fm.Term.all':
                var $3962 = self.eras;
                var $3963 = self.self;
                var $3964 = self.name;
                var $3965 = self.xtyp;
                var $3966 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $3967 = Fm$Term$all$($3962, $3963, $3964, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3965), (_s$10 => _x$11 => {
                    var $3968 = Fm$Term$bind$(List$cons$(Pair$new$($3964, _x$11), List$cons$(Pair$new$($3963, _s$10), _vars$1)), Fm$Path$i(_path$2), $3966(Fm$Term$var$($3963, _vlen$9))(Fm$Term$var$($3964, Nat$succ$(_vlen$9))));
                    return $3968;
                }));
                var $3949 = $3967;
                break;
            case 'Fm.Term.lam':
                var $3969 = self.name;
                var $3970 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $3971 = Fm$Term$lam$($3969, (_x$7 => {
                    var $3972 = Fm$Term$bind$(List$cons$(Pair$new$($3969, _x$7), _vars$1), Fm$Path$o(_path$2), $3970(Fm$Term$var$($3969, _vlen$6)));
                    return $3972;
                }));
                var $3949 = $3971;
                break;
            case 'Fm.Term.app':
                var $3973 = self.func;
                var $3974 = self.argm;
                var $3975 = Fm$Term$app$(Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3973), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $3974));
                var $3949 = $3975;
                break;
            case 'Fm.Term.let':
                var $3976 = self.name;
                var $3977 = self.expr;
                var $3978 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $3979 = Fm$Term$let$($3976, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3977), (_x$8 => {
                    var $3980 = Fm$Term$bind$(List$cons$(Pair$new$($3976, _x$8), _vars$1), Fm$Path$i(_path$2), $3978(Fm$Term$var$($3976, _vlen$7)));
                    return $3980;
                }));
                var $3949 = $3979;
                break;
            case 'Fm.Term.def':
                var $3981 = self.name;
                var $3982 = self.expr;
                var $3983 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $3984 = Fm$Term$def$($3981, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3982), (_x$8 => {
                    var $3985 = Fm$Term$bind$(List$cons$(Pair$new$($3981, _x$8), _vars$1), Fm$Path$i(_path$2), $3983(Fm$Term$var$($3981, _vlen$7)));
                    return $3985;
                }));
                var $3949 = $3984;
                break;
            case 'Fm.Term.ann':
                var $3986 = self.done;
                var $3987 = self.term;
                var $3988 = self.type;
                var $3989 = Fm$Term$ann$($3986, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3987), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $3988));
                var $3949 = $3989;
                break;
            case 'Fm.Term.gol':
                var $3990 = self.name;
                var $3991 = self.dref;
                var $3992 = self.verb;
                var $3993 = Fm$Term$gol$($3990, $3991, $3992);
                var $3949 = $3993;
                break;
            case 'Fm.Term.hol':
                var $3994 = self.path;
                var $3995 = Fm$Term$hol$(Fm$Path$to_bits$(_path$2));
                var $3949 = $3995;
                break;
            case 'Fm.Term.nat':
                var $3996 = self.natx;
                var $3997 = Fm$Term$nat$($3996);
                var $3949 = $3997;
                break;
            case 'Fm.Term.chr':
                var $3998 = self.chrx;
                var $3999 = Fm$Term$chr$($3998);
                var $3949 = $3999;
                break;
            case 'Fm.Term.str':
                var $4000 = self.strx;
                var $4001 = Fm$Term$str$($4000);
                var $3949 = $4001;
                break;
            case 'Fm.Term.cse':
                var $4002 = self.path;
                var $4003 = self.expr;
                var $4004 = self.name;
                var $4005 = self.with;
                var $4006 = self.cses;
                var $4007 = self.moti;
                var _expr$10 = Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4003);
                var _name$11 = $4004;
                var _wyth$12 = $4005;
                var _cses$13 = $4006;
                var _moti$14 = $4007;
                var $4008 = Fm$Term$cse$(Fm$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $3949 = $4008;
                break;
            case 'Fm.Term.ori':
                var $4009 = self.orig;
                var $4010 = self.expr;
                var $4011 = Fm$Term$ori$($4009, Fm$Term$bind$(_vars$1, _path$2, $4010));
                var $3949 = $4011;
                break;
        };
        return $3949;
    };
    const Fm$Term$bind = x0 => x1 => x2 => Fm$Term$bind$(x0, x1, x2);
    const Fm$Status$done = ({
        _: 'Fm.Status.done'
    });

    function Fm$define$(_file$1, _code$2, _name$3, _term$4, _type$5, _done$6, _defs$7) {
        var self = _done$6;
        if (self) {
            var $4013 = Fm$Status$done;
            var _stat$8 = $4013;
        } else {
            var $4014 = Fm$Status$init;
            var _stat$8 = $4014;
        };
        var $4012 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$8), _defs$7);
        return $4012;
    };
    const Fm$define = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$define$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$name1$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4016 = self.idx;
                var $4017 = self.code;
                var $4018 = self.err;
                var $4019 = Parser$Reply$error$($4016, $4017, $4018);
                var $4015 = $4019;
                break;
            case 'Parser.Reply.value':
                var $4020 = self.idx;
                var $4021 = self.code;
                var $4022 = self.val;
                var self = Parser$many$(Fm$Parser$binder)($4020)($4021);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4024 = self.idx;
                        var $4025 = self.code;
                        var $4026 = self.err;
                        var $4027 = Parser$Reply$error$($4024, $4025, $4026);
                        var $4023 = $4027;
                        break;
                    case 'Parser.Reply.value':
                        var $4028 = self.idx;
                        var $4029 = self.code;
                        var $4030 = self.val;
                        var _args$12 = List$flatten$($4030);
                        var self = Fm$Parser$text$(":", $4028, $4029);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4032 = self.idx;
                                var $4033 = self.code;
                                var $4034 = self.err;
                                var $4035 = Parser$Reply$error$($4032, $4033, $4034);
                                var $4031 = $4035;
                                break;
                            case 'Parser.Reply.value':
                                var $4036 = self.idx;
                                var $4037 = self.code;
                                var $4038 = self.val;
                                var self = Fm$Parser$term$($4036, $4037);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4040 = self.idx;
                                        var $4041 = self.code;
                                        var $4042 = self.err;
                                        var $4043 = Parser$Reply$error$($4040, $4041, $4042);
                                        var $4039 = $4043;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4044 = self.idx;
                                        var $4045 = self.code;
                                        var $4046 = self.val;
                                        var self = Fm$Parser$term$($4044, $4045);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4048 = self.idx;
                                                var $4049 = self.code;
                                                var $4050 = self.err;
                                                var $4051 = Parser$Reply$error$($4048, $4049, $4050);
                                                var $4047 = $4051;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4052 = self.idx;
                                                var $4053 = self.code;
                                                var $4054 = self.val;
                                                var _type$22 = Fm$Parser$make_forall$(_args$12, $4046);
                                                var _term$23 = Fm$Parser$make_lambda$(List$mapped$(_args$12, (_x$23 => {
                                                    var self = _x$23;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4057 = self.eras;
                                                            var $4058 = self.name;
                                                            var $4059 = self.term;
                                                            var $4060 = $4058;
                                                            var $4056 = $4060;
                                                            break;
                                                    };
                                                    return $4056;
                                                })), $4054);
                                                var _type$24 = Fm$Term$bind$(List$nil, (_x$24 => {
                                                    var $4061 = (_x$24 + '1');
                                                    return $4061;
                                                }), _type$22);
                                                var _term$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                                    var $4062 = (_x$25 + '0');
                                                    return $4062;
                                                }), _term$23);
                                                var _defs$26 = Fm$define$(_file$1, _code$2, $4022, _term$25, _type$24, Bool$false, _defs$3);
                                                var $4055 = Parser$Reply$value$($4052, $4053, _defs$26);
                                                var $4047 = $4055;
                                                break;
                                        };
                                        var $4039 = $4047;
                                        break;
                                };
                                var $4031 = $4039;
                                break;
                        };
                        var $4023 = $4031;
                        break;
                };
                var $4015 = $4023;
                break;
        };
        return $4015;
    };
    const Fm$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$def$(x0, x1, x2, x3, x4);

    function Maybe$default$(_a$2, _m$3) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $4064 = _a$2;
                var $4063 = $4064;
                break;
            case 'Maybe.some':
                var $4065 = self.value;
                var $4066 = $4065;
                var $4063 = $4066;
                break;
        };
        return $4063;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Fm$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4067 = ({
            _: 'Fm.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4067;
    };
    const Fm$Constructor$new = x0 => x1 => x2 => Fm$Constructor$new$(x0, x1, x2);

    function Fm$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Fm$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4069 = self.idx;
                var $4070 = self.code;
                var $4071 = self.err;
                var $4072 = Parser$Reply$error$($4069, $4070, $4071);
                var $4068 = $4072;
                break;
            case 'Parser.Reply.value':
                var $4073 = self.idx;
                var $4074 = self.code;
                var $4075 = self.val;
                var self = Parser$maybe$(Fm$Parser$binder, $4073, $4074);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4077 = self.idx;
                        var $4078 = self.code;
                        var $4079 = self.err;
                        var $4080 = Parser$Reply$error$($4077, $4078, $4079);
                        var $4076 = $4080;
                        break;
                    case 'Parser.Reply.value':
                        var $4081 = self.idx;
                        var $4082 = self.code;
                        var $4083 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Fm$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4086 = self.idx;
                                    var $4087 = self.code;
                                    var $4088 = self.err;
                                    var $4089 = Parser$Reply$error$($4086, $4087, $4088);
                                    var $4085 = $4089;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4090 = self.idx;
                                    var $4091 = self.code;
                                    var $4092 = self.val;
                                    var $4093 = Fm$Parser$binder$($4090, $4091);
                                    var $4085 = $4093;
                                    break;
                            };
                            return $4085;
                        }), $4081, $4082);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4094 = self.idx;
                                var $4095 = self.code;
                                var $4096 = self.err;
                                var $4097 = Parser$Reply$error$($4094, $4095, $4096);
                                var $4084 = $4097;
                                break;
                            case 'Parser.Reply.value':
                                var $4098 = self.idx;
                                var $4099 = self.code;
                                var $4100 = self.val;
                                var _args$13 = Maybe$default$(List$nil, $4083);
                                var _inds$14 = Maybe$default$(List$nil, $4100);
                                var $4101 = Parser$Reply$value$($4098, $4099, Fm$Constructor$new$($4075, _args$13, _inds$14));
                                var $4084 = $4101;
                                break;
                        };
                        var $4076 = $4084;
                        break;
                };
                var $4068 = $4076;
                break;
        };
        return $4068;
    };
    const Fm$Parser$constructor = x0 => x1 => x2 => Fm$Parser$constructor$(x0, x1, x2);

    function Fm$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4102 = ({
            _: 'Fm.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4102;
    };
    const Fm$Datatype$new = x0 => x1 => x2 => x3 => Fm$Datatype$new$(x0, x1, x2, x3);

    function Fm$Parser$datatype$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4104 = self.idx;
                var $4105 = self.code;
                var $4106 = self.err;
                var $4107 = Parser$Reply$error$($4104, $4105, $4106);
                var $4103 = $4107;
                break;
            case 'Parser.Reply.value':
                var $4108 = self.idx;
                var $4109 = self.code;
                var $4110 = self.val;
                var self = Fm$Parser$name1$($4108, $4109);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4112 = self.idx;
                        var $4113 = self.code;
                        var $4114 = self.err;
                        var $4115 = Parser$Reply$error$($4112, $4113, $4114);
                        var $4111 = $4115;
                        break;
                    case 'Parser.Reply.value':
                        var $4116 = self.idx;
                        var $4117 = self.code;
                        var $4118 = self.val;
                        var self = Parser$maybe$(Fm$Parser$binder, $4116, $4117);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4120 = self.idx;
                                var $4121 = self.code;
                                var $4122 = self.err;
                                var $4123 = Parser$Reply$error$($4120, $4121, $4122);
                                var $4119 = $4123;
                                break;
                            case 'Parser.Reply.value':
                                var $4124 = self.idx;
                                var $4125 = self.code;
                                var $4126 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4129 = self.idx;
                                            var $4130 = self.code;
                                            var $4131 = self.err;
                                            var $4132 = Parser$Reply$error$($4129, $4130, $4131);
                                            var $4128 = $4132;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4133 = self.idx;
                                            var $4134 = self.code;
                                            var $4135 = self.val;
                                            var $4136 = Fm$Parser$binder$($4133, $4134);
                                            var $4128 = $4136;
                                            break;
                                    };
                                    return $4128;
                                }), $4124, $4125);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4137 = self.idx;
                                        var $4138 = self.code;
                                        var $4139 = self.err;
                                        var $4140 = Parser$Reply$error$($4137, $4138, $4139);
                                        var $4127 = $4140;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4141 = self.idx;
                                        var $4142 = self.code;
                                        var $4143 = self.val;
                                        var _pars$15 = Maybe$default$(List$nil, $4126);
                                        var _inds$16 = Maybe$default$(List$nil, $4143);
                                        var self = Fm$Parser$text$("{", $4141, $4142);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4145 = self.idx;
                                                var $4146 = self.code;
                                                var $4147 = self.err;
                                                var $4148 = Parser$Reply$error$($4145, $4146, $4147);
                                                var $4144 = $4148;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4149 = self.idx;
                                                var $4150 = self.code;
                                                var $4151 = self.val;
                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$item(Fm$Parser$constructor($4118)))($4149)($4150);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4153 = self.idx;
                                                        var $4154 = self.code;
                                                        var $4155 = self.err;
                                                        var $4156 = Parser$Reply$error$($4153, $4154, $4155);
                                                        var $4152 = $4156;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4157 = self.idx;
                                                        var $4158 = self.code;
                                                        var $4159 = self.val;
                                                        var $4160 = Parser$Reply$value$($4157, $4158, Fm$Datatype$new$($4118, _pars$15, _inds$16, $4159));
                                                        var $4152 = $4160;
                                                        break;
                                                };
                                                var $4144 = $4152;
                                                break;
                                        };
                                        var $4127 = $4144;
                                        break;
                                };
                                var $4119 = $4127;
                                break;
                        };
                        var $4111 = $4119;
                        break;
                };
                var $4103 = $4111;
                break;
        };
        return $4103;
    };
    const Fm$Parser$datatype = x0 => x1 => Fm$Parser$datatype$(x0, x1);

    function Fm$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4163 = self.name;
                        var $4164 = self.pars;
                        var $4165 = self.inds;
                        var $4166 = self.ctrs;
                        var _slf$8 = Fm$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $4169 = _slf$8;
                            var $4170 = $4164;
                            let _slf$10 = $4169;
                            let _var$9;
                            while ($4170._ === 'List.cons') {
                                _var$9 = $4170.head;
                                var $4169 = Fm$Term$app$(_slf$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4171 = self.eras;
                                            var $4172 = self.name;
                                            var $4173 = self.term;
                                            var $4174 = $4172;
                                            return $4174;
                                    };
                                })()));
                                _slf$10 = $4169;
                                $4170 = $4170.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $4176 = _slf$9;
                            var $4177 = $4165;
                            let _slf$11 = $4176;
                            let _var$10;
                            while ($4177._ === 'List.cons') {
                                _var$10 = $4177.head;
                                var $4176 = Fm$Term$app$(_slf$11, Fm$Term$ref$((() => {
                                    var self = _var$10;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4178 = self.eras;
                                            var $4179 = self.name;
                                            var $4180 = self.term;
                                            var $4181 = $4179;
                                            return $4181;
                                    };
                                })()));
                                _slf$11 = $4176;
                                $4177 = $4177.tail;
                            }
                            return _slf$11;
                        })();
                        var $4167 = Fm$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $4182 = Fm$Term$typ;
                            return $4182;
                        }));
                        var $4162 = $4167;
                        break;
                };
                var $4161 = $4162;
                break;
            case 'List.cons':
                var $4183 = self.head;
                var $4184 = self.tail;
                var self = $4183;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4186 = self.eras;
                        var $4187 = self.name;
                        var $4188 = self.term;
                        var $4189 = Fm$Term$all$($4186, "", $4187, $4188, (_s$9 => _x$10 => {
                            var $4190 = Fm$Datatype$build_term$motive$go$(_type$1, _name$2, $4184);
                            return $4190;
                        }));
                        var $4185 = $4189;
                        break;
                };
                var $4161 = $4185;
                break;
        };
        return $4161;
    };
    const Fm$Datatype$build_term$motive$go = x0 => x1 => x2 => Fm$Datatype$build_term$motive$go$(x0, x1, x2);

    function Fm$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4192 = self.name;
                var $4193 = self.pars;
                var $4194 = self.inds;
                var $4195 = self.ctrs;
                var $4196 = Fm$Datatype$build_term$motive$go$(_type$1, $4192, $4194);
                var $4191 = $4196;
                break;
        };
        return $4191;
    };
    const Fm$Datatype$build_term$motive = x0 => Fm$Datatype$build_term$motive$(x0);

    function Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4199 = self.name;
                        var $4200 = self.pars;
                        var $4201 = self.inds;
                        var $4202 = self.ctrs;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Fm.Constructor.new':
                                var $4204 = self.name;
                                var $4205 = self.args;
                                var $4206 = self.inds;
                                var _ret$11 = Fm$Term$ref$(Fm$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $4209 = _ret$11;
                                    var $4210 = $4206;
                                    let _ret$13 = $4209;
                                    let _var$12;
                                    while ($4210._ === 'List.cons') {
                                        _var$12 = $4210.head;
                                        var $4209 = Fm$Term$app$(_ret$13, (() => {
                                            var self = _var$12;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4211 = self.eras;
                                                    var $4212 = self.name;
                                                    var $4213 = self.term;
                                                    var $4214 = $4213;
                                                    return $4214;
                                            };
                                        })());
                                        _ret$13 = $4209;
                                        $4210 = $4210.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($4199, List$cons$(Fm$Name$read$("."), List$cons$($4204, List$nil))));
                                var _slf$14 = Fm$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $4216 = _slf$14;
                                    var $4217 = $4200;
                                    let _slf$16 = $4216;
                                    let _var$15;
                                    while ($4217._ === 'List.cons') {
                                        _var$15 = $4217.head;
                                        var $4216 = Fm$Term$app$(_slf$16, Fm$Term$ref$((() => {
                                            var self = _var$15;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4218 = self.eras;
                                                    var $4219 = self.name;
                                                    var $4220 = self.term;
                                                    var $4221 = $4219;
                                                    return $4221;
                                            };
                                        })()));
                                        _slf$16 = $4216;
                                        $4217 = $4217.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $4223 = _slf$15;
                                    var $4224 = $4205;
                                    let _slf$17 = $4223;
                                    let _var$16;
                                    while ($4224._ === 'List.cons') {
                                        _var$16 = $4224.head;
                                        var $4223 = Fm$Term$app$(_slf$17, Fm$Term$ref$((() => {
                                            var self = _var$16;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4225 = self.eras;
                                                    var $4226 = self.name;
                                                    var $4227 = self.term;
                                                    var $4228 = $4226;
                                                    return $4228;
                                            };
                                        })()));
                                        _slf$17 = $4223;
                                        $4224 = $4224.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $4207 = Fm$Term$app$(_ret$12, _slf$16);
                                var $4203 = $4207;
                                break;
                        };
                        var $4198 = $4203;
                        break;
                };
                var $4197 = $4198;
                break;
            case 'List.cons':
                var $4229 = self.head;
                var $4230 = self.tail;
                var self = $4229;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4232 = self.eras;
                        var $4233 = self.name;
                        var $4234 = self.term;
                        var _eras$9 = $4232;
                        var _name$10 = $4233;
                        var _xtyp$11 = $4234;
                        var _body$12 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4230);
                        var $4235 = Fm$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $4236 = _body$12;
                            return $4236;
                        }));
                        var $4231 = $4235;
                        break;
                };
                var $4197 = $4231;
                break;
        };
        return $4197;
    };
    const Fm$Datatype$build_term$constructor$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Fm.Constructor.new':
                var $4238 = self.name;
                var $4239 = self.args;
                var $4240 = self.inds;
                var $4241 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4239);
                var $4237 = $4241;
                break;
        };
        return $4237;
    };
    const Fm$Datatype$build_term$constructor = x0 => x1 => Fm$Datatype$build_term$constructor$(x0, x1);

    function Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4244 = self.name;
                        var $4245 = self.pars;
                        var $4246 = self.inds;
                        var $4247 = self.ctrs;
                        var _ret$8 = Fm$Term$ref$(Fm$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $4250 = _ret$8;
                            var $4251 = $4246;
                            let _ret$10 = $4250;
                            let _var$9;
                            while ($4251._ === 'List.cons') {
                                _var$9 = $4251.head;
                                var $4250 = Fm$Term$app$(_ret$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4252 = self.eras;
                                            var $4253 = self.name;
                                            var $4254 = self.term;
                                            var $4255 = $4253;
                                            return $4255;
                                    };
                                })()));
                                _ret$10 = $4250;
                                $4251 = $4251.tail;
                            }
                            return _ret$10;
                        })();
                        var $4248 = Fm$Term$app$(_ret$9, Fm$Term$ref$((_name$2 + ".Self")));
                        var $4243 = $4248;
                        break;
                };
                var $4242 = $4243;
                break;
            case 'List.cons':
                var $4256 = self.head;
                var $4257 = self.tail;
                var self = $4256;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4259 = self.name;
                        var $4260 = self.args;
                        var $4261 = self.inds;
                        var $4262 = Fm$Term$all$(Bool$false, "", $4259, Fm$Datatype$build_term$constructor$(_type$1, $4256), (_s$9 => _x$10 => {
                            var $4263 = Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, $4257);
                            return $4263;
                        }));
                        var $4258 = $4262;
                        break;
                };
                var $4242 = $4258;
                break;
        };
        return $4242;
    };
    const Fm$Datatype$build_term$constructors$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4265 = self.name;
                var $4266 = self.pars;
                var $4267 = self.inds;
                var $4268 = self.ctrs;
                var $4269 = Fm$Datatype$build_term$constructors$go$(_type$1, $4265, $4268);
                var $4264 = $4269;
                break;
        };
        return $4264;
    };
    const Fm$Datatype$build_term$constructors = x0 => Fm$Datatype$build_term$constructors$(x0);

    function Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4272 = Fm$Term$all$(Bool$true, (_name$2 + ".Self"), Fm$Name$read$("P"), Fm$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $4273 = Fm$Datatype$build_term$constructors$(_type$1);
                            return $4273;
                        }));
                        var $4271 = $4272;
                        break;
                    case 'List.cons':
                        var $4274 = self.head;
                        var $4275 = self.tail;
                        var self = $4274;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4277 = self.eras;
                                var $4278 = self.name;
                                var $4279 = self.term;
                                var $4280 = Fm$Term$lam$($4278, (_x$10 => {
                                    var $4281 = Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $4275);
                                    return $4281;
                                }));
                                var $4276 = $4280;
                                break;
                        };
                        var $4271 = $4276;
                        break;
                };
                var $4270 = $4271;
                break;
            case 'List.cons':
                var $4282 = self.head;
                var $4283 = self.tail;
                var self = $4282;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4285 = self.eras;
                        var $4286 = self.name;
                        var $4287 = self.term;
                        var $4288 = Fm$Term$lam$($4286, (_x$10 => {
                            var $4289 = Fm$Datatype$build_term$go$(_type$1, _name$2, $4283, _inds$4);
                            return $4289;
                        }));
                        var $4284 = $4288;
                        break;
                };
                var $4270 = $4284;
                break;
        };
        return $4270;
    };
    const Fm$Datatype$build_term$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_term$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4291 = self.name;
                var $4292 = self.pars;
                var $4293 = self.inds;
                var $4294 = self.ctrs;
                var $4295 = Fm$Datatype$build_term$go$(_type$1, $4291, $4292, $4293);
                var $4290 = $4295;
                break;
        };
        return $4290;
    };
    const Fm$Datatype$build_term = x0 => Fm$Datatype$build_term$(x0);

    function Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4298 = Fm$Term$typ;
                        var $4297 = $4298;
                        break;
                    case 'List.cons':
                        var $4299 = self.head;
                        var $4300 = self.tail;
                        var self = $4299;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4302 = self.eras;
                                var $4303 = self.name;
                                var $4304 = self.term;
                                var $4305 = Fm$Term$all$(Bool$false, "", $4303, $4304, (_s$10 => _x$11 => {
                                    var $4306 = Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $4300);
                                    return $4306;
                                }));
                                var $4301 = $4305;
                                break;
                        };
                        var $4297 = $4301;
                        break;
                };
                var $4296 = $4297;
                break;
            case 'List.cons':
                var $4307 = self.head;
                var $4308 = self.tail;
                var self = $4307;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4310 = self.eras;
                        var $4311 = self.name;
                        var $4312 = self.term;
                        var $4313 = Fm$Term$all$(Bool$false, "", $4311, $4312, (_s$10 => _x$11 => {
                            var $4314 = Fm$Datatype$build_type$go$(_type$1, _name$2, $4308, _inds$4);
                            return $4314;
                        }));
                        var $4309 = $4313;
                        break;
                };
                var $4296 = $4309;
                break;
        };
        return $4296;
    };
    const Fm$Datatype$build_type$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_type$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4316 = self.name;
                var $4317 = self.pars;
                var $4318 = self.inds;
                var $4319 = self.ctrs;
                var $4320 = Fm$Datatype$build_type$go$(_type$1, $4316, $4317, $4318);
                var $4315 = $4320;
                break;
        };
        return $4315;
    };
    const Fm$Datatype$build_type = x0 => Fm$Datatype$build_type$(x0);

    function Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4323 = self.name;
                        var $4324 = self.args;
                        var $4325 = self.inds;
                        var _ret$7 = Fm$Term$ref$($4323);
                        var _ret$8 = (() => {
                            var $4328 = _ret$7;
                            var $4329 = $4324;
                            let _ret$9 = $4328;
                            let _arg$8;
                            while ($4329._ === 'List.cons') {
                                _arg$8 = $4329.head;
                                var $4328 = Fm$Term$app$(_ret$9, Fm$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4330 = self.eras;
                                            var $4331 = self.name;
                                            var $4332 = self.term;
                                            var $4333 = $4331;
                                            return $4333;
                                    };
                                })()));
                                _ret$9 = $4328;
                                $4329 = $4329.tail;
                            }
                            return _ret$9;
                        })();
                        var $4326 = _ret$8;
                        var $4322 = $4326;
                        break;
                };
                var $4321 = $4322;
                break;
            case 'List.cons':
                var $4334 = self.head;
                var $4335 = self.tail;
                var self = $4334;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4337 = self.name;
                        var $4338 = self.args;
                        var $4339 = self.inds;
                        var $4340 = Fm$Term$lam$($4337, (_x$9 => {
                            var $4341 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4335);
                            return $4341;
                        }));
                        var $4336 = $4340;
                        break;
                };
                var $4321 = $4336;
                break;
        };
        return $4321;
    };
    const Fm$Constructor$build_term$opt$go = x0 => x1 => x2 => Fm$Constructor$build_term$opt$go$(x0, x1, x2);

    function Fm$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4343 = self.name;
                var $4344 = self.pars;
                var $4345 = self.inds;
                var $4346 = self.ctrs;
                var $4347 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4346);
                var $4342 = $4347;
                break;
        };
        return $4342;
    };
    const Fm$Constructor$build_term$opt = x0 => x1 => Fm$Constructor$build_term$opt$(x0, x1);

    function Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var $4350 = Fm$Term$lam$(Fm$Name$read$("P"), (_x$6 => {
                            var $4351 = Fm$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $4351;
                        }));
                        var $4349 = $4350;
                        break;
                    case 'List.cons':
                        var $4352 = self.head;
                        var $4353 = self.tail;
                        var self = $4352;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4355 = self.eras;
                                var $4356 = self.name;
                                var $4357 = self.term;
                                var $4358 = Fm$Term$lam$($4356, (_x$11 => {
                                    var $4359 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $4353);
                                    return $4359;
                                }));
                                var $4354 = $4358;
                                break;
                        };
                        var $4349 = $4354;
                        break;
                };
                var $4348 = $4349;
                break;
            case 'List.cons':
                var $4360 = self.head;
                var $4361 = self.tail;
                var self = $4360;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4363 = self.eras;
                        var $4364 = self.name;
                        var $4365 = self.term;
                        var $4366 = Fm$Term$lam$($4364, (_x$11 => {
                            var $4367 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $4361, _args$5);
                            return $4367;
                        }));
                        var $4362 = $4366;
                        break;
                };
                var $4348 = $4362;
                break;
        };
        return $4348;
    };
    const Fm$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4369 = self.name;
                var $4370 = self.pars;
                var $4371 = self.inds;
                var $4372 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4374 = self.name;
                        var $4375 = self.args;
                        var $4376 = self.inds;
                        var $4377 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, $4369, $4370, $4375);
                        var $4373 = $4377;
                        break;
                };
                var $4368 = $4373;
                break;
        };
        return $4368;
    };
    const Fm$Constructor$build_term = x0 => x1 => Fm$Constructor$build_term$(x0, x1);

    function Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Fm.Datatype.new':
                                var $4381 = self.name;
                                var $4382 = self.pars;
                                var $4383 = self.inds;
                                var $4384 = self.ctrs;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4386 = self.name;
                                        var $4387 = self.args;
                                        var $4388 = self.inds;
                                        var _type$13 = Fm$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $4391 = _type$13;
                                            var $4392 = $4382;
                                            let _type$15 = $4391;
                                            let _var$14;
                                            while ($4392._ === 'List.cons') {
                                                _var$14 = $4392.head;
                                                var $4391 = Fm$Term$app$(_type$15, Fm$Term$ref$((() => {
                                                    var self = _var$14;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4393 = self.eras;
                                                            var $4394 = self.name;
                                                            var $4395 = self.term;
                                                            var $4396 = $4394;
                                                            return $4396;
                                                    };
                                                })()));
                                                _type$15 = $4391;
                                                $4392 = $4392.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $4398 = _type$14;
                                            var $4399 = $4388;
                                            let _type$16 = $4398;
                                            let _var$15;
                                            while ($4399._ === 'List.cons') {
                                                _var$15 = $4399.head;
                                                var $4398 = Fm$Term$app$(_type$16, (() => {
                                                    var self = _var$15;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4400 = self.eras;
                                                            var $4401 = self.name;
                                                            var $4402 = self.term;
                                                            var $4403 = $4402;
                                                            return $4403;
                                                    };
                                                })());
                                                _type$16 = $4398;
                                                $4399 = $4399.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $4389 = _type$15;
                                        var $4385 = $4389;
                                        break;
                                };
                                var $4380 = $4385;
                                break;
                        };
                        var $4379 = $4380;
                        break;
                    case 'List.cons':
                        var $4404 = self.head;
                        var $4405 = self.tail;
                        var self = $4404;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4407 = self.eras;
                                var $4408 = self.name;
                                var $4409 = self.term;
                                var $4410 = Fm$Term$all$($4407, "", $4408, $4409, (_s$11 => _x$12 => {
                                    var $4411 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $4405);
                                    return $4411;
                                }));
                                var $4406 = $4410;
                                break;
                        };
                        var $4379 = $4406;
                        break;
                };
                var $4378 = $4379;
                break;
            case 'List.cons':
                var $4412 = self.head;
                var $4413 = self.tail;
                var self = $4412;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4415 = self.eras;
                        var $4416 = self.name;
                        var $4417 = self.term;
                        var $4418 = Fm$Term$all$($4415, "", $4416, $4417, (_s$11 => _x$12 => {
                            var $4419 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $4413, _args$5);
                            return $4419;
                        }));
                        var $4414 = $4418;
                        break;
                };
                var $4378 = $4414;
                break;
        };
        return $4378;
    };
    const Fm$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4421 = self.name;
                var $4422 = self.pars;
                var $4423 = self.inds;
                var $4424 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4426 = self.name;
                        var $4427 = self.args;
                        var $4428 = self.inds;
                        var $4429 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, $4421, $4422, $4427);
                        var $4425 = $4429;
                        break;
                };
                var $4420 = $4425;
                break;
        };
        return $4420;
    };
    const Fm$Constructor$build_type = x0 => x1 => Fm$Constructor$build_type$(x0, x1);

    function Fm$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$datatype$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4431 = self.idx;
                var $4432 = self.code;
                var $4433 = self.err;
                var $4434 = Parser$Reply$error$($4431, $4432, $4433);
                var $4430 = $4434;
                break;
            case 'Parser.Reply.value':
                var $4435 = self.idx;
                var $4436 = self.code;
                var $4437 = self.val;
                var self = $4437;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4439 = self.name;
                        var $4440 = self.pars;
                        var $4441 = self.inds;
                        var $4442 = self.ctrs;
                        var _term$13 = Fm$Datatype$build_term$($4437);
                        var _term$14 = Fm$Term$bind$(List$nil, (_x$14 => {
                            var $4444 = (_x$14 + '1');
                            return $4444;
                        }), _term$13);
                        var _type$15 = Fm$Datatype$build_type$($4437);
                        var _type$16 = Fm$Term$bind$(List$nil, (_x$16 => {
                            var $4445 = (_x$16 + '0');
                            return $4445;
                        }), _type$15);
                        var _defs$17 = Fm$define$(_file$1, _code$2, $4439, _term$14, _type$16, Bool$false, _defs$3);
                        var _defs$18 = List$fold$($4442, _defs$17, (_ctr$18 => _defs$19 => {
                            var _typ_name$20 = $4439;
                            var _ctr_name$21 = String$flatten$(List$cons$(_typ_name$20, List$cons$(Fm$Name$read$("."), List$cons$((() => {
                                var self = _ctr$18;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4447 = self.name;
                                        var $4448 = self.args;
                                        var $4449 = self.inds;
                                        var $4450 = $4447;
                                        return $4450;
                                };
                            })(), List$nil))));
                            var _ctr_term$22 = Fm$Constructor$build_term$($4437, _ctr$18);
                            var _ctr_term$23 = Fm$Term$bind$(List$nil, (_x$23 => {
                                var $4451 = (_x$23 + '1');
                                return $4451;
                            }), _ctr_term$22);
                            var _ctr_type$24 = Fm$Constructor$build_type$($4437, _ctr$18);
                            var _ctr_type$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                var $4452 = (_x$25 + '0');
                                return $4452;
                            }), _ctr_type$24);
                            var $4446 = Fm$define$(_file$1, _code$2, _ctr_name$21, _ctr_term$23, _ctr_type$25, Bool$false, _defs$19);
                            return $4446;
                        }));
                        var $4443 = (_idx$19 => _code$20 => {
                            var $4453 = Parser$Reply$value$(_idx$19, _code$20, _defs$18);
                            return $4453;
                        });
                        var $4438 = $4443;
                        break;
                };
                var $4438 = $4438($4435)($4436);
                var $4430 = $4438;
                break;
        };
        return $4430;
    };
    const Fm$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4455 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $4454 = $4455;
        } else {
            var $4456 = self.charCodeAt(0);
            var $4457 = self.slice(1);
            var $4458 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $4454 = $4458;
        };
        return $4454;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Fm$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4460 = self.idx;
                var $4461 = self.code;
                var $4462 = self.err;
                var $4463 = Parser$Reply$error$($4460, $4461, $4462);
                var $4459 = $4463;
                break;
            case 'Parser.Reply.value':
                var $4464 = self.idx;
                var $4465 = self.code;
                var $4466 = self.val;
                var self = Parser$eof$($4464, $4465);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4468 = self.idx;
                        var $4469 = self.code;
                        var $4470 = self.err;
                        var $4471 = Parser$Reply$error$($4468, $4469, $4470);
                        var $4467 = $4471;
                        break;
                    case 'Parser.Reply.value':
                        var $4472 = self.idx;
                        var $4473 = self.code;
                        var $4474 = self.val;
                        var $4475 = Parser$Reply$value$($4472, $4473, _defs$3);
                        var $4467 = $4475;
                        break;
                };
                var $4459 = $4467;
                break;
        };
        return $4459;
    };
    const Fm$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$end$(x0, x1, x2, x3, x4);

    function Fm$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4477 = self.idx;
                var $4478 = self.code;
                var $4479 = self.err;
                var $4480 = Parser$Reply$error$($4477, $4478, $4479);
                var $4476 = $4480;
                break;
            case 'Parser.Reply.value':
                var $4481 = self.idx;
                var $4482 = self.code;
                var $4483 = self.val;
                var self = $4483;
                if (self) {
                    var $4485 = (_idx$9 => _code$10 => {
                        var $4486 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $4486;
                    });
                    var $4484 = $4485;
                } else {
                    var $4487 = Parser$first_of$(List$cons$((_idx$9 => _code$10 => {
                        var self = Fm$Parser$text$("#", _idx$9, _code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4489 = self.idx;
                                var $4490 = self.code;
                                var $4491 = self.err;
                                var $4492 = Parser$Reply$error$($4489, $4490, $4491);
                                var $4488 = $4492;
                                break;
                            case 'Parser.Reply.value':
                                var $4493 = self.idx;
                                var $4494 = self.code;
                                var $4495 = self.val;
                                var self = Fm$Parser$name1$($4493, $4494);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4497 = self.idx;
                                        var $4498 = self.code;
                                        var $4499 = self.err;
                                        var $4500 = Parser$Reply$error$($4497, $4498, $4499);
                                        var $4496 = $4500;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4501 = self.idx;
                                        var $4502 = self.code;
                                        var $4503 = self.val;
                                        var $4504 = Fm$Parser$file$($4503, _code$2, _defs$3, $4501, $4502);
                                        var $4496 = $4504;
                                        break;
                                };
                                var $4488 = $4496;
                                break;
                        };
                        return $4488;
                    }), List$cons$((_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Fm$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4506 = self.idx;
                                var $4507 = self.code;
                                var $4508 = self.err;
                                var $4509 = Parser$Reply$error$($4506, $4507, $4508);
                                var $4505 = $4509;
                                break;
                            case 'Parser.Reply.value':
                                var $4510 = self.idx;
                                var $4511 = self.code;
                                var $4512 = self.val;
                                var $4513 = Fm$Parser$file$(_file$1, _code$2, $4512, $4510, $4511);
                                var $4505 = $4513;
                                break;
                        };
                        return $4505;
                    }), List$nil)));
                    var $4484 = $4487;
                };
                var $4484 = $4484($4481)($4482);
                var $4476 = $4484;
                break;
        };
        return $4476;
    };
    const Fm$Parser$file = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $4514 = null;
        return $4514;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $4516 = "";
                var $4515 = $4516;
                break;
            case 'List.cons':
                var $4517 = self.head;
                var $4518 = self.tail;
                var $4519 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $4520 = "";
                        return $4520;
                    } else {
                        var $4521 = _sep$1;
                        return $4521;
                    };
                })(), List$cons$($4517, List$cons$(String$join$go$(_sep$1, $4518, Bool$false), List$nil))));
                var $4515 = $4519;
                break;
        };
        return $4515;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $4522 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $4522;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Fm$highlight$end$(_col$1, _row$2, _res$3) {
        var $4523 = String$join$("\u{a}", _res$3);
        return $4523;
    };
    const Fm$highlight$end = x0 => x1 => x2 => Fm$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4525 = _a$4;
                var $4524 = $4525;
                break;
            case 'Maybe.some':
                var $4526 = self.value;
                var $4527 = _f$5($4526);
                var $4524 = $4527;
                break;
        };
        return $4524;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4529 = Bool$true;
            var $4528 = $4529;
        } else {
            var $4530 = (self - 1n);
            var $4531 = Bool$false;
            var $4528 = $4531;
        };
        return $4528;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4533 = Nat$zero;
            var $4532 = $4533;
        } else {
            var $4534 = (self - 1n);
            var $4535 = Nat$succ$(Nat$succ$(Nat$double$($4534)));
            var $4532 = $4535;
        };
        return $4532;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4537 = Nat$zero;
            var $4536 = $4537;
        } else {
            var $4538 = (self - 1n);
            var $4539 = $4538;
            var $4536 = $4539;
        };
        return $4536;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.nil':
                var $4541 = List$nil;
                var $4540 = $4541;
                break;
            case 'List.cons':
                var $4542 = self.head;
                var $4543 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $4545 = List$nil;
                    var $4544 = $4545;
                } else {
                    var $4546 = (self - 1n);
                    var $4547 = List$cons$($4542, List$take$($4546, $4543));
                    var $4544 = $4547;
                };
                var $4540 = $4544;
                break;
        };
        return $4540;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4548 = _res$2;
                    return $4548;
                } else {
                    var $4549 = self.charCodeAt(0);
                    var $4550 = self.slice(1);
                    var $4551 = String$reverse$go$($4550, String$cons$($4549, _res$2));
                    return $4551;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $4552 = String$reverse$go$(_xs$1, String$nil);
        return $4552;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $4554 = _str$3;
            var $4553 = $4554;
        } else {
            var $4555 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $4557 = String$cons$(_chr$2, String$pad_right$($4555, _chr$2, ""));
                var $4556 = $4557;
            } else {
                var $4558 = self.charCodeAt(0);
                var $4559 = self.slice(1);
                var $4560 = String$cons$($4558, String$pad_right$($4555, _chr$2, $4559));
                var $4556 = $4560;
            };
            var $4553 = $4556;
        };
        return $4553;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $4561 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $4561;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $4562 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4562;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4563 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4563;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4564 = Either$left$(_n$1);
                    return $4564;
                } else {
                    var $4565 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4567 = Either$right$(Nat$succ$($4565));
                        var $4566 = $4567;
                    } else {
                        var $4568 = (self - 1n);
                        var $4569 = Nat$sub_rem$($4568, $4565);
                        var $4566 = $4569;
                    };
                    return $4566;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4570 = self.value;
                        var $4571 = Nat$div_mod$go$($4570, _m$2, Nat$succ$(_d$3));
                        return $4571;
                    case 'Either.right':
                        var $4572 = self.value;
                        var $4573 = Pair$new$(_d$3, _n$1);
                        return $4573;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4574 = self.fst;
                        var $4575 = self.snd;
                        var self = $4574;
                        if (self === 0n) {
                            var $4577 = List$cons$($4575, _res$3);
                            var $4576 = $4577;
                        } else {
                            var $4578 = (self - 1n);
                            var $4579 = Nat$to_base$go$(_base$1, $4574, List$cons$($4575, _res$3));
                            var $4576 = $4579;
                        };
                        return $4576;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4580 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4580;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4581 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4581;
                } else {
                    var $4582 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4584 = _r$3;
                        var $4583 = $4584;
                    } else {
                        var $4585 = (self - 1n);
                        var $4586 = Nat$mod$go$($4585, $4582, Nat$succ$(_r$3));
                        var $4583 = $4586;
                    };
                    return $4583;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);

    function Nat$mod$(_n$1, _m$2) {
        var $4587 = Nat$mod$go$(_n$1, _m$2, 0n);
        return $4587;
    };
    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = Nat$mod$(_n$2, _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.none':
                    var $4590 = 35;
                    var $4589 = $4590;
                    break;
                case 'Maybe.some':
                    var $4591 = self.value;
                    var $4592 = $4591;
                    var $4589 = $4592;
                    break;
            };
            var $4588 = $4589;
        } else {
            var $4593 = 35;
            var $4588 = $4593;
        };
        return $4588;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4594 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4595 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4595;
        }));
        return $4594;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4596 = Nat$to_string_base$(10n, _n$1);
        return $4596;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Fm$color$(_col$1, _str$2) {
        var $4597 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $4597;
    };
    const Fm$color = x0 => x1 => Fm$color$(x0, x1);

    function Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Fm$highlight$tc$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Fm$highlight$tc = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $4598 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    return $4598;
                } else {
                    var $4599 = self.charCodeAt(0);
                    var $4600 = self.slice(1);
                    var self = ($4599 === 10);
                    if (self) {
                        var _stp$11 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$11;
                        if (self) {
                            var $4603 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $4602 = $4603;
                        } else {
                            var _spa$12 = 3n;
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$12));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $4606 = Maybe$some$(_spa$12);
                                        var $4605 = $4606;
                                        break;
                                    case 'Maybe.some':
                                        var $4607 = self.value;
                                        var $4608 = Maybe$some$(Nat$pred$($4607));
                                        var $4605 = $4608;
                                        break;
                                };
                                var _lft$14 = $4605;
                            } else {
                                var $4609 = (self - 1n);
                                var $4610 = _lft$6;
                                var _lft$14 = $4610;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$take$(_siz$13, List$cons$(String$reverse$(_lin$7), _res$8));
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $4604 = Fm$highlight$tc$($4600, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $4602 = $4604;
                        };
                        var $4601 = $4602;
                    } else {
                        var _chr$11 = String$cons$($4599, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $4612 = String$reverse$(Fm$color$("31", Fm$color$("4", _chr$11)));
                            var _chr$12 = $4612;
                        } else {
                            var $4613 = _chr$11;
                            var _chr$12 = $4613;
                        };
                        var _ix0$13 = Nat$pred$(_ix0$2);
                        var _ix1$14 = Nat$pred$(_ix1$3);
                        var _col$15 = Nat$succ$(_col$4);
                        var _lin$16 = String$flatten$(List$cons$(_chr$12, List$cons$(_lin$7, List$nil)));
                        var $4611 = Fm$highlight$tc$($4600, _ix0$13, _ix1$14, _col$15, _row$5, _lft$6, _lin$16, _res$8);
                        var $4601 = $4611;
                    };
                    return $4601;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$highlight$tc = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$highlight$tc$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $4614 = Fm$highlight$tc$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $4614;
    };
    const Fm$highlight = x0 => x1 => x2 => Fm$highlight$(x0, x1, x2);

    function Fm$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Fm$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4616 = self.idx;
                var $4617 = self.code;
                var $4618 = self.err;
                var _err$7 = $4618;
                var _hig$8 = Fm$highlight$(_code$2, $4616, Nat$succ$($4616));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $4619 = Either$left$(_str$9);
                var $4615 = $4619;
                break;
            case 'Parser.Reply.value':
                var $4620 = self.idx;
                var $4621 = self.code;
                var $4622 = self.val;
                var $4623 = Either$right$($4622);
                var $4615 = $4623;
                break;
        };
        return $4615;
    };
    const Fm$Defs$read = x0 => x1 => x2 => Fm$Defs$read$(x0, x1, x2);

    function IO$print$(_text$1) {
        var $4624 = IO$ask$("print", _text$1, (_skip$2 => {
            var $4625 = IO$end$(Unit$new);
            return $4625;
        }));
        return $4624;
    };
    const IO$print = x0 => IO$print$(x0);
    const IO$exit = IO$ask$("exit", "", (_file$1 => {
        var $4626 = IO$end$(Unit$new);
        return $4626;
    }));

    function Fm$Synth$load$(_name$1, _defs$2) {
        var _file$3 = Fm$Synth$file_of$(_name$1);
        var $4627 = IO$monad$((_m$bind$4 => _m$pure$5 => {
            var $4628 = _m$bind$4;
            return $4628;
        }))(IO$get_file$(_file$3))((_code$4 => {
            var _read$5 = Fm$Defs$read$(_file$3, _code$4, _defs$2);
            var self = _read$5;
            switch (self._) {
                case 'Either.left':
                    var $4630 = self.value;
                    var $4631 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $4632 = _m$bind$7;
                        return $4632;
                    }))(IO$print$(("Parse error on file \'" + (_file$3 + "\'."))))((_$7 => {
                        var $4633 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                            var $4634 = _m$bind$8;
                            return $4634;
                        }))(IO$exit)((_$8 => {
                            var $4635 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $4636 = _m$pure$10;
                                return $4636;
                            }))(Maybe$none);
                            return $4635;
                        }));
                        return $4633;
                    }));
                    var $4629 = $4631;
                    break;
                case 'Either.right':
                    var $4637 = self.value;
                    var _defs$7 = $4637;
                    var self = Fm$get$(_name$1, _defs$7);
                    switch (self._) {
                        case 'Maybe.none':
                            var $4639 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                var $4640 = _m$bind$8;
                                return $4640;
                            }))(IO$print$(("Couldn\'t find \'" + (_name$1 + ("\' on file \'" + (_file$3 + "."))))))((_$8 => {
                                var $4641 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                    var $4642 = _m$bind$9;
                                    return $4642;
                                }))(IO$exit)((_$9 => {
                                    var $4643 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                                        var $4644 = _m$pure$11;
                                        return $4644;
                                    }))(Maybe$none);
                                    return $4643;
                                }));
                                return $4641;
                            }));
                            var $4638 = $4639;
                            break;
                        case 'Maybe.some':
                            var $4645 = self.value;
                            var $4646 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $4647 = _m$pure$10;
                                return $4647;
                            }))(Maybe$some$(_defs$7));
                            var $4638 = $4646;
                            break;
                    };
                    var $4629 = $4638;
                    break;
            };
            return $4629;
        }));
        return $4627;
    };
    const Fm$Synth$load = x0 => x1 => Fm$Synth$load$(x0, x1);
    const Fm$Status$wait = ({
        _: 'Fm.Status.wait'
    });

    function Fm$Check$(_V$1) {
        var $4648 = null;
        return $4648;
    };
    const Fm$Check = x0 => Fm$Check$(x0);

    function Fm$Check$result$(_value$2, _errors$3) {
        var $4649 = ({
            _: 'Fm.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $4649;
    };
    const Fm$Check$result = x0 => x1 => Fm$Check$result$(x0, x1);

    function Fm$Error$undefined_reference$(_origin$1, _name$2) {
        var $4650 = ({
            _: 'Fm.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $4650;
    };
    const Fm$Error$undefined_reference = x0 => x1 => Fm$Error$undefined_reference$(x0, x1);

    function Fm$Error$waiting$(_name$1) {
        var $4651 = ({
            _: 'Fm.Error.waiting',
            'name': _name$1
        });
        return $4651;
    };
    const Fm$Error$waiting = x0 => Fm$Error$waiting$(x0);

    function Fm$Error$indirect$(_name$1) {
        var $4652 = ({
            _: 'Fm.Error.indirect',
            'name': _name$1
        });
        return $4652;
    };
    const Fm$Error$indirect = x0 => Fm$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4654 = Maybe$none;
                var $4653 = $4654;
                break;
            case 'Maybe.some':
                var $4655 = self.value;
                var $4656 = Maybe$some$(_f$4($4655));
                var $4653 = $4656;
                break;
        };
        return $4653;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Fm$MPath$o$(_path$1) {
        var $4657 = Maybe$mapped$(_path$1, Fm$Path$o);
        return $4657;
    };
    const Fm$MPath$o = x0 => Fm$MPath$o$(x0);

    function Fm$MPath$i$(_path$1) {
        var $4658 = Maybe$mapped$(_path$1, Fm$Path$i);
        return $4658;
    };
    const Fm$MPath$i = x0 => Fm$MPath$i$(x0);

    function Fm$Error$patch$(_path$1, _term$2) {
        var $4659 = ({
            _: 'Fm.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $4659;
    };
    const Fm$Error$patch = x0 => x1 => Fm$Error$patch$(x0, x1);

    function Fm$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.none':
                var $4661 = Bits$e;
                var $4660 = $4661;
                break;
            case 'Maybe.some':
                var $4662 = self.value;
                var $4663 = $4662(Bits$e);
                var $4660 = $4663;
                break;
        };
        return $4660;
    };
    const Fm$MPath$to_bits = x0 => Fm$MPath$to_bits$(x0);

    function Fm$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $4664 = ({
            _: 'Fm.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $4664;
    };
    const Fm$Error$type_mismatch = x0 => x1 => x2 => x3 => Fm$Error$type_mismatch$(x0, x1, x2, x3);

    function Fm$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $4665 = ({
            _: 'Fm.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $4665;
    };
    const Fm$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Fm$Error$show_goal$(x0, x1, x2, x3, x4);

    function Fm$Term$normalize$(_term$1, _defs$2) {
        var self = Fm$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $4667 = self.name;
                var $4668 = self.indx;
                var $4669 = Fm$Term$var$($4667, $4668);
                var $4666 = $4669;
                break;
            case 'Fm.Term.ref':
                var $4670 = self.name;
                var $4671 = Fm$Term$ref$($4670);
                var $4666 = $4671;
                break;
            case 'Fm.Term.typ':
                var $4672 = Fm$Term$typ;
                var $4666 = $4672;
                break;
            case 'Fm.Term.all':
                var $4673 = self.eras;
                var $4674 = self.self;
                var $4675 = self.name;
                var $4676 = self.xtyp;
                var $4677 = self.body;
                var $4678 = Fm$Term$all$($4673, $4674, $4675, Fm$Term$normalize$($4676, _defs$2), (_s$8 => _x$9 => {
                    var $4679 = Fm$Term$normalize$($4677(_s$8)(_x$9), _defs$2);
                    return $4679;
                }));
                var $4666 = $4678;
                break;
            case 'Fm.Term.lam':
                var $4680 = self.name;
                var $4681 = self.body;
                var $4682 = Fm$Term$lam$($4680, (_x$5 => {
                    var $4683 = Fm$Term$normalize$($4681(_x$5), _defs$2);
                    return $4683;
                }));
                var $4666 = $4682;
                break;
            case 'Fm.Term.app':
                var $4684 = self.func;
                var $4685 = self.argm;
                var $4686 = Fm$Term$app$(Fm$Term$normalize$($4684, _defs$2), Fm$Term$normalize$($4685, _defs$2));
                var $4666 = $4686;
                break;
            case 'Fm.Term.let':
                var $4687 = self.name;
                var $4688 = self.expr;
                var $4689 = self.body;
                var $4690 = Fm$Term$let$($4687, Fm$Term$normalize$($4688, _defs$2), (_x$6 => {
                    var $4691 = Fm$Term$normalize$($4689(_x$6), _defs$2);
                    return $4691;
                }));
                var $4666 = $4690;
                break;
            case 'Fm.Term.def':
                var $4692 = self.name;
                var $4693 = self.expr;
                var $4694 = self.body;
                var $4695 = Fm$Term$def$($4692, Fm$Term$normalize$($4693, _defs$2), (_x$6 => {
                    var $4696 = Fm$Term$normalize$($4694(_x$6), _defs$2);
                    return $4696;
                }));
                var $4666 = $4695;
                break;
            case 'Fm.Term.ann':
                var $4697 = self.done;
                var $4698 = self.term;
                var $4699 = self.type;
                var $4700 = Fm$Term$ann$($4697, Fm$Term$normalize$($4698, _defs$2), Fm$Term$normalize$($4699, _defs$2));
                var $4666 = $4700;
                break;
            case 'Fm.Term.gol':
                var $4701 = self.name;
                var $4702 = self.dref;
                var $4703 = self.verb;
                var $4704 = Fm$Term$gol$($4701, $4702, $4703);
                var $4666 = $4704;
                break;
            case 'Fm.Term.hol':
                var $4705 = self.path;
                var $4706 = Fm$Term$hol$($4705);
                var $4666 = $4706;
                break;
            case 'Fm.Term.nat':
                var $4707 = self.natx;
                var $4708 = Fm$Term$nat$($4707);
                var $4666 = $4708;
                break;
            case 'Fm.Term.chr':
                var $4709 = self.chrx;
                var $4710 = Fm$Term$chr$($4709);
                var $4666 = $4710;
                break;
            case 'Fm.Term.str':
                var $4711 = self.strx;
                var $4712 = Fm$Term$str$($4711);
                var $4666 = $4712;
                break;
            case 'Fm.Term.cse':
                var $4713 = self.path;
                var $4714 = self.expr;
                var $4715 = self.name;
                var $4716 = self.with;
                var $4717 = self.cses;
                var $4718 = self.moti;
                var $4719 = _term$1;
                var $4666 = $4719;
                break;
            case 'Fm.Term.ori':
                var $4720 = self.orig;
                var $4721 = self.expr;
                var $4722 = Fm$Term$normalize$($4721, _defs$2);
                var $4666 = $4722;
                break;
        };
        return $4666;
    };
    const Fm$Term$normalize = x0 => x1 => Fm$Term$normalize$(x0, x1);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $4724 = List$nil;
                var $4723 = $4724;
                break;
            case 'List.cons':
                var $4725 = self.head;
                var $4726 = self.tail;
                var $4727 = $4726;
                var $4723 = $4727;
                break;
        };
        return $4723;
    };
    const List$tail = x0 => List$tail$(x0);

    function Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Fm$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Fm$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4728 = self.name;
                        var $4729 = self.indx;
                        var $4730 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4730;
                    case 'Fm.Term.ref':
                        var $4731 = self.name;
                        var $4732 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4732;
                    case 'Fm.Term.typ':
                        var $4733 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4733;
                    case 'Fm.Term.all':
                        var $4734 = self.eras;
                        var $4735 = self.self;
                        var $4736 = self.name;
                        var $4737 = self.xtyp;
                        var $4738 = self.body;
                        var $4739 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4739;
                    case 'Fm.Term.lam':
                        var $4740 = self.name;
                        var $4741 = self.body;
                        var $4742 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4742;
                    case 'Fm.Term.app':
                        var $4743 = self.func;
                        var $4744 = self.argm;
                        var $4745 = Fm$SmartMotive$vals$cont$(_expr$1, $4743, List$cons$($4744, _args$3), _defs$4);
                        return $4745;
                    case 'Fm.Term.let':
                        var $4746 = self.name;
                        var $4747 = self.expr;
                        var $4748 = self.body;
                        var $4749 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4749;
                    case 'Fm.Term.def':
                        var $4750 = self.name;
                        var $4751 = self.expr;
                        var $4752 = self.body;
                        var $4753 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4753;
                    case 'Fm.Term.ann':
                        var $4754 = self.done;
                        var $4755 = self.term;
                        var $4756 = self.type;
                        var $4757 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4757;
                    case 'Fm.Term.gol':
                        var $4758 = self.name;
                        var $4759 = self.dref;
                        var $4760 = self.verb;
                        var $4761 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4761;
                    case 'Fm.Term.hol':
                        var $4762 = self.path;
                        var $4763 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4763;
                    case 'Fm.Term.nat':
                        var $4764 = self.natx;
                        var $4765 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4765;
                    case 'Fm.Term.chr':
                        var $4766 = self.chrx;
                        var $4767 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4767;
                    case 'Fm.Term.str':
                        var $4768 = self.strx;
                        var $4769 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4769;
                    case 'Fm.Term.cse':
                        var $4770 = self.path;
                        var $4771 = self.expr;
                        var $4772 = self.name;
                        var $4773 = self.with;
                        var $4774 = self.cses;
                        var $4775 = self.moti;
                        var $4776 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4776;
                    case 'Fm.Term.ori':
                        var $4777 = self.orig;
                        var $4778 = self.expr;
                        var $4779 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4779;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Fm$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Fm$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4780 = self.name;
                        var $4781 = self.indx;
                        var $4782 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4782;
                    case 'Fm.Term.ref':
                        var $4783 = self.name;
                        var $4784 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4784;
                    case 'Fm.Term.typ':
                        var $4785 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4785;
                    case 'Fm.Term.all':
                        var $4786 = self.eras;
                        var $4787 = self.self;
                        var $4788 = self.name;
                        var $4789 = self.xtyp;
                        var $4790 = self.body;
                        var $4791 = Fm$SmartMotive$vals$(_expr$1, $4790(Fm$Term$typ)(Fm$Term$typ), _defs$3);
                        return $4791;
                    case 'Fm.Term.lam':
                        var $4792 = self.name;
                        var $4793 = self.body;
                        var $4794 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4794;
                    case 'Fm.Term.app':
                        var $4795 = self.func;
                        var $4796 = self.argm;
                        var $4797 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4797;
                    case 'Fm.Term.let':
                        var $4798 = self.name;
                        var $4799 = self.expr;
                        var $4800 = self.body;
                        var $4801 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4801;
                    case 'Fm.Term.def':
                        var $4802 = self.name;
                        var $4803 = self.expr;
                        var $4804 = self.body;
                        var $4805 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4805;
                    case 'Fm.Term.ann':
                        var $4806 = self.done;
                        var $4807 = self.term;
                        var $4808 = self.type;
                        var $4809 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4809;
                    case 'Fm.Term.gol':
                        var $4810 = self.name;
                        var $4811 = self.dref;
                        var $4812 = self.verb;
                        var $4813 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4813;
                    case 'Fm.Term.hol':
                        var $4814 = self.path;
                        var $4815 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4815;
                    case 'Fm.Term.nat':
                        var $4816 = self.natx;
                        var $4817 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4817;
                    case 'Fm.Term.chr':
                        var $4818 = self.chrx;
                        var $4819 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4819;
                    case 'Fm.Term.str':
                        var $4820 = self.strx;
                        var $4821 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4821;
                    case 'Fm.Term.cse':
                        var $4822 = self.path;
                        var $4823 = self.expr;
                        var $4824 = self.name;
                        var $4825 = self.with;
                        var $4826 = self.cses;
                        var $4827 = self.moti;
                        var $4828 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4828;
                    case 'Fm.Term.ori':
                        var $4829 = self.orig;
                        var $4830 = self.expr;
                        var $4831 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4831;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals = x0 => x1 => x2 => Fm$SmartMotive$vals$(x0, x1, x2);

    function Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Fm$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Fm$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4832 = self.name;
                        var $4833 = self.indx;
                        var $4834 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4834;
                    case 'Fm.Term.ref':
                        var $4835 = self.name;
                        var $4836 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4836;
                    case 'Fm.Term.typ':
                        var $4837 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4837;
                    case 'Fm.Term.all':
                        var $4838 = self.eras;
                        var $4839 = self.self;
                        var $4840 = self.name;
                        var $4841 = self.xtyp;
                        var $4842 = self.body;
                        var $4843 = Fm$SmartMotive$nams$cont$(_name$1, $4842(Fm$Term$ref$($4839))(Fm$Term$ref$($4840)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($4840, List$nil)))), _binds$3), _defs$4);
                        return $4843;
                    case 'Fm.Term.lam':
                        var $4844 = self.name;
                        var $4845 = self.body;
                        var $4846 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4846;
                    case 'Fm.Term.app':
                        var $4847 = self.func;
                        var $4848 = self.argm;
                        var $4849 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4849;
                    case 'Fm.Term.let':
                        var $4850 = self.name;
                        var $4851 = self.expr;
                        var $4852 = self.body;
                        var $4853 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4853;
                    case 'Fm.Term.def':
                        var $4854 = self.name;
                        var $4855 = self.expr;
                        var $4856 = self.body;
                        var $4857 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4857;
                    case 'Fm.Term.ann':
                        var $4858 = self.done;
                        var $4859 = self.term;
                        var $4860 = self.type;
                        var $4861 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4861;
                    case 'Fm.Term.gol':
                        var $4862 = self.name;
                        var $4863 = self.dref;
                        var $4864 = self.verb;
                        var $4865 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4865;
                    case 'Fm.Term.hol':
                        var $4866 = self.path;
                        var $4867 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4867;
                    case 'Fm.Term.nat':
                        var $4868 = self.natx;
                        var $4869 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4869;
                    case 'Fm.Term.chr':
                        var $4870 = self.chrx;
                        var $4871 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4871;
                    case 'Fm.Term.str':
                        var $4872 = self.strx;
                        var $4873 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4873;
                    case 'Fm.Term.cse':
                        var $4874 = self.path;
                        var $4875 = self.expr;
                        var $4876 = self.name;
                        var $4877 = self.with;
                        var $4878 = self.cses;
                        var $4879 = self.moti;
                        var $4880 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4880;
                    case 'Fm.Term.ori':
                        var $4881 = self.orig;
                        var $4882 = self.expr;
                        var $4883 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4883;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Fm$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Fm.Term.var':
                var $4885 = self.name;
                var $4886 = self.indx;
                var $4887 = List$nil;
                var $4884 = $4887;
                break;
            case 'Fm.Term.ref':
                var $4888 = self.name;
                var $4889 = List$nil;
                var $4884 = $4889;
                break;
            case 'Fm.Term.typ':
                var $4890 = List$nil;
                var $4884 = $4890;
                break;
            case 'Fm.Term.all':
                var $4891 = self.eras;
                var $4892 = self.self;
                var $4893 = self.name;
                var $4894 = self.xtyp;
                var $4895 = self.body;
                var $4896 = Fm$SmartMotive$nams$cont$(_name$1, $4894, List$nil, _defs$3);
                var $4884 = $4896;
                break;
            case 'Fm.Term.lam':
                var $4897 = self.name;
                var $4898 = self.body;
                var $4899 = List$nil;
                var $4884 = $4899;
                break;
            case 'Fm.Term.app':
                var $4900 = self.func;
                var $4901 = self.argm;
                var $4902 = List$nil;
                var $4884 = $4902;
                break;
            case 'Fm.Term.let':
                var $4903 = self.name;
                var $4904 = self.expr;
                var $4905 = self.body;
                var $4906 = List$nil;
                var $4884 = $4906;
                break;
            case 'Fm.Term.def':
                var $4907 = self.name;
                var $4908 = self.expr;
                var $4909 = self.body;
                var $4910 = List$nil;
                var $4884 = $4910;
                break;
            case 'Fm.Term.ann':
                var $4911 = self.done;
                var $4912 = self.term;
                var $4913 = self.type;
                var $4914 = List$nil;
                var $4884 = $4914;
                break;
            case 'Fm.Term.gol':
                var $4915 = self.name;
                var $4916 = self.dref;
                var $4917 = self.verb;
                var $4918 = List$nil;
                var $4884 = $4918;
                break;
            case 'Fm.Term.hol':
                var $4919 = self.path;
                var $4920 = List$nil;
                var $4884 = $4920;
                break;
            case 'Fm.Term.nat':
                var $4921 = self.natx;
                var $4922 = List$nil;
                var $4884 = $4922;
                break;
            case 'Fm.Term.chr':
                var $4923 = self.chrx;
                var $4924 = List$nil;
                var $4884 = $4924;
                break;
            case 'Fm.Term.str':
                var $4925 = self.strx;
                var $4926 = List$nil;
                var $4884 = $4926;
                break;
            case 'Fm.Term.cse':
                var $4927 = self.path;
                var $4928 = self.expr;
                var $4929 = self.name;
                var $4930 = self.with;
                var $4931 = self.cses;
                var $4932 = self.moti;
                var $4933 = List$nil;
                var $4884 = $4933;
                break;
            case 'Fm.Term.ori':
                var $4934 = self.orig;
                var $4935 = self.expr;
                var $4936 = List$nil;
                var $4884 = $4936;
                break;
        };
        return $4884;
    };
    const Fm$SmartMotive$nams = x0 => x1 => x2 => Fm$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.nil':
                var $4938 = List$nil;
                var $4937 = $4938;
                break;
            case 'List.cons':
                var $4939 = self.head;
                var $4940 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.nil':
                        var $4942 = List$nil;
                        var $4941 = $4942;
                        break;
                    case 'List.cons':
                        var $4943 = self.head;
                        var $4944 = self.tail;
                        var $4945 = List$cons$(Pair$new$($4939, $4943), List$zip$($4940, $4944));
                        var $4941 = $4945;
                        break;
                };
                var $4937 = $4941;
                break;
        };
        return $4937;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Fm$Term$serialize$name$(_name$1) {
        var $4946 = (fm_name_to_bits(_name$1));
        return $4946;
    };
    const Fm$Term$serialize$name = x0 => Fm$Term$serialize$name$(x0);

    function Fm$Term$serialize$(_term$1, _depth$2, _init$3, _x$4) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $4948 = self.name;
                var $4949 = self.indx;
                var self = ($4949 >= _init$3);
                if (self) {
                    var _name$7 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $4949 <= 0n ? 0n : _depth$2 - $4949)))));
                    var $4951 = (((_name$7(_x$4) + '1') + '0') + '0');
                    var $4950 = $4951;
                } else {
                    var _name$7 = a1 => (a1 + (nat_to_bits($4949)));
                    var $4952 = (((_name$7(_x$4) + '0') + '1') + '0');
                    var $4950 = $4952;
                };
                var $4947 = $4950;
                break;
            case 'Fm.Term.ref':
                var $4953 = self.name;
                var _name$6 = a1 => (a1 + Fm$Term$serialize$name$($4953));
                var $4954 = (((_name$6(_x$4) + '0') + '0') + '0');
                var $4947 = $4954;
                break;
            case 'Fm.Term.typ':
                var $4955 = (((_x$4 + '1') + '1') + '0');
                var $4947 = $4955;
                break;
            case 'Fm.Term.all':
                var $4956 = self.eras;
                var $4957 = self.self;
                var $4958 = self.name;
                var $4959 = self.xtyp;
                var $4960 = self.body;
                var self = $4956;
                if (self) {
                    var $4962 = Bits$i;
                    var _eras$10 = $4962;
                } else {
                    var $4963 = Bits$o;
                    var _eras$10 = $4963;
                };
                var _self$11 = a1 => (a1 + (fm_name_to_bits($4957)));
                var _xtyp$12 = Fm$Term$serialize($4959)(_depth$2)(_init$3);
                var _body$13 = Fm$Term$serialize($4960(Fm$Term$var$($4957, _depth$2))(Fm$Term$var$($4958, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3);
                var $4961 = (((_eras$10(_self$11(_xtyp$12(_body$13(_x$4)))) + '0') + '0') + '1');
                var $4947 = $4961;
                break;
            case 'Fm.Term.lam':
                var $4964 = self.name;
                var $4965 = self.body;
                var _body$7 = Fm$Term$serialize($4965(Fm$Term$var$($4964, _depth$2)))(Nat$succ$(_depth$2))(_init$3);
                var $4966 = (((_body$7(_x$4) + '1') + '0') + '1');
                var $4947 = $4966;
                break;
            case 'Fm.Term.app':
                var $4967 = self.func;
                var $4968 = self.argm;
                var _func$7 = Fm$Term$serialize($4967)(_depth$2)(_init$3);
                var _argm$8 = Fm$Term$serialize($4968)(_depth$2)(_init$3);
                var $4969 = (((_func$7(_argm$8(_x$4)) + '0') + '1') + '1');
                var $4947 = $4969;
                break;
            case 'Fm.Term.let':
                var $4970 = self.name;
                var $4971 = self.expr;
                var $4972 = self.body;
                var _expr$8 = Fm$Term$serialize($4971)(_depth$2)(_init$3);
                var _body$9 = Fm$Term$serialize($4972(Fm$Term$var$($4970, _depth$2)))(Nat$succ$(_depth$2))(_init$3);
                var $4973 = (((_expr$8(_body$9(_x$4)) + '1') + '1') + '1');
                var $4947 = $4973;
                break;
            case 'Fm.Term.def':
                var $4974 = self.name;
                var $4975 = self.expr;
                var $4976 = self.body;
                var $4977 = Fm$Term$serialize$($4976($4975), _depth$2, _init$3, _x$4);
                var $4947 = $4977;
                break;
            case 'Fm.Term.ann':
                var $4978 = self.done;
                var $4979 = self.term;
                var $4980 = self.type;
                var $4981 = Fm$Term$serialize$($4979, _depth$2, _init$3, _x$4);
                var $4947 = $4981;
                break;
            case 'Fm.Term.gol':
                var $4982 = self.name;
                var $4983 = self.dref;
                var $4984 = self.verb;
                var _name$8 = a1 => (a1 + (fm_name_to_bits($4982)));
                var $4985 = (((_name$8(_x$4) + '0') + '0') + '0');
                var $4947 = $4985;
                break;
            case 'Fm.Term.hol':
                var $4986 = self.path;
                var $4987 = _x$4;
                var $4947 = $4987;
                break;
            case 'Fm.Term.nat':
                var $4988 = self.natx;
                var $4989 = Fm$Term$serialize$(Fm$Term$unroll_nat$($4988), _depth$2, _init$3, _x$4);
                var $4947 = $4989;
                break;
            case 'Fm.Term.chr':
                var $4990 = self.chrx;
                var $4991 = Fm$Term$serialize$(Fm$Term$unroll_chr$($4990), _depth$2, _init$3, _x$4);
                var $4947 = $4991;
                break;
            case 'Fm.Term.str':
                var $4992 = self.strx;
                var $4993 = Fm$Term$serialize$(Fm$Term$unroll_str$($4992), _depth$2, _init$3, _x$4);
                var $4947 = $4993;
                break;
            case 'Fm.Term.cse':
                var $4994 = self.path;
                var $4995 = self.expr;
                var $4996 = self.name;
                var $4997 = self.with;
                var $4998 = self.cses;
                var $4999 = self.moti;
                var $5000 = _x$4;
                var $4947 = $5000;
                break;
            case 'Fm.Term.ori':
                var $5001 = self.orig;
                var $5002 = self.expr;
                var $5003 = Fm$Term$serialize$($5002, _depth$2, _init$3, _x$4);
                var $4947 = $5003;
                break;
        };
        return $4947;
    };
    const Fm$Term$serialize = x0 => x1 => x2 => x3 => Fm$Term$serialize$(x0, x1, x2, x3);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Fm$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Fm$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$e);
        var _bh$5 = Fm$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$e);
        var $5004 = (_bh$5 === _ah$4);
        return $5004;
    };
    const Fm$Term$identical = x0 => x1 => x2 => Fm$Term$identical$(x0, x1, x2);

    function Fm$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Fm$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5006 = _to$3;
            var $5005 = $5006;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Fm.Term.var':
                    var $5008 = self.name;
                    var $5009 = self.indx;
                    var $5010 = Fm$Term$var$($5008, $5009);
                    var $5007 = $5010;
                    break;
                case 'Fm.Term.ref':
                    var $5011 = self.name;
                    var $5012 = Fm$Term$ref$($5011);
                    var $5007 = $5012;
                    break;
                case 'Fm.Term.typ':
                    var $5013 = Fm$Term$typ;
                    var $5007 = $5013;
                    break;
                case 'Fm.Term.all':
                    var $5014 = self.eras;
                    var $5015 = self.self;
                    var $5016 = self.name;
                    var $5017 = self.xtyp;
                    var $5018 = self.body;
                    var _xtyp$10 = Fm$SmartMotive$replace$($5017, _from$2, _to$3, _lv$4);
                    var _body$11 = $5018(Fm$Term$ref$($5015))(Fm$Term$ref$($5016));
                    var _body$12 = Fm$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5019 = Fm$Term$all$($5014, $5015, $5016, _xtyp$10, (_s$13 => _x$14 => {
                        var $5020 = _body$12;
                        return $5020;
                    }));
                    var $5007 = $5019;
                    break;
                case 'Fm.Term.lam':
                    var $5021 = self.name;
                    var $5022 = self.body;
                    var _body$7 = $5022(Fm$Term$ref$($5021));
                    var _body$8 = Fm$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5023 = Fm$Term$lam$($5021, (_x$9 => {
                        var $5024 = _body$8;
                        return $5024;
                    }));
                    var $5007 = $5023;
                    break;
                case 'Fm.Term.app':
                    var $5025 = self.func;
                    var $5026 = self.argm;
                    var _func$7 = Fm$SmartMotive$replace$($5025, _from$2, _to$3, _lv$4);
                    var _argm$8 = Fm$SmartMotive$replace$($5026, _from$2, _to$3, _lv$4);
                    var $5027 = Fm$Term$app$(_func$7, _argm$8);
                    var $5007 = $5027;
                    break;
                case 'Fm.Term.let':
                    var $5028 = self.name;
                    var $5029 = self.expr;
                    var $5030 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5029, _from$2, _to$3, _lv$4);
                    var _body$9 = $5030(Fm$Term$ref$($5028));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5031 = Fm$Term$let$($5028, _expr$8, (_x$11 => {
                        var $5032 = _body$10;
                        return $5032;
                    }));
                    var $5007 = $5031;
                    break;
                case 'Fm.Term.def':
                    var $5033 = self.name;
                    var $5034 = self.expr;
                    var $5035 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5034, _from$2, _to$3, _lv$4);
                    var _body$9 = $5035(Fm$Term$ref$($5033));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5036 = Fm$Term$def$($5033, _expr$8, (_x$11 => {
                        var $5037 = _body$10;
                        return $5037;
                    }));
                    var $5007 = $5036;
                    break;
                case 'Fm.Term.ann':
                    var $5038 = self.done;
                    var $5039 = self.term;
                    var $5040 = self.type;
                    var _term$8 = Fm$SmartMotive$replace$($5039, _from$2, _to$3, _lv$4);
                    var _type$9 = Fm$SmartMotive$replace$($5040, _from$2, _to$3, _lv$4);
                    var $5041 = Fm$Term$ann$($5038, _term$8, _type$9);
                    var $5007 = $5041;
                    break;
                case 'Fm.Term.gol':
                    var $5042 = self.name;
                    var $5043 = self.dref;
                    var $5044 = self.verb;
                    var $5045 = _term$1;
                    var $5007 = $5045;
                    break;
                case 'Fm.Term.hol':
                    var $5046 = self.path;
                    var $5047 = _term$1;
                    var $5007 = $5047;
                    break;
                case 'Fm.Term.nat':
                    var $5048 = self.natx;
                    var $5049 = _term$1;
                    var $5007 = $5049;
                    break;
                case 'Fm.Term.chr':
                    var $5050 = self.chrx;
                    var $5051 = _term$1;
                    var $5007 = $5051;
                    break;
                case 'Fm.Term.str':
                    var $5052 = self.strx;
                    var $5053 = _term$1;
                    var $5007 = $5053;
                    break;
                case 'Fm.Term.cse':
                    var $5054 = self.path;
                    var $5055 = self.expr;
                    var $5056 = self.name;
                    var $5057 = self.with;
                    var $5058 = self.cses;
                    var $5059 = self.moti;
                    var $5060 = _term$1;
                    var $5007 = $5060;
                    break;
                case 'Fm.Term.ori':
                    var $5061 = self.orig;
                    var $5062 = self.expr;
                    var $5063 = Fm$SmartMotive$replace$($5062, _from$2, _to$3, _lv$4);
                    var $5007 = $5063;
                    break;
            };
            var $5005 = $5007;
        };
        return $5005;
    };
    const Fm$SmartMotive$replace = x0 => x1 => x2 => x3 => Fm$SmartMotive$replace$(x0, x1, x2, x3);

    function Fm$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _lv$5, _defs$6) {
        var _vals$7 = Fm$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Fm$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var _moti$10 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5066 = self.fst;
                    var $5067 = self.snd;
                    var $5068 = Fm$SmartMotive$replace$(_moti$11, $5067, Fm$Term$ref$($5066), _lv$5);
                    var $5065 = $5068;
                    break;
            };
            return $5065;
        }));
        var $5064 = _moti$10;
        return $5064;
    };
    const Fm$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Fm$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Fm$Term$desugar_cse$motive$(_wyth$1, _moti$2) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.nil':
                var $5070 = _moti$2;
                var $5069 = $5070;
                break;
            case 'List.cons':
                var $5071 = self.head;
                var $5072 = self.tail;
                var self = $5071;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $5074 = self.file;
                        var $5075 = self.code;
                        var $5076 = self.name;
                        var $5077 = self.term;
                        var $5078 = self.type;
                        var $5079 = self.stat;
                        var $5080 = Fm$Term$all$(Bool$false, "", $5076, $5078, (_s$11 => _x$12 => {
                            var $5081 = Fm$Term$desugar_cse$motive$($5072, _moti$2);
                            return $5081;
                        }));
                        var $5073 = $5080;
                        break;
                };
                var $5069 = $5073;
                break;
        };
        return $5069;
    };
    const Fm$Term$desugar_cse$motive = x0 => x1 => Fm$Term$desugar_cse$motive$(x0, x1);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5083 = Bool$true;
            var $5082 = $5083;
        } else {
            var $5084 = self.charCodeAt(0);
            var $5085 = self.slice(1);
            var $5086 = Bool$false;
            var $5082 = $5086;
        };
        return $5082;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Fm$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Fm.Term.var':
                var $5088 = self.name;
                var $5089 = self.indx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5091 = _body$4;
                        var $5090 = $5091;
                        break;
                    case 'List.cons':
                        var $5092 = self.head;
                        var $5093 = self.tail;
                        var self = $5092;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5095 = self.file;
                                var $5096 = self.code;
                                var $5097 = self.name;
                                var $5098 = self.term;
                                var $5099 = self.type;
                                var $5100 = self.stat;
                                var $5101 = Fm$Term$lam$($5097, (_x$16 => {
                                    var $5102 = Fm$Term$desugar_cse$argument$(_name$1, $5093, _type$3, _body$4, _defs$5);
                                    return $5102;
                                }));
                                var $5094 = $5101;
                                break;
                        };
                        var $5090 = $5094;
                        break;
                };
                var $5087 = $5090;
                break;
            case 'Fm.Term.ref':
                var $5103 = self.name;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5105 = _body$4;
                        var $5104 = $5105;
                        break;
                    case 'List.cons':
                        var $5106 = self.head;
                        var $5107 = self.tail;
                        var self = $5106;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5109 = self.file;
                                var $5110 = self.code;
                                var $5111 = self.name;
                                var $5112 = self.term;
                                var $5113 = self.type;
                                var $5114 = self.stat;
                                var $5115 = Fm$Term$lam$($5111, (_x$15 => {
                                    var $5116 = Fm$Term$desugar_cse$argument$(_name$1, $5107, _type$3, _body$4, _defs$5);
                                    return $5116;
                                }));
                                var $5108 = $5115;
                                break;
                        };
                        var $5104 = $5108;
                        break;
                };
                var $5087 = $5104;
                break;
            case 'Fm.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5118 = _body$4;
                        var $5117 = $5118;
                        break;
                    case 'List.cons':
                        var $5119 = self.head;
                        var $5120 = self.tail;
                        var self = $5119;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5122 = self.file;
                                var $5123 = self.code;
                                var $5124 = self.name;
                                var $5125 = self.term;
                                var $5126 = self.type;
                                var $5127 = self.stat;
                                var $5128 = Fm$Term$lam$($5124, (_x$14 => {
                                    var $5129 = Fm$Term$desugar_cse$argument$(_name$1, $5120, _type$3, _body$4, _defs$5);
                                    return $5129;
                                }));
                                var $5121 = $5128;
                                break;
                        };
                        var $5117 = $5121;
                        break;
                };
                var $5087 = $5117;
                break;
            case 'Fm.Term.all':
                var $5130 = self.eras;
                var $5131 = self.self;
                var $5132 = self.name;
                var $5133 = self.xtyp;
                var $5134 = self.body;
                var $5135 = Fm$Term$lam$((() => {
                    var self = String$is_empty$($5132);
                    if (self) {
                        var $5136 = _name$1;
                        return $5136;
                    } else {
                        var $5137 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5132, List$nil))));
                        return $5137;
                    };
                })(), (_x$11 => {
                    var $5138 = Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, $5134(Fm$Term$var$($5131, 0n))(Fm$Term$var$($5132, 0n)), _body$4, _defs$5);
                    return $5138;
                }));
                var $5087 = $5135;
                break;
            case 'Fm.Term.lam':
                var $5139 = self.name;
                var $5140 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5142 = _body$4;
                        var $5141 = $5142;
                        break;
                    case 'List.cons':
                        var $5143 = self.head;
                        var $5144 = self.tail;
                        var self = $5143;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5146 = self.file;
                                var $5147 = self.code;
                                var $5148 = self.name;
                                var $5149 = self.term;
                                var $5150 = self.type;
                                var $5151 = self.stat;
                                var $5152 = Fm$Term$lam$($5148, (_x$16 => {
                                    var $5153 = Fm$Term$desugar_cse$argument$(_name$1, $5144, _type$3, _body$4, _defs$5);
                                    return $5153;
                                }));
                                var $5145 = $5152;
                                break;
                        };
                        var $5141 = $5145;
                        break;
                };
                var $5087 = $5141;
                break;
            case 'Fm.Term.app':
                var $5154 = self.func;
                var $5155 = self.argm;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5157 = _body$4;
                        var $5156 = $5157;
                        break;
                    case 'List.cons':
                        var $5158 = self.head;
                        var $5159 = self.tail;
                        var self = $5158;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5161 = self.file;
                                var $5162 = self.code;
                                var $5163 = self.name;
                                var $5164 = self.term;
                                var $5165 = self.type;
                                var $5166 = self.stat;
                                var $5167 = Fm$Term$lam$($5163, (_x$16 => {
                                    var $5168 = Fm$Term$desugar_cse$argument$(_name$1, $5159, _type$3, _body$4, _defs$5);
                                    return $5168;
                                }));
                                var $5160 = $5167;
                                break;
                        };
                        var $5156 = $5160;
                        break;
                };
                var $5087 = $5156;
                break;
            case 'Fm.Term.let':
                var $5169 = self.name;
                var $5170 = self.expr;
                var $5171 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5173 = _body$4;
                        var $5172 = $5173;
                        break;
                    case 'List.cons':
                        var $5174 = self.head;
                        var $5175 = self.tail;
                        var self = $5174;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5177 = self.file;
                                var $5178 = self.code;
                                var $5179 = self.name;
                                var $5180 = self.term;
                                var $5181 = self.type;
                                var $5182 = self.stat;
                                var $5183 = Fm$Term$lam$($5179, (_x$17 => {
                                    var $5184 = Fm$Term$desugar_cse$argument$(_name$1, $5175, _type$3, _body$4, _defs$5);
                                    return $5184;
                                }));
                                var $5176 = $5183;
                                break;
                        };
                        var $5172 = $5176;
                        break;
                };
                var $5087 = $5172;
                break;
            case 'Fm.Term.def':
                var $5185 = self.name;
                var $5186 = self.expr;
                var $5187 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5189 = _body$4;
                        var $5188 = $5189;
                        break;
                    case 'List.cons':
                        var $5190 = self.head;
                        var $5191 = self.tail;
                        var self = $5190;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5193 = self.file;
                                var $5194 = self.code;
                                var $5195 = self.name;
                                var $5196 = self.term;
                                var $5197 = self.type;
                                var $5198 = self.stat;
                                var $5199 = Fm$Term$lam$($5195, (_x$17 => {
                                    var $5200 = Fm$Term$desugar_cse$argument$(_name$1, $5191, _type$3, _body$4, _defs$5);
                                    return $5200;
                                }));
                                var $5192 = $5199;
                                break;
                        };
                        var $5188 = $5192;
                        break;
                };
                var $5087 = $5188;
                break;
            case 'Fm.Term.ann':
                var $5201 = self.done;
                var $5202 = self.term;
                var $5203 = self.type;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5205 = _body$4;
                        var $5204 = $5205;
                        break;
                    case 'List.cons':
                        var $5206 = self.head;
                        var $5207 = self.tail;
                        var self = $5206;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5209 = self.file;
                                var $5210 = self.code;
                                var $5211 = self.name;
                                var $5212 = self.term;
                                var $5213 = self.type;
                                var $5214 = self.stat;
                                var $5215 = Fm$Term$lam$($5211, (_x$17 => {
                                    var $5216 = Fm$Term$desugar_cse$argument$(_name$1, $5207, _type$3, _body$4, _defs$5);
                                    return $5216;
                                }));
                                var $5208 = $5215;
                                break;
                        };
                        var $5204 = $5208;
                        break;
                };
                var $5087 = $5204;
                break;
            case 'Fm.Term.gol':
                var $5217 = self.name;
                var $5218 = self.dref;
                var $5219 = self.verb;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5221 = _body$4;
                        var $5220 = $5221;
                        break;
                    case 'List.cons':
                        var $5222 = self.head;
                        var $5223 = self.tail;
                        var self = $5222;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5225 = self.file;
                                var $5226 = self.code;
                                var $5227 = self.name;
                                var $5228 = self.term;
                                var $5229 = self.type;
                                var $5230 = self.stat;
                                var $5231 = Fm$Term$lam$($5227, (_x$17 => {
                                    var $5232 = Fm$Term$desugar_cse$argument$(_name$1, $5223, _type$3, _body$4, _defs$5);
                                    return $5232;
                                }));
                                var $5224 = $5231;
                                break;
                        };
                        var $5220 = $5224;
                        break;
                };
                var $5087 = $5220;
                break;
            case 'Fm.Term.hol':
                var $5233 = self.path;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5235 = _body$4;
                        var $5234 = $5235;
                        break;
                    case 'List.cons':
                        var $5236 = self.head;
                        var $5237 = self.tail;
                        var self = $5236;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5239 = self.file;
                                var $5240 = self.code;
                                var $5241 = self.name;
                                var $5242 = self.term;
                                var $5243 = self.type;
                                var $5244 = self.stat;
                                var $5245 = Fm$Term$lam$($5241, (_x$15 => {
                                    var $5246 = Fm$Term$desugar_cse$argument$(_name$1, $5237, _type$3, _body$4, _defs$5);
                                    return $5246;
                                }));
                                var $5238 = $5245;
                                break;
                        };
                        var $5234 = $5238;
                        break;
                };
                var $5087 = $5234;
                break;
            case 'Fm.Term.nat':
                var $5247 = self.natx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5249 = _body$4;
                        var $5248 = $5249;
                        break;
                    case 'List.cons':
                        var $5250 = self.head;
                        var $5251 = self.tail;
                        var self = $5250;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5253 = self.file;
                                var $5254 = self.code;
                                var $5255 = self.name;
                                var $5256 = self.term;
                                var $5257 = self.type;
                                var $5258 = self.stat;
                                var $5259 = Fm$Term$lam$($5255, (_x$15 => {
                                    var $5260 = Fm$Term$desugar_cse$argument$(_name$1, $5251, _type$3, _body$4, _defs$5);
                                    return $5260;
                                }));
                                var $5252 = $5259;
                                break;
                        };
                        var $5248 = $5252;
                        break;
                };
                var $5087 = $5248;
                break;
            case 'Fm.Term.chr':
                var $5261 = self.chrx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5263 = _body$4;
                        var $5262 = $5263;
                        break;
                    case 'List.cons':
                        var $5264 = self.head;
                        var $5265 = self.tail;
                        var self = $5264;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5267 = self.file;
                                var $5268 = self.code;
                                var $5269 = self.name;
                                var $5270 = self.term;
                                var $5271 = self.type;
                                var $5272 = self.stat;
                                var $5273 = Fm$Term$lam$($5269, (_x$15 => {
                                    var $5274 = Fm$Term$desugar_cse$argument$(_name$1, $5265, _type$3, _body$4, _defs$5);
                                    return $5274;
                                }));
                                var $5266 = $5273;
                                break;
                        };
                        var $5262 = $5266;
                        break;
                };
                var $5087 = $5262;
                break;
            case 'Fm.Term.str':
                var $5275 = self.strx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5277 = _body$4;
                        var $5276 = $5277;
                        break;
                    case 'List.cons':
                        var $5278 = self.head;
                        var $5279 = self.tail;
                        var self = $5278;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5281 = self.file;
                                var $5282 = self.code;
                                var $5283 = self.name;
                                var $5284 = self.term;
                                var $5285 = self.type;
                                var $5286 = self.stat;
                                var $5287 = Fm$Term$lam$($5283, (_x$15 => {
                                    var $5288 = Fm$Term$desugar_cse$argument$(_name$1, $5279, _type$3, _body$4, _defs$5);
                                    return $5288;
                                }));
                                var $5280 = $5287;
                                break;
                        };
                        var $5276 = $5280;
                        break;
                };
                var $5087 = $5276;
                break;
            case 'Fm.Term.cse':
                var $5289 = self.path;
                var $5290 = self.expr;
                var $5291 = self.name;
                var $5292 = self.with;
                var $5293 = self.cses;
                var $5294 = self.moti;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5296 = _body$4;
                        var $5295 = $5296;
                        break;
                    case 'List.cons':
                        var $5297 = self.head;
                        var $5298 = self.tail;
                        var self = $5297;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5300 = self.file;
                                var $5301 = self.code;
                                var $5302 = self.name;
                                var $5303 = self.term;
                                var $5304 = self.type;
                                var $5305 = self.stat;
                                var $5306 = Fm$Term$lam$($5302, (_x$20 => {
                                    var $5307 = Fm$Term$desugar_cse$argument$(_name$1, $5298, _type$3, _body$4, _defs$5);
                                    return $5307;
                                }));
                                var $5299 = $5306;
                                break;
                        };
                        var $5295 = $5299;
                        break;
                };
                var $5087 = $5295;
                break;
            case 'Fm.Term.ori':
                var $5308 = self.orig;
                var $5309 = self.expr;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5311 = _body$4;
                        var $5310 = $5311;
                        break;
                    case 'List.cons':
                        var $5312 = self.head;
                        var $5313 = self.tail;
                        var self = $5312;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5315 = self.file;
                                var $5316 = self.code;
                                var $5317 = self.name;
                                var $5318 = self.term;
                                var $5319 = self.type;
                                var $5320 = self.stat;
                                var $5321 = Fm$Term$lam$($5317, (_x$16 => {
                                    var $5322 = Fm$Term$desugar_cse$argument$(_name$1, $5313, _type$3, _body$4, _defs$5);
                                    return $5322;
                                }));
                                var $5314 = $5321;
                                break;
                        };
                        var $5310 = $5314;
                        break;
                };
                var $5087 = $5310;
                break;
        };
        return $5087;
    };
    const Fm$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Fm$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.none':
                var $5324 = _b$3;
                var $5323 = $5324;
                break;
            case 'Maybe.some':
                var $5325 = self.value;
                var $5326 = Maybe$some$($5325);
                var $5323 = $5326;
                break;
        };
        return $5323;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Fm$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Fm$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5327 = self.name;
                        var $5328 = self.indx;
                        var _expr$10 = (() => {
                            var $5331 = _expr$1;
                            var $5332 = _wyth$3;
                            let _expr$11 = $5331;
                            let _defn$10;
                            while ($5332._ === 'List.cons') {
                                _defn$10 = $5332.head;
                                var $5331 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5333 = self.file;
                                            var $5334 = self.code;
                                            var $5335 = self.name;
                                            var $5336 = self.term;
                                            var $5337 = self.type;
                                            var $5338 = self.stat;
                                            var $5339 = $5336;
                                            return $5339;
                                    };
                                })());
                                _expr$11 = $5331;
                                $5332 = $5332.tail;
                            }
                            return _expr$11;
                        })();
                        var $5329 = _expr$10;
                        return $5329;
                    case 'Fm.Term.ref':
                        var $5340 = self.name;
                        var _expr$9 = (() => {
                            var $5343 = _expr$1;
                            var $5344 = _wyth$3;
                            let _expr$10 = $5343;
                            let _defn$9;
                            while ($5344._ === 'List.cons') {
                                _defn$9 = $5344.head;
                                var $5343 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5345 = self.file;
                                            var $5346 = self.code;
                                            var $5347 = self.name;
                                            var $5348 = self.term;
                                            var $5349 = self.type;
                                            var $5350 = self.stat;
                                            var $5351 = $5348;
                                            return $5351;
                                    };
                                })());
                                _expr$10 = $5343;
                                $5344 = $5344.tail;
                            }
                            return _expr$10;
                        })();
                        var $5341 = _expr$9;
                        return $5341;
                    case 'Fm.Term.typ':
                        var _expr$8 = (() => {
                            var $5354 = _expr$1;
                            var $5355 = _wyth$3;
                            let _expr$9 = $5354;
                            let _defn$8;
                            while ($5355._ === 'List.cons') {
                                _defn$8 = $5355.head;
                                var $5354 = Fm$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5356 = self.file;
                                            var $5357 = self.code;
                                            var $5358 = self.name;
                                            var $5359 = self.term;
                                            var $5360 = self.type;
                                            var $5361 = self.stat;
                                            var $5362 = $5359;
                                            return $5362;
                                    };
                                })());
                                _expr$9 = $5354;
                                $5355 = $5355.tail;
                            }
                            return _expr$9;
                        })();
                        var $5352 = _expr$8;
                        return $5352;
                    case 'Fm.Term.all':
                        var $5363 = self.eras;
                        var $5364 = self.self;
                        var $5365 = self.name;
                        var $5366 = self.xtyp;
                        var $5367 = self.body;
                        var _got$13 = Maybe$or$(Fm$get$($5365, _cses$4), Fm$get$("_", _cses$4));
                        var self = _got$13;
                        switch (self._) {
                            case 'Maybe.none':
                                var _expr$14 = (() => {
                                    var $5371 = _expr$1;
                                    var $5372 = _wyth$3;
                                    let _expr$15 = $5371;
                                    let _defn$14;
                                    while ($5372._ === 'List.cons') {
                                        _defn$14 = $5372.head;
                                        var self = _defn$14;
                                        switch (self._) {
                                            case 'Fm.Def.new':
                                                var $5373 = self.file;
                                                var $5374 = self.code;
                                                var $5375 = self.name;
                                                var $5376 = self.term;
                                                var $5377 = self.type;
                                                var $5378 = self.stat;
                                                var $5379 = Fm$Term$app$(_expr$15, $5376);
                                                var $5371 = $5379;
                                                break;
                                        };
                                        _expr$15 = $5371;
                                        $5372 = $5372.tail;
                                    }
                                    return _expr$15;
                                })();
                                var $5369 = _expr$14;
                                var $5368 = $5369;
                                break;
                            case 'Maybe.some':
                                var $5380 = self.value;
                                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, _wyth$3, $5366, $5380, _defs$6);
                                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                                var _type$17 = $5367(Fm$Term$var$($5364, 0n))(Fm$Term$var$($5365, 0n));
                                var $5381 = Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                                var $5368 = $5381;
                                break;
                        };
                        return $5368;
                    case 'Fm.Term.lam':
                        var $5382 = self.name;
                        var $5383 = self.body;
                        var _expr$10 = (() => {
                            var $5386 = _expr$1;
                            var $5387 = _wyth$3;
                            let _expr$11 = $5386;
                            let _defn$10;
                            while ($5387._ === 'List.cons') {
                                _defn$10 = $5387.head;
                                var $5386 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5388 = self.file;
                                            var $5389 = self.code;
                                            var $5390 = self.name;
                                            var $5391 = self.term;
                                            var $5392 = self.type;
                                            var $5393 = self.stat;
                                            var $5394 = $5391;
                                            return $5394;
                                    };
                                })());
                                _expr$11 = $5386;
                                $5387 = $5387.tail;
                            }
                            return _expr$11;
                        })();
                        var $5384 = _expr$10;
                        return $5384;
                    case 'Fm.Term.app':
                        var $5395 = self.func;
                        var $5396 = self.argm;
                        var _expr$10 = (() => {
                            var $5399 = _expr$1;
                            var $5400 = _wyth$3;
                            let _expr$11 = $5399;
                            let _defn$10;
                            while ($5400._ === 'List.cons') {
                                _defn$10 = $5400.head;
                                var $5399 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5401 = self.file;
                                            var $5402 = self.code;
                                            var $5403 = self.name;
                                            var $5404 = self.term;
                                            var $5405 = self.type;
                                            var $5406 = self.stat;
                                            var $5407 = $5404;
                                            return $5407;
                                    };
                                })());
                                _expr$11 = $5399;
                                $5400 = $5400.tail;
                            }
                            return _expr$11;
                        })();
                        var $5397 = _expr$10;
                        return $5397;
                    case 'Fm.Term.let':
                        var $5408 = self.name;
                        var $5409 = self.expr;
                        var $5410 = self.body;
                        var _expr$11 = (() => {
                            var $5413 = _expr$1;
                            var $5414 = _wyth$3;
                            let _expr$12 = $5413;
                            let _defn$11;
                            while ($5414._ === 'List.cons') {
                                _defn$11 = $5414.head;
                                var $5413 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5415 = self.file;
                                            var $5416 = self.code;
                                            var $5417 = self.name;
                                            var $5418 = self.term;
                                            var $5419 = self.type;
                                            var $5420 = self.stat;
                                            var $5421 = $5418;
                                            return $5421;
                                    };
                                })());
                                _expr$12 = $5413;
                                $5414 = $5414.tail;
                            }
                            return _expr$12;
                        })();
                        var $5411 = _expr$11;
                        return $5411;
                    case 'Fm.Term.def':
                        var $5422 = self.name;
                        var $5423 = self.expr;
                        var $5424 = self.body;
                        var _expr$11 = (() => {
                            var $5427 = _expr$1;
                            var $5428 = _wyth$3;
                            let _expr$12 = $5427;
                            let _defn$11;
                            while ($5428._ === 'List.cons') {
                                _defn$11 = $5428.head;
                                var $5427 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5429 = self.file;
                                            var $5430 = self.code;
                                            var $5431 = self.name;
                                            var $5432 = self.term;
                                            var $5433 = self.type;
                                            var $5434 = self.stat;
                                            var $5435 = $5432;
                                            return $5435;
                                    };
                                })());
                                _expr$12 = $5427;
                                $5428 = $5428.tail;
                            }
                            return _expr$12;
                        })();
                        var $5425 = _expr$11;
                        return $5425;
                    case 'Fm.Term.ann':
                        var $5436 = self.done;
                        var $5437 = self.term;
                        var $5438 = self.type;
                        var _expr$11 = (() => {
                            var $5441 = _expr$1;
                            var $5442 = _wyth$3;
                            let _expr$12 = $5441;
                            let _defn$11;
                            while ($5442._ === 'List.cons') {
                                _defn$11 = $5442.head;
                                var $5441 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5443 = self.file;
                                            var $5444 = self.code;
                                            var $5445 = self.name;
                                            var $5446 = self.term;
                                            var $5447 = self.type;
                                            var $5448 = self.stat;
                                            var $5449 = $5446;
                                            return $5449;
                                    };
                                })());
                                _expr$12 = $5441;
                                $5442 = $5442.tail;
                            }
                            return _expr$12;
                        })();
                        var $5439 = _expr$11;
                        return $5439;
                    case 'Fm.Term.gol':
                        var $5450 = self.name;
                        var $5451 = self.dref;
                        var $5452 = self.verb;
                        var _expr$11 = (() => {
                            var $5455 = _expr$1;
                            var $5456 = _wyth$3;
                            let _expr$12 = $5455;
                            let _defn$11;
                            while ($5456._ === 'List.cons') {
                                _defn$11 = $5456.head;
                                var $5455 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5457 = self.file;
                                            var $5458 = self.code;
                                            var $5459 = self.name;
                                            var $5460 = self.term;
                                            var $5461 = self.type;
                                            var $5462 = self.stat;
                                            var $5463 = $5460;
                                            return $5463;
                                    };
                                })());
                                _expr$12 = $5455;
                                $5456 = $5456.tail;
                            }
                            return _expr$12;
                        })();
                        var $5453 = _expr$11;
                        return $5453;
                    case 'Fm.Term.hol':
                        var $5464 = self.path;
                        var _expr$9 = (() => {
                            var $5467 = _expr$1;
                            var $5468 = _wyth$3;
                            let _expr$10 = $5467;
                            let _defn$9;
                            while ($5468._ === 'List.cons') {
                                _defn$9 = $5468.head;
                                var $5467 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5469 = self.file;
                                            var $5470 = self.code;
                                            var $5471 = self.name;
                                            var $5472 = self.term;
                                            var $5473 = self.type;
                                            var $5474 = self.stat;
                                            var $5475 = $5472;
                                            return $5475;
                                    };
                                })());
                                _expr$10 = $5467;
                                $5468 = $5468.tail;
                            }
                            return _expr$10;
                        })();
                        var $5465 = _expr$9;
                        return $5465;
                    case 'Fm.Term.nat':
                        var $5476 = self.natx;
                        var _expr$9 = (() => {
                            var $5479 = _expr$1;
                            var $5480 = _wyth$3;
                            let _expr$10 = $5479;
                            let _defn$9;
                            while ($5480._ === 'List.cons') {
                                _defn$9 = $5480.head;
                                var $5479 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5481 = self.file;
                                            var $5482 = self.code;
                                            var $5483 = self.name;
                                            var $5484 = self.term;
                                            var $5485 = self.type;
                                            var $5486 = self.stat;
                                            var $5487 = $5484;
                                            return $5487;
                                    };
                                })());
                                _expr$10 = $5479;
                                $5480 = $5480.tail;
                            }
                            return _expr$10;
                        })();
                        var $5477 = _expr$9;
                        return $5477;
                    case 'Fm.Term.chr':
                        var $5488 = self.chrx;
                        var _expr$9 = (() => {
                            var $5491 = _expr$1;
                            var $5492 = _wyth$3;
                            let _expr$10 = $5491;
                            let _defn$9;
                            while ($5492._ === 'List.cons') {
                                _defn$9 = $5492.head;
                                var $5491 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5493 = self.file;
                                            var $5494 = self.code;
                                            var $5495 = self.name;
                                            var $5496 = self.term;
                                            var $5497 = self.type;
                                            var $5498 = self.stat;
                                            var $5499 = $5496;
                                            return $5499;
                                    };
                                })());
                                _expr$10 = $5491;
                                $5492 = $5492.tail;
                            }
                            return _expr$10;
                        })();
                        var $5489 = _expr$9;
                        return $5489;
                    case 'Fm.Term.str':
                        var $5500 = self.strx;
                        var _expr$9 = (() => {
                            var $5503 = _expr$1;
                            var $5504 = _wyth$3;
                            let _expr$10 = $5503;
                            let _defn$9;
                            while ($5504._ === 'List.cons') {
                                _defn$9 = $5504.head;
                                var $5503 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5505 = self.file;
                                            var $5506 = self.code;
                                            var $5507 = self.name;
                                            var $5508 = self.term;
                                            var $5509 = self.type;
                                            var $5510 = self.stat;
                                            var $5511 = $5508;
                                            return $5511;
                                    };
                                })());
                                _expr$10 = $5503;
                                $5504 = $5504.tail;
                            }
                            return _expr$10;
                        })();
                        var $5501 = _expr$9;
                        return $5501;
                    case 'Fm.Term.cse':
                        var $5512 = self.path;
                        var $5513 = self.expr;
                        var $5514 = self.name;
                        var $5515 = self.with;
                        var $5516 = self.cses;
                        var $5517 = self.moti;
                        var _expr$14 = (() => {
                            var $5520 = _expr$1;
                            var $5521 = _wyth$3;
                            let _expr$15 = $5520;
                            let _defn$14;
                            while ($5521._ === 'List.cons') {
                                _defn$14 = $5521.head;
                                var $5520 = Fm$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5522 = self.file;
                                            var $5523 = self.code;
                                            var $5524 = self.name;
                                            var $5525 = self.term;
                                            var $5526 = self.type;
                                            var $5527 = self.stat;
                                            var $5528 = $5525;
                                            return $5528;
                                    };
                                })());
                                _expr$15 = $5520;
                                $5521 = $5521.tail;
                            }
                            return _expr$15;
                        })();
                        var $5518 = _expr$14;
                        return $5518;
                    case 'Fm.Term.ori':
                        var $5529 = self.orig;
                        var $5530 = self.expr;
                        var _expr$10 = (() => {
                            var $5533 = _expr$1;
                            var $5534 = _wyth$3;
                            let _expr$11 = $5533;
                            let _defn$10;
                            while ($5534._ === 'List.cons') {
                                _defn$10 = $5534.head;
                                var $5533 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5535 = self.file;
                                            var $5536 = self.code;
                                            var $5537 = self.name;
                                            var $5538 = self.term;
                                            var $5539 = self.type;
                                            var $5540 = self.stat;
                                            var $5541 = $5538;
                                            return $5541;
                                    };
                                })());
                                _expr$11 = $5533;
                                $5534 = $5534.tail;
                            }
                            return _expr$11;
                        })();
                        var $5531 = _expr$10;
                        return $5531;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Term$desugar_cse$(_expr$1, _name$2, _with$3, _cses$4, _moti$5, _type$6, _defs$7, _ctxt$8) {
        var self = Fm$Term$reduce$(_type$6, _defs$7);
        switch (self._) {
            case 'Fm.Term.var':
                var $5543 = self.name;
                var $5544 = self.indx;
                var $5545 = Maybe$none;
                var $5542 = $5545;
                break;
            case 'Fm.Term.ref':
                var $5546 = self.name;
                var $5547 = Maybe$none;
                var $5542 = $5547;
                break;
            case 'Fm.Term.typ':
                var $5548 = Maybe$none;
                var $5542 = $5548;
                break;
            case 'Fm.Term.all':
                var $5549 = self.eras;
                var $5550 = self.self;
                var $5551 = self.name;
                var $5552 = self.xtyp;
                var $5553 = self.body;
                var _moti$14 = Fm$Term$desugar_cse$motive$(_with$3, _moti$5);
                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, List$nil, $5552, _moti$14, _defs$7);
                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                var _type$17 = $5553(Fm$Term$var$($5550, 0n))(Fm$Term$var$($5551, 0n));
                var $5554 = Maybe$some$(Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _with$3, _cses$4, _type$17, _defs$7, _ctxt$8));
                var $5542 = $5554;
                break;
            case 'Fm.Term.lam':
                var $5555 = self.name;
                var $5556 = self.body;
                var $5557 = Maybe$none;
                var $5542 = $5557;
                break;
            case 'Fm.Term.app':
                var $5558 = self.func;
                var $5559 = self.argm;
                var $5560 = Maybe$none;
                var $5542 = $5560;
                break;
            case 'Fm.Term.let':
                var $5561 = self.name;
                var $5562 = self.expr;
                var $5563 = self.body;
                var $5564 = Maybe$none;
                var $5542 = $5564;
                break;
            case 'Fm.Term.def':
                var $5565 = self.name;
                var $5566 = self.expr;
                var $5567 = self.body;
                var $5568 = Maybe$none;
                var $5542 = $5568;
                break;
            case 'Fm.Term.ann':
                var $5569 = self.done;
                var $5570 = self.term;
                var $5571 = self.type;
                var $5572 = Maybe$none;
                var $5542 = $5572;
                break;
            case 'Fm.Term.gol':
                var $5573 = self.name;
                var $5574 = self.dref;
                var $5575 = self.verb;
                var $5576 = Maybe$none;
                var $5542 = $5576;
                break;
            case 'Fm.Term.hol':
                var $5577 = self.path;
                var $5578 = Maybe$none;
                var $5542 = $5578;
                break;
            case 'Fm.Term.nat':
                var $5579 = self.natx;
                var $5580 = Maybe$none;
                var $5542 = $5580;
                break;
            case 'Fm.Term.chr':
                var $5581 = self.chrx;
                var $5582 = Maybe$none;
                var $5542 = $5582;
                break;
            case 'Fm.Term.str':
                var $5583 = self.strx;
                var $5584 = Maybe$none;
                var $5542 = $5584;
                break;
            case 'Fm.Term.cse':
                var $5585 = self.path;
                var $5586 = self.expr;
                var $5587 = self.name;
                var $5588 = self.with;
                var $5589 = self.cses;
                var $5590 = self.moti;
                var $5591 = Maybe$none;
                var $5542 = $5591;
                break;
            case 'Fm.Term.ori':
                var $5592 = self.orig;
                var $5593 = self.expr;
                var $5594 = Maybe$none;
                var $5542 = $5594;
                break;
        };
        return $5542;
    };
    const Fm$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5595 = ({
            _: 'Fm.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5595;
    };
    const Fm$Error$cant_infer = x0 => x1 => x2 => Fm$Error$cant_infer$(x0, x1, x2);

    function Set$has$(_bits$1, _set$2) {
        var self = Map$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5597 = Bool$false;
                var $5596 = $5597;
                break;
            case 'Maybe.some':
                var $5598 = self.value;
                var $5599 = Bool$true;
                var $5596 = $5599;
                break;
        };
        return $5596;
    };
    const Set$has = x0 => x1 => Set$has$(x0, x1);

    function Fm$Term$equal$patch$(_path$2, _term$3, _ret$4) {
        var $5600 = Fm$Check$result$(Maybe$some$(_ret$4), List$cons$(Fm$Error$patch$(_path$2, Fm$Term$normalize$(_term$3, Map$new)), List$nil));
        return $5600;
    };
    const Fm$Term$equal$patch = x0 => x1 => x2 => Fm$Term$equal$patch$(x0, x1, x2);

    function Fm$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5602 = self.name;
                var $5603 = self.indx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5605 = self.name;
                        var $5606 = self.indx;
                        var $5607 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5607;
                        break;
                    case 'Fm.Term.ref':
                        var $5608 = self.name;
                        var $5609 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5609;
                        break;
                    case 'Fm.Term.typ':
                        var $5610 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5610;
                        break;
                    case 'Fm.Term.all':
                        var $5611 = self.eras;
                        var $5612 = self.self;
                        var $5613 = self.name;
                        var $5614 = self.xtyp;
                        var $5615 = self.body;
                        var $5616 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5616;
                        break;
                    case 'Fm.Term.lam':
                        var $5617 = self.name;
                        var $5618 = self.body;
                        var $5619 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5619;
                        break;
                    case 'Fm.Term.app':
                        var $5620 = self.func;
                        var $5621 = self.argm;
                        var $5622 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5622;
                        break;
                    case 'Fm.Term.let':
                        var $5623 = self.name;
                        var $5624 = self.expr;
                        var $5625 = self.body;
                        var $5626 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5626;
                        break;
                    case 'Fm.Term.def':
                        var $5627 = self.name;
                        var $5628 = self.expr;
                        var $5629 = self.body;
                        var $5630 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5630;
                        break;
                    case 'Fm.Term.ann':
                        var $5631 = self.done;
                        var $5632 = self.term;
                        var $5633 = self.type;
                        var $5634 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5634;
                        break;
                    case 'Fm.Term.gol':
                        var $5635 = self.name;
                        var $5636 = self.dref;
                        var $5637 = self.verb;
                        var $5638 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5638;
                        break;
                    case 'Fm.Term.hol':
                        var $5639 = self.path;
                        var $5640 = Fm$Term$equal$patch$($5639, _a$1, Unit$new);
                        var $5604 = $5640;
                        break;
                    case 'Fm.Term.nat':
                        var $5641 = self.natx;
                        var $5642 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5642;
                        break;
                    case 'Fm.Term.chr':
                        var $5643 = self.chrx;
                        var $5644 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5644;
                        break;
                    case 'Fm.Term.str':
                        var $5645 = self.strx;
                        var $5646 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5646;
                        break;
                    case 'Fm.Term.cse':
                        var $5647 = self.path;
                        var $5648 = self.expr;
                        var $5649 = self.name;
                        var $5650 = self.with;
                        var $5651 = self.cses;
                        var $5652 = self.moti;
                        var $5653 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5604 = $5653;
                        break;
                    case 'Fm.Term.ori':
                        var $5654 = self.orig;
                        var $5655 = self.expr;
                        var $5656 = Fm$Term$equal$extra_holes$(_a$1, $5655);
                        var $5604 = $5656;
                        break;
                };
                var $5601 = $5604;
                break;
            case 'Fm.Term.ref':
                var $5657 = self.name;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5659 = self.name;
                        var $5660 = self.indx;
                        var $5661 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5661;
                        break;
                    case 'Fm.Term.ref':
                        var $5662 = self.name;
                        var $5663 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5663;
                        break;
                    case 'Fm.Term.typ':
                        var $5664 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5664;
                        break;
                    case 'Fm.Term.all':
                        var $5665 = self.eras;
                        var $5666 = self.self;
                        var $5667 = self.name;
                        var $5668 = self.xtyp;
                        var $5669 = self.body;
                        var $5670 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5670;
                        break;
                    case 'Fm.Term.lam':
                        var $5671 = self.name;
                        var $5672 = self.body;
                        var $5673 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5673;
                        break;
                    case 'Fm.Term.app':
                        var $5674 = self.func;
                        var $5675 = self.argm;
                        var $5676 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5676;
                        break;
                    case 'Fm.Term.let':
                        var $5677 = self.name;
                        var $5678 = self.expr;
                        var $5679 = self.body;
                        var $5680 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5680;
                        break;
                    case 'Fm.Term.def':
                        var $5681 = self.name;
                        var $5682 = self.expr;
                        var $5683 = self.body;
                        var $5684 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5684;
                        break;
                    case 'Fm.Term.ann':
                        var $5685 = self.done;
                        var $5686 = self.term;
                        var $5687 = self.type;
                        var $5688 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5688;
                        break;
                    case 'Fm.Term.gol':
                        var $5689 = self.name;
                        var $5690 = self.dref;
                        var $5691 = self.verb;
                        var $5692 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5692;
                        break;
                    case 'Fm.Term.hol':
                        var $5693 = self.path;
                        var $5694 = Fm$Term$equal$patch$($5693, _a$1, Unit$new);
                        var $5658 = $5694;
                        break;
                    case 'Fm.Term.nat':
                        var $5695 = self.natx;
                        var $5696 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5696;
                        break;
                    case 'Fm.Term.chr':
                        var $5697 = self.chrx;
                        var $5698 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5698;
                        break;
                    case 'Fm.Term.str':
                        var $5699 = self.strx;
                        var $5700 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5700;
                        break;
                    case 'Fm.Term.cse':
                        var $5701 = self.path;
                        var $5702 = self.expr;
                        var $5703 = self.name;
                        var $5704 = self.with;
                        var $5705 = self.cses;
                        var $5706 = self.moti;
                        var $5707 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5658 = $5707;
                        break;
                    case 'Fm.Term.ori':
                        var $5708 = self.orig;
                        var $5709 = self.expr;
                        var $5710 = Fm$Term$equal$extra_holes$(_a$1, $5709);
                        var $5658 = $5710;
                        break;
                };
                var $5601 = $5658;
                break;
            case 'Fm.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5712 = self.name;
                        var $5713 = self.indx;
                        var $5714 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5714;
                        break;
                    case 'Fm.Term.ref':
                        var $5715 = self.name;
                        var $5716 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5716;
                        break;
                    case 'Fm.Term.typ':
                        var $5717 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5717;
                        break;
                    case 'Fm.Term.all':
                        var $5718 = self.eras;
                        var $5719 = self.self;
                        var $5720 = self.name;
                        var $5721 = self.xtyp;
                        var $5722 = self.body;
                        var $5723 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5723;
                        break;
                    case 'Fm.Term.lam':
                        var $5724 = self.name;
                        var $5725 = self.body;
                        var $5726 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5726;
                        break;
                    case 'Fm.Term.app':
                        var $5727 = self.func;
                        var $5728 = self.argm;
                        var $5729 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5729;
                        break;
                    case 'Fm.Term.let':
                        var $5730 = self.name;
                        var $5731 = self.expr;
                        var $5732 = self.body;
                        var $5733 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5733;
                        break;
                    case 'Fm.Term.def':
                        var $5734 = self.name;
                        var $5735 = self.expr;
                        var $5736 = self.body;
                        var $5737 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5737;
                        break;
                    case 'Fm.Term.ann':
                        var $5738 = self.done;
                        var $5739 = self.term;
                        var $5740 = self.type;
                        var $5741 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5741;
                        break;
                    case 'Fm.Term.gol':
                        var $5742 = self.name;
                        var $5743 = self.dref;
                        var $5744 = self.verb;
                        var $5745 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5745;
                        break;
                    case 'Fm.Term.hol':
                        var $5746 = self.path;
                        var $5747 = Fm$Term$equal$patch$($5746, _a$1, Unit$new);
                        var $5711 = $5747;
                        break;
                    case 'Fm.Term.nat':
                        var $5748 = self.natx;
                        var $5749 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5749;
                        break;
                    case 'Fm.Term.chr':
                        var $5750 = self.chrx;
                        var $5751 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5751;
                        break;
                    case 'Fm.Term.str':
                        var $5752 = self.strx;
                        var $5753 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5753;
                        break;
                    case 'Fm.Term.cse':
                        var $5754 = self.path;
                        var $5755 = self.expr;
                        var $5756 = self.name;
                        var $5757 = self.with;
                        var $5758 = self.cses;
                        var $5759 = self.moti;
                        var $5760 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5711 = $5760;
                        break;
                    case 'Fm.Term.ori':
                        var $5761 = self.orig;
                        var $5762 = self.expr;
                        var $5763 = Fm$Term$equal$extra_holes$(_a$1, $5762);
                        var $5711 = $5763;
                        break;
                };
                var $5601 = $5711;
                break;
            case 'Fm.Term.all':
                var $5764 = self.eras;
                var $5765 = self.self;
                var $5766 = self.name;
                var $5767 = self.xtyp;
                var $5768 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5770 = self.name;
                        var $5771 = self.indx;
                        var $5772 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5772;
                        break;
                    case 'Fm.Term.ref':
                        var $5773 = self.name;
                        var $5774 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5774;
                        break;
                    case 'Fm.Term.typ':
                        var $5775 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5775;
                        break;
                    case 'Fm.Term.all':
                        var $5776 = self.eras;
                        var $5777 = self.self;
                        var $5778 = self.name;
                        var $5779 = self.xtyp;
                        var $5780 = self.body;
                        var $5781 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5781;
                        break;
                    case 'Fm.Term.lam':
                        var $5782 = self.name;
                        var $5783 = self.body;
                        var $5784 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5784;
                        break;
                    case 'Fm.Term.app':
                        var $5785 = self.func;
                        var $5786 = self.argm;
                        var $5787 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5787;
                        break;
                    case 'Fm.Term.let':
                        var $5788 = self.name;
                        var $5789 = self.expr;
                        var $5790 = self.body;
                        var $5791 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5791;
                        break;
                    case 'Fm.Term.def':
                        var $5792 = self.name;
                        var $5793 = self.expr;
                        var $5794 = self.body;
                        var $5795 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5795;
                        break;
                    case 'Fm.Term.ann':
                        var $5796 = self.done;
                        var $5797 = self.term;
                        var $5798 = self.type;
                        var $5799 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5799;
                        break;
                    case 'Fm.Term.gol':
                        var $5800 = self.name;
                        var $5801 = self.dref;
                        var $5802 = self.verb;
                        var $5803 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5803;
                        break;
                    case 'Fm.Term.hol':
                        var $5804 = self.path;
                        var $5805 = Fm$Term$equal$patch$($5804, _a$1, Unit$new);
                        var $5769 = $5805;
                        break;
                    case 'Fm.Term.nat':
                        var $5806 = self.natx;
                        var $5807 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5807;
                        break;
                    case 'Fm.Term.chr':
                        var $5808 = self.chrx;
                        var $5809 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5809;
                        break;
                    case 'Fm.Term.str':
                        var $5810 = self.strx;
                        var $5811 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5811;
                        break;
                    case 'Fm.Term.cse':
                        var $5812 = self.path;
                        var $5813 = self.expr;
                        var $5814 = self.name;
                        var $5815 = self.with;
                        var $5816 = self.cses;
                        var $5817 = self.moti;
                        var $5818 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5769 = $5818;
                        break;
                    case 'Fm.Term.ori':
                        var $5819 = self.orig;
                        var $5820 = self.expr;
                        var $5821 = Fm$Term$equal$extra_holes$(_a$1, $5820);
                        var $5769 = $5821;
                        break;
                };
                var $5601 = $5769;
                break;
            case 'Fm.Term.lam':
                var $5822 = self.name;
                var $5823 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5825 = self.name;
                        var $5826 = self.indx;
                        var $5827 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5827;
                        break;
                    case 'Fm.Term.ref':
                        var $5828 = self.name;
                        var $5829 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5829;
                        break;
                    case 'Fm.Term.typ':
                        var $5830 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5830;
                        break;
                    case 'Fm.Term.all':
                        var $5831 = self.eras;
                        var $5832 = self.self;
                        var $5833 = self.name;
                        var $5834 = self.xtyp;
                        var $5835 = self.body;
                        var $5836 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5836;
                        break;
                    case 'Fm.Term.lam':
                        var $5837 = self.name;
                        var $5838 = self.body;
                        var $5839 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5839;
                        break;
                    case 'Fm.Term.app':
                        var $5840 = self.func;
                        var $5841 = self.argm;
                        var $5842 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5842;
                        break;
                    case 'Fm.Term.let':
                        var $5843 = self.name;
                        var $5844 = self.expr;
                        var $5845 = self.body;
                        var $5846 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5846;
                        break;
                    case 'Fm.Term.def':
                        var $5847 = self.name;
                        var $5848 = self.expr;
                        var $5849 = self.body;
                        var $5850 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5850;
                        break;
                    case 'Fm.Term.ann':
                        var $5851 = self.done;
                        var $5852 = self.term;
                        var $5853 = self.type;
                        var $5854 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5854;
                        break;
                    case 'Fm.Term.gol':
                        var $5855 = self.name;
                        var $5856 = self.dref;
                        var $5857 = self.verb;
                        var $5858 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5858;
                        break;
                    case 'Fm.Term.hol':
                        var $5859 = self.path;
                        var $5860 = Fm$Term$equal$patch$($5859, _a$1, Unit$new);
                        var $5824 = $5860;
                        break;
                    case 'Fm.Term.nat':
                        var $5861 = self.natx;
                        var $5862 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5862;
                        break;
                    case 'Fm.Term.chr':
                        var $5863 = self.chrx;
                        var $5864 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5864;
                        break;
                    case 'Fm.Term.str':
                        var $5865 = self.strx;
                        var $5866 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5866;
                        break;
                    case 'Fm.Term.cse':
                        var $5867 = self.path;
                        var $5868 = self.expr;
                        var $5869 = self.name;
                        var $5870 = self.with;
                        var $5871 = self.cses;
                        var $5872 = self.moti;
                        var $5873 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5824 = $5873;
                        break;
                    case 'Fm.Term.ori':
                        var $5874 = self.orig;
                        var $5875 = self.expr;
                        var $5876 = Fm$Term$equal$extra_holes$(_a$1, $5875);
                        var $5824 = $5876;
                        break;
                };
                var $5601 = $5824;
                break;
            case 'Fm.Term.app':
                var $5877 = self.func;
                var $5878 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5880 = self.name;
                        var $5881 = self.indx;
                        var $5882 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5882;
                        break;
                    case 'Fm.Term.ref':
                        var $5883 = self.name;
                        var $5884 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5884;
                        break;
                    case 'Fm.Term.typ':
                        var $5885 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5885;
                        break;
                    case 'Fm.Term.all':
                        var $5886 = self.eras;
                        var $5887 = self.self;
                        var $5888 = self.name;
                        var $5889 = self.xtyp;
                        var $5890 = self.body;
                        var $5891 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5891;
                        break;
                    case 'Fm.Term.lam':
                        var $5892 = self.name;
                        var $5893 = self.body;
                        var $5894 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5894;
                        break;
                    case 'Fm.Term.app':
                        var $5895 = self.func;
                        var $5896 = self.argm;
                        var self = Fm$Term$equal$extra_holes$($5877, $5895);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5898 = self.value;
                                var $5899 = self.errors;
                                var self = $5898;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5901 = Fm$Check$result$(Maybe$none, $5899);
                                        var $5900 = $5901;
                                        break;
                                    case 'Maybe.some':
                                        var $5902 = self.value;
                                        var self = Fm$Term$equal$extra_holes$($5878, $5896);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5904 = self.value;
                                                var $5905 = self.errors;
                                                var $5906 = Fm$Check$result$($5904, List$concat$($5899, $5905));
                                                var $5903 = $5906;
                                                break;
                                        };
                                        var $5900 = $5903;
                                        break;
                                };
                                var $5897 = $5900;
                                break;
                        };
                        var $5879 = $5897;
                        break;
                    case 'Fm.Term.let':
                        var $5907 = self.name;
                        var $5908 = self.expr;
                        var $5909 = self.body;
                        var $5910 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5910;
                        break;
                    case 'Fm.Term.def':
                        var $5911 = self.name;
                        var $5912 = self.expr;
                        var $5913 = self.body;
                        var $5914 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5914;
                        break;
                    case 'Fm.Term.ann':
                        var $5915 = self.done;
                        var $5916 = self.term;
                        var $5917 = self.type;
                        var $5918 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5918;
                        break;
                    case 'Fm.Term.gol':
                        var $5919 = self.name;
                        var $5920 = self.dref;
                        var $5921 = self.verb;
                        var $5922 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5922;
                        break;
                    case 'Fm.Term.hol':
                        var $5923 = self.path;
                        var $5924 = Fm$Term$equal$patch$($5923, _a$1, Unit$new);
                        var $5879 = $5924;
                        break;
                    case 'Fm.Term.nat':
                        var $5925 = self.natx;
                        var $5926 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5926;
                        break;
                    case 'Fm.Term.chr':
                        var $5927 = self.chrx;
                        var $5928 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5928;
                        break;
                    case 'Fm.Term.str':
                        var $5929 = self.strx;
                        var $5930 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5930;
                        break;
                    case 'Fm.Term.cse':
                        var $5931 = self.path;
                        var $5932 = self.expr;
                        var $5933 = self.name;
                        var $5934 = self.with;
                        var $5935 = self.cses;
                        var $5936 = self.moti;
                        var $5937 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5879 = $5937;
                        break;
                    case 'Fm.Term.ori':
                        var $5938 = self.orig;
                        var $5939 = self.expr;
                        var $5940 = Fm$Term$equal$extra_holes$(_a$1, $5939);
                        var $5879 = $5940;
                        break;
                };
                var $5601 = $5879;
                break;
            case 'Fm.Term.let':
                var $5941 = self.name;
                var $5942 = self.expr;
                var $5943 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5945 = self.name;
                        var $5946 = self.indx;
                        var $5947 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5947;
                        break;
                    case 'Fm.Term.ref':
                        var $5948 = self.name;
                        var $5949 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5949;
                        break;
                    case 'Fm.Term.typ':
                        var $5950 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5950;
                        break;
                    case 'Fm.Term.all':
                        var $5951 = self.eras;
                        var $5952 = self.self;
                        var $5953 = self.name;
                        var $5954 = self.xtyp;
                        var $5955 = self.body;
                        var $5956 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5956;
                        break;
                    case 'Fm.Term.lam':
                        var $5957 = self.name;
                        var $5958 = self.body;
                        var $5959 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5959;
                        break;
                    case 'Fm.Term.app':
                        var $5960 = self.func;
                        var $5961 = self.argm;
                        var $5962 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5962;
                        break;
                    case 'Fm.Term.let':
                        var $5963 = self.name;
                        var $5964 = self.expr;
                        var $5965 = self.body;
                        var $5966 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5966;
                        break;
                    case 'Fm.Term.def':
                        var $5967 = self.name;
                        var $5968 = self.expr;
                        var $5969 = self.body;
                        var $5970 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5970;
                        break;
                    case 'Fm.Term.ann':
                        var $5971 = self.done;
                        var $5972 = self.term;
                        var $5973 = self.type;
                        var $5974 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5974;
                        break;
                    case 'Fm.Term.gol':
                        var $5975 = self.name;
                        var $5976 = self.dref;
                        var $5977 = self.verb;
                        var $5978 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5978;
                        break;
                    case 'Fm.Term.hol':
                        var $5979 = self.path;
                        var $5980 = Fm$Term$equal$patch$($5979, _a$1, Unit$new);
                        var $5944 = $5980;
                        break;
                    case 'Fm.Term.nat':
                        var $5981 = self.natx;
                        var $5982 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5982;
                        break;
                    case 'Fm.Term.chr':
                        var $5983 = self.chrx;
                        var $5984 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5984;
                        break;
                    case 'Fm.Term.str':
                        var $5985 = self.strx;
                        var $5986 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5986;
                        break;
                    case 'Fm.Term.cse':
                        var $5987 = self.path;
                        var $5988 = self.expr;
                        var $5989 = self.name;
                        var $5990 = self.with;
                        var $5991 = self.cses;
                        var $5992 = self.moti;
                        var $5993 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5944 = $5993;
                        break;
                    case 'Fm.Term.ori':
                        var $5994 = self.orig;
                        var $5995 = self.expr;
                        var $5996 = Fm$Term$equal$extra_holes$(_a$1, $5995);
                        var $5944 = $5996;
                        break;
                };
                var $5601 = $5944;
                break;
            case 'Fm.Term.def':
                var $5997 = self.name;
                var $5998 = self.expr;
                var $5999 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6001 = self.name;
                        var $6002 = self.indx;
                        var $6003 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6003;
                        break;
                    case 'Fm.Term.ref':
                        var $6004 = self.name;
                        var $6005 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6005;
                        break;
                    case 'Fm.Term.typ':
                        var $6006 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6006;
                        break;
                    case 'Fm.Term.all':
                        var $6007 = self.eras;
                        var $6008 = self.self;
                        var $6009 = self.name;
                        var $6010 = self.xtyp;
                        var $6011 = self.body;
                        var $6012 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6012;
                        break;
                    case 'Fm.Term.lam':
                        var $6013 = self.name;
                        var $6014 = self.body;
                        var $6015 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6015;
                        break;
                    case 'Fm.Term.app':
                        var $6016 = self.func;
                        var $6017 = self.argm;
                        var $6018 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6018;
                        break;
                    case 'Fm.Term.let':
                        var $6019 = self.name;
                        var $6020 = self.expr;
                        var $6021 = self.body;
                        var $6022 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6022;
                        break;
                    case 'Fm.Term.def':
                        var $6023 = self.name;
                        var $6024 = self.expr;
                        var $6025 = self.body;
                        var $6026 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6026;
                        break;
                    case 'Fm.Term.ann':
                        var $6027 = self.done;
                        var $6028 = self.term;
                        var $6029 = self.type;
                        var $6030 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6030;
                        break;
                    case 'Fm.Term.gol':
                        var $6031 = self.name;
                        var $6032 = self.dref;
                        var $6033 = self.verb;
                        var $6034 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6034;
                        break;
                    case 'Fm.Term.hol':
                        var $6035 = self.path;
                        var $6036 = Fm$Term$equal$patch$($6035, _a$1, Unit$new);
                        var $6000 = $6036;
                        break;
                    case 'Fm.Term.nat':
                        var $6037 = self.natx;
                        var $6038 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6038;
                        break;
                    case 'Fm.Term.chr':
                        var $6039 = self.chrx;
                        var $6040 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6040;
                        break;
                    case 'Fm.Term.str':
                        var $6041 = self.strx;
                        var $6042 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6042;
                        break;
                    case 'Fm.Term.cse':
                        var $6043 = self.path;
                        var $6044 = self.expr;
                        var $6045 = self.name;
                        var $6046 = self.with;
                        var $6047 = self.cses;
                        var $6048 = self.moti;
                        var $6049 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6000 = $6049;
                        break;
                    case 'Fm.Term.ori':
                        var $6050 = self.orig;
                        var $6051 = self.expr;
                        var $6052 = Fm$Term$equal$extra_holes$(_a$1, $6051);
                        var $6000 = $6052;
                        break;
                };
                var $5601 = $6000;
                break;
            case 'Fm.Term.ann':
                var $6053 = self.done;
                var $6054 = self.term;
                var $6055 = self.type;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6057 = self.name;
                        var $6058 = self.indx;
                        var $6059 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6059;
                        break;
                    case 'Fm.Term.ref':
                        var $6060 = self.name;
                        var $6061 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6061;
                        break;
                    case 'Fm.Term.typ':
                        var $6062 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6062;
                        break;
                    case 'Fm.Term.all':
                        var $6063 = self.eras;
                        var $6064 = self.self;
                        var $6065 = self.name;
                        var $6066 = self.xtyp;
                        var $6067 = self.body;
                        var $6068 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6068;
                        break;
                    case 'Fm.Term.lam':
                        var $6069 = self.name;
                        var $6070 = self.body;
                        var $6071 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6071;
                        break;
                    case 'Fm.Term.app':
                        var $6072 = self.func;
                        var $6073 = self.argm;
                        var $6074 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6074;
                        break;
                    case 'Fm.Term.let':
                        var $6075 = self.name;
                        var $6076 = self.expr;
                        var $6077 = self.body;
                        var $6078 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6078;
                        break;
                    case 'Fm.Term.def':
                        var $6079 = self.name;
                        var $6080 = self.expr;
                        var $6081 = self.body;
                        var $6082 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6082;
                        break;
                    case 'Fm.Term.ann':
                        var $6083 = self.done;
                        var $6084 = self.term;
                        var $6085 = self.type;
                        var $6086 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6086;
                        break;
                    case 'Fm.Term.gol':
                        var $6087 = self.name;
                        var $6088 = self.dref;
                        var $6089 = self.verb;
                        var $6090 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6090;
                        break;
                    case 'Fm.Term.hol':
                        var $6091 = self.path;
                        var $6092 = Fm$Term$equal$patch$($6091, _a$1, Unit$new);
                        var $6056 = $6092;
                        break;
                    case 'Fm.Term.nat':
                        var $6093 = self.natx;
                        var $6094 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6094;
                        break;
                    case 'Fm.Term.chr':
                        var $6095 = self.chrx;
                        var $6096 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6096;
                        break;
                    case 'Fm.Term.str':
                        var $6097 = self.strx;
                        var $6098 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6098;
                        break;
                    case 'Fm.Term.cse':
                        var $6099 = self.path;
                        var $6100 = self.expr;
                        var $6101 = self.name;
                        var $6102 = self.with;
                        var $6103 = self.cses;
                        var $6104 = self.moti;
                        var $6105 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6056 = $6105;
                        break;
                    case 'Fm.Term.ori':
                        var $6106 = self.orig;
                        var $6107 = self.expr;
                        var $6108 = Fm$Term$equal$extra_holes$(_a$1, $6107);
                        var $6056 = $6108;
                        break;
                };
                var $5601 = $6056;
                break;
            case 'Fm.Term.gol':
                var $6109 = self.name;
                var $6110 = self.dref;
                var $6111 = self.verb;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6113 = self.name;
                        var $6114 = self.indx;
                        var $6115 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6115;
                        break;
                    case 'Fm.Term.ref':
                        var $6116 = self.name;
                        var $6117 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6117;
                        break;
                    case 'Fm.Term.typ':
                        var $6118 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6118;
                        break;
                    case 'Fm.Term.all':
                        var $6119 = self.eras;
                        var $6120 = self.self;
                        var $6121 = self.name;
                        var $6122 = self.xtyp;
                        var $6123 = self.body;
                        var $6124 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6124;
                        break;
                    case 'Fm.Term.lam':
                        var $6125 = self.name;
                        var $6126 = self.body;
                        var $6127 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6127;
                        break;
                    case 'Fm.Term.app':
                        var $6128 = self.func;
                        var $6129 = self.argm;
                        var $6130 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6130;
                        break;
                    case 'Fm.Term.let':
                        var $6131 = self.name;
                        var $6132 = self.expr;
                        var $6133 = self.body;
                        var $6134 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6134;
                        break;
                    case 'Fm.Term.def':
                        var $6135 = self.name;
                        var $6136 = self.expr;
                        var $6137 = self.body;
                        var $6138 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6138;
                        break;
                    case 'Fm.Term.ann':
                        var $6139 = self.done;
                        var $6140 = self.term;
                        var $6141 = self.type;
                        var $6142 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6142;
                        break;
                    case 'Fm.Term.gol':
                        var $6143 = self.name;
                        var $6144 = self.dref;
                        var $6145 = self.verb;
                        var $6146 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6146;
                        break;
                    case 'Fm.Term.hol':
                        var $6147 = self.path;
                        var $6148 = Fm$Term$equal$patch$($6147, _a$1, Unit$new);
                        var $6112 = $6148;
                        break;
                    case 'Fm.Term.nat':
                        var $6149 = self.natx;
                        var $6150 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6150;
                        break;
                    case 'Fm.Term.chr':
                        var $6151 = self.chrx;
                        var $6152 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6152;
                        break;
                    case 'Fm.Term.str':
                        var $6153 = self.strx;
                        var $6154 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6154;
                        break;
                    case 'Fm.Term.cse':
                        var $6155 = self.path;
                        var $6156 = self.expr;
                        var $6157 = self.name;
                        var $6158 = self.with;
                        var $6159 = self.cses;
                        var $6160 = self.moti;
                        var $6161 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6112 = $6161;
                        break;
                    case 'Fm.Term.ori':
                        var $6162 = self.orig;
                        var $6163 = self.expr;
                        var $6164 = Fm$Term$equal$extra_holes$(_a$1, $6163);
                        var $6112 = $6164;
                        break;
                };
                var $5601 = $6112;
                break;
            case 'Fm.Term.hol':
                var $6165 = self.path;
                var $6166 = Fm$Term$equal$patch$($6165, _b$2, Unit$new);
                var $5601 = $6166;
                break;
            case 'Fm.Term.nat':
                var $6167 = self.natx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6169 = self.name;
                        var $6170 = self.indx;
                        var $6171 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6171;
                        break;
                    case 'Fm.Term.ref':
                        var $6172 = self.name;
                        var $6173 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6173;
                        break;
                    case 'Fm.Term.typ':
                        var $6174 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6174;
                        break;
                    case 'Fm.Term.all':
                        var $6175 = self.eras;
                        var $6176 = self.self;
                        var $6177 = self.name;
                        var $6178 = self.xtyp;
                        var $6179 = self.body;
                        var $6180 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6180;
                        break;
                    case 'Fm.Term.lam':
                        var $6181 = self.name;
                        var $6182 = self.body;
                        var $6183 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6183;
                        break;
                    case 'Fm.Term.app':
                        var $6184 = self.func;
                        var $6185 = self.argm;
                        var $6186 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6186;
                        break;
                    case 'Fm.Term.let':
                        var $6187 = self.name;
                        var $6188 = self.expr;
                        var $6189 = self.body;
                        var $6190 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6190;
                        break;
                    case 'Fm.Term.def':
                        var $6191 = self.name;
                        var $6192 = self.expr;
                        var $6193 = self.body;
                        var $6194 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6194;
                        break;
                    case 'Fm.Term.ann':
                        var $6195 = self.done;
                        var $6196 = self.term;
                        var $6197 = self.type;
                        var $6198 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6198;
                        break;
                    case 'Fm.Term.gol':
                        var $6199 = self.name;
                        var $6200 = self.dref;
                        var $6201 = self.verb;
                        var $6202 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6202;
                        break;
                    case 'Fm.Term.hol':
                        var $6203 = self.path;
                        var $6204 = Fm$Term$equal$patch$($6203, _a$1, Unit$new);
                        var $6168 = $6204;
                        break;
                    case 'Fm.Term.nat':
                        var $6205 = self.natx;
                        var $6206 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6206;
                        break;
                    case 'Fm.Term.chr':
                        var $6207 = self.chrx;
                        var $6208 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6208;
                        break;
                    case 'Fm.Term.str':
                        var $6209 = self.strx;
                        var $6210 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6210;
                        break;
                    case 'Fm.Term.cse':
                        var $6211 = self.path;
                        var $6212 = self.expr;
                        var $6213 = self.name;
                        var $6214 = self.with;
                        var $6215 = self.cses;
                        var $6216 = self.moti;
                        var $6217 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6168 = $6217;
                        break;
                    case 'Fm.Term.ori':
                        var $6218 = self.orig;
                        var $6219 = self.expr;
                        var $6220 = Fm$Term$equal$extra_holes$(_a$1, $6219);
                        var $6168 = $6220;
                        break;
                };
                var $5601 = $6168;
                break;
            case 'Fm.Term.chr':
                var $6221 = self.chrx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6223 = self.name;
                        var $6224 = self.indx;
                        var $6225 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6225;
                        break;
                    case 'Fm.Term.ref':
                        var $6226 = self.name;
                        var $6227 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6227;
                        break;
                    case 'Fm.Term.typ':
                        var $6228 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6228;
                        break;
                    case 'Fm.Term.all':
                        var $6229 = self.eras;
                        var $6230 = self.self;
                        var $6231 = self.name;
                        var $6232 = self.xtyp;
                        var $6233 = self.body;
                        var $6234 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6234;
                        break;
                    case 'Fm.Term.lam':
                        var $6235 = self.name;
                        var $6236 = self.body;
                        var $6237 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6237;
                        break;
                    case 'Fm.Term.app':
                        var $6238 = self.func;
                        var $6239 = self.argm;
                        var $6240 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6240;
                        break;
                    case 'Fm.Term.let':
                        var $6241 = self.name;
                        var $6242 = self.expr;
                        var $6243 = self.body;
                        var $6244 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6244;
                        break;
                    case 'Fm.Term.def':
                        var $6245 = self.name;
                        var $6246 = self.expr;
                        var $6247 = self.body;
                        var $6248 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6248;
                        break;
                    case 'Fm.Term.ann':
                        var $6249 = self.done;
                        var $6250 = self.term;
                        var $6251 = self.type;
                        var $6252 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6252;
                        break;
                    case 'Fm.Term.gol':
                        var $6253 = self.name;
                        var $6254 = self.dref;
                        var $6255 = self.verb;
                        var $6256 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6256;
                        break;
                    case 'Fm.Term.hol':
                        var $6257 = self.path;
                        var $6258 = Fm$Term$equal$patch$($6257, _a$1, Unit$new);
                        var $6222 = $6258;
                        break;
                    case 'Fm.Term.nat':
                        var $6259 = self.natx;
                        var $6260 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6260;
                        break;
                    case 'Fm.Term.chr':
                        var $6261 = self.chrx;
                        var $6262 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6262;
                        break;
                    case 'Fm.Term.str':
                        var $6263 = self.strx;
                        var $6264 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6264;
                        break;
                    case 'Fm.Term.cse':
                        var $6265 = self.path;
                        var $6266 = self.expr;
                        var $6267 = self.name;
                        var $6268 = self.with;
                        var $6269 = self.cses;
                        var $6270 = self.moti;
                        var $6271 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6222 = $6271;
                        break;
                    case 'Fm.Term.ori':
                        var $6272 = self.orig;
                        var $6273 = self.expr;
                        var $6274 = Fm$Term$equal$extra_holes$(_a$1, $6273);
                        var $6222 = $6274;
                        break;
                };
                var $5601 = $6222;
                break;
            case 'Fm.Term.str':
                var $6275 = self.strx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6277 = self.name;
                        var $6278 = self.indx;
                        var $6279 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6279;
                        break;
                    case 'Fm.Term.ref':
                        var $6280 = self.name;
                        var $6281 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6281;
                        break;
                    case 'Fm.Term.typ':
                        var $6282 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6282;
                        break;
                    case 'Fm.Term.all':
                        var $6283 = self.eras;
                        var $6284 = self.self;
                        var $6285 = self.name;
                        var $6286 = self.xtyp;
                        var $6287 = self.body;
                        var $6288 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6288;
                        break;
                    case 'Fm.Term.lam':
                        var $6289 = self.name;
                        var $6290 = self.body;
                        var $6291 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6291;
                        break;
                    case 'Fm.Term.app':
                        var $6292 = self.func;
                        var $6293 = self.argm;
                        var $6294 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6294;
                        break;
                    case 'Fm.Term.let':
                        var $6295 = self.name;
                        var $6296 = self.expr;
                        var $6297 = self.body;
                        var $6298 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6298;
                        break;
                    case 'Fm.Term.def':
                        var $6299 = self.name;
                        var $6300 = self.expr;
                        var $6301 = self.body;
                        var $6302 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6302;
                        break;
                    case 'Fm.Term.ann':
                        var $6303 = self.done;
                        var $6304 = self.term;
                        var $6305 = self.type;
                        var $6306 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6306;
                        break;
                    case 'Fm.Term.gol':
                        var $6307 = self.name;
                        var $6308 = self.dref;
                        var $6309 = self.verb;
                        var $6310 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6310;
                        break;
                    case 'Fm.Term.hol':
                        var $6311 = self.path;
                        var $6312 = Fm$Term$equal$patch$($6311, _a$1, Unit$new);
                        var $6276 = $6312;
                        break;
                    case 'Fm.Term.nat':
                        var $6313 = self.natx;
                        var $6314 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6314;
                        break;
                    case 'Fm.Term.chr':
                        var $6315 = self.chrx;
                        var $6316 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6316;
                        break;
                    case 'Fm.Term.str':
                        var $6317 = self.strx;
                        var $6318 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6318;
                        break;
                    case 'Fm.Term.cse':
                        var $6319 = self.path;
                        var $6320 = self.expr;
                        var $6321 = self.name;
                        var $6322 = self.with;
                        var $6323 = self.cses;
                        var $6324 = self.moti;
                        var $6325 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6276 = $6325;
                        break;
                    case 'Fm.Term.ori':
                        var $6326 = self.orig;
                        var $6327 = self.expr;
                        var $6328 = Fm$Term$equal$extra_holes$(_a$1, $6327);
                        var $6276 = $6328;
                        break;
                };
                var $5601 = $6276;
                break;
            case 'Fm.Term.cse':
                var $6329 = self.path;
                var $6330 = self.expr;
                var $6331 = self.name;
                var $6332 = self.with;
                var $6333 = self.cses;
                var $6334 = self.moti;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6336 = self.name;
                        var $6337 = self.indx;
                        var $6338 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6338;
                        break;
                    case 'Fm.Term.ref':
                        var $6339 = self.name;
                        var $6340 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6340;
                        break;
                    case 'Fm.Term.typ':
                        var $6341 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6341;
                        break;
                    case 'Fm.Term.all':
                        var $6342 = self.eras;
                        var $6343 = self.self;
                        var $6344 = self.name;
                        var $6345 = self.xtyp;
                        var $6346 = self.body;
                        var $6347 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6347;
                        break;
                    case 'Fm.Term.lam':
                        var $6348 = self.name;
                        var $6349 = self.body;
                        var $6350 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6350;
                        break;
                    case 'Fm.Term.app':
                        var $6351 = self.func;
                        var $6352 = self.argm;
                        var $6353 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6353;
                        break;
                    case 'Fm.Term.let':
                        var $6354 = self.name;
                        var $6355 = self.expr;
                        var $6356 = self.body;
                        var $6357 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6357;
                        break;
                    case 'Fm.Term.def':
                        var $6358 = self.name;
                        var $6359 = self.expr;
                        var $6360 = self.body;
                        var $6361 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6361;
                        break;
                    case 'Fm.Term.ann':
                        var $6362 = self.done;
                        var $6363 = self.term;
                        var $6364 = self.type;
                        var $6365 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6365;
                        break;
                    case 'Fm.Term.gol':
                        var $6366 = self.name;
                        var $6367 = self.dref;
                        var $6368 = self.verb;
                        var $6369 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6369;
                        break;
                    case 'Fm.Term.hol':
                        var $6370 = self.path;
                        var $6371 = Fm$Term$equal$patch$($6370, _a$1, Unit$new);
                        var $6335 = $6371;
                        break;
                    case 'Fm.Term.nat':
                        var $6372 = self.natx;
                        var $6373 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6373;
                        break;
                    case 'Fm.Term.chr':
                        var $6374 = self.chrx;
                        var $6375 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6375;
                        break;
                    case 'Fm.Term.str':
                        var $6376 = self.strx;
                        var $6377 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6377;
                        break;
                    case 'Fm.Term.cse':
                        var $6378 = self.path;
                        var $6379 = self.expr;
                        var $6380 = self.name;
                        var $6381 = self.with;
                        var $6382 = self.cses;
                        var $6383 = self.moti;
                        var $6384 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6335 = $6384;
                        break;
                    case 'Fm.Term.ori':
                        var $6385 = self.orig;
                        var $6386 = self.expr;
                        var $6387 = Fm$Term$equal$extra_holes$(_a$1, $6386);
                        var $6335 = $6387;
                        break;
                };
                var $5601 = $6335;
                break;
            case 'Fm.Term.ori':
                var $6388 = self.orig;
                var $6389 = self.expr;
                var $6390 = Fm$Term$equal$extra_holes$($6389, _b$2);
                var $5601 = $6390;
                break;
        };
        return $5601;
    };
    const Fm$Term$equal$extra_holes = x0 => x1 => Fm$Term$equal$extra_holes$(x0, x1);

    function Set$set$(_bits$1, _set$2) {
        var $6391 = Map$set$(_bits$1, Unit$new, _set$2);
        return $6391;
    };
    const Set$set = x0 => x1 => Set$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6393 = _b$2;
            var $6392 = $6393;
        } else {
            var $6394 = (!_b$2);
            var $6392 = $6394;
        };
        return $6392;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Fm$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Fm$Term$serialize$(Fm$Term$reduce$(_a$1, Map$new), _lv$4, _lv$4, Bits$e);
        var _bh$7 = Fm$Term$serialize$(Fm$Term$reduce$(_b$2, Map$new), _lv$4, _lv$4, Bits$e);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6396 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6395 = $6396;
        } else {
            var _a1$8 = Fm$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Fm$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Fm$Term$serialize$(_a1$8, _lv$4, _lv$4, Bits$e);
            var _bh$11 = Fm$Term$serialize$(_b1$9, _lv$4, _lv$4, Bits$e);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6398 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6397 = $6398;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = Set$has$(_id$12, _seen$5);
                if (self) {
                    var self = Fm$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $6401 = self.value;
                            var $6402 = self.errors;
                            var self = $6401;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6404 = Fm$Check$result$(Maybe$none, $6402);
                                    var $6403 = $6404;
                                    break;
                                case 'Maybe.some':
                                    var $6405 = self.value;
                                    var self = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6407 = self.value;
                                            var $6408 = self.errors;
                                            var $6409 = Fm$Check$result$($6407, List$concat$($6402, $6408));
                                            var $6406 = $6409;
                                            break;
                                    };
                                    var $6403 = $6406;
                                    break;
                            };
                            var $6400 = $6403;
                            break;
                    };
                    var $6399 = $6400;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Fm.Term.var':
                            var $6411 = self.name;
                            var $6412 = self.indx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6414 = self.name;
                                    var $6415 = self.indx;
                                    var $6416 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6416;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6417 = self.name;
                                    var $6418 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6418;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6419 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6419;
                                    break;
                                case 'Fm.Term.all':
                                    var $6420 = self.eras;
                                    var $6421 = self.self;
                                    var $6422 = self.name;
                                    var $6423 = self.xtyp;
                                    var $6424 = self.body;
                                    var $6425 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6425;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6426 = self.name;
                                    var $6427 = self.body;
                                    var $6428 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6428;
                                    break;
                                case 'Fm.Term.app':
                                    var $6429 = self.func;
                                    var $6430 = self.argm;
                                    var $6431 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6431;
                                    break;
                                case 'Fm.Term.let':
                                    var $6432 = self.name;
                                    var $6433 = self.expr;
                                    var $6434 = self.body;
                                    var $6435 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6435;
                                    break;
                                case 'Fm.Term.def':
                                    var $6436 = self.name;
                                    var $6437 = self.expr;
                                    var $6438 = self.body;
                                    var $6439 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6439;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6440 = self.done;
                                    var $6441 = self.term;
                                    var $6442 = self.type;
                                    var $6443 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6443;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6444 = self.name;
                                    var $6445 = self.dref;
                                    var $6446 = self.verb;
                                    var $6447 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6447;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6448 = self.path;
                                    var $6449 = Fm$Term$equal$patch$($6448, _a$1, Bool$true);
                                    var $6413 = $6449;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6450 = self.natx;
                                    var $6451 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6451;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6452 = self.chrx;
                                    var $6453 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6453;
                                    break;
                                case 'Fm.Term.str':
                                    var $6454 = self.strx;
                                    var $6455 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6455;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6456 = self.path;
                                    var $6457 = self.expr;
                                    var $6458 = self.name;
                                    var $6459 = self.with;
                                    var $6460 = self.cses;
                                    var $6461 = self.moti;
                                    var $6462 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6462;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6463 = self.orig;
                                    var $6464 = self.expr;
                                    var $6465 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6413 = $6465;
                                    break;
                            };
                            var $6410 = $6413;
                            break;
                        case 'Fm.Term.ref':
                            var $6466 = self.name;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6468 = self.name;
                                    var $6469 = self.indx;
                                    var $6470 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6470;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6471 = self.name;
                                    var $6472 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6472;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6473 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6473;
                                    break;
                                case 'Fm.Term.all':
                                    var $6474 = self.eras;
                                    var $6475 = self.self;
                                    var $6476 = self.name;
                                    var $6477 = self.xtyp;
                                    var $6478 = self.body;
                                    var $6479 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6479;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6480 = self.name;
                                    var $6481 = self.body;
                                    var $6482 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6482;
                                    break;
                                case 'Fm.Term.app':
                                    var $6483 = self.func;
                                    var $6484 = self.argm;
                                    var $6485 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6485;
                                    break;
                                case 'Fm.Term.let':
                                    var $6486 = self.name;
                                    var $6487 = self.expr;
                                    var $6488 = self.body;
                                    var $6489 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6489;
                                    break;
                                case 'Fm.Term.def':
                                    var $6490 = self.name;
                                    var $6491 = self.expr;
                                    var $6492 = self.body;
                                    var $6493 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6493;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6494 = self.done;
                                    var $6495 = self.term;
                                    var $6496 = self.type;
                                    var $6497 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6497;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6498 = self.name;
                                    var $6499 = self.dref;
                                    var $6500 = self.verb;
                                    var $6501 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6501;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6502 = self.path;
                                    var $6503 = Fm$Term$equal$patch$($6502, _a$1, Bool$true);
                                    var $6467 = $6503;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6504 = self.natx;
                                    var $6505 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6505;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6506 = self.chrx;
                                    var $6507 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6507;
                                    break;
                                case 'Fm.Term.str':
                                    var $6508 = self.strx;
                                    var $6509 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6509;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6510 = self.path;
                                    var $6511 = self.expr;
                                    var $6512 = self.name;
                                    var $6513 = self.with;
                                    var $6514 = self.cses;
                                    var $6515 = self.moti;
                                    var $6516 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6516;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6517 = self.orig;
                                    var $6518 = self.expr;
                                    var $6519 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6467 = $6519;
                                    break;
                            };
                            var $6410 = $6467;
                            break;
                        case 'Fm.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6521 = self.name;
                                    var $6522 = self.indx;
                                    var $6523 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6523;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6524 = self.name;
                                    var $6525 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6525;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6526 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6526;
                                    break;
                                case 'Fm.Term.all':
                                    var $6527 = self.eras;
                                    var $6528 = self.self;
                                    var $6529 = self.name;
                                    var $6530 = self.xtyp;
                                    var $6531 = self.body;
                                    var $6532 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6532;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6533 = self.name;
                                    var $6534 = self.body;
                                    var $6535 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6535;
                                    break;
                                case 'Fm.Term.app':
                                    var $6536 = self.func;
                                    var $6537 = self.argm;
                                    var $6538 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6538;
                                    break;
                                case 'Fm.Term.let':
                                    var $6539 = self.name;
                                    var $6540 = self.expr;
                                    var $6541 = self.body;
                                    var $6542 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6542;
                                    break;
                                case 'Fm.Term.def':
                                    var $6543 = self.name;
                                    var $6544 = self.expr;
                                    var $6545 = self.body;
                                    var $6546 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6546;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6547 = self.done;
                                    var $6548 = self.term;
                                    var $6549 = self.type;
                                    var $6550 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6550;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6551 = self.name;
                                    var $6552 = self.dref;
                                    var $6553 = self.verb;
                                    var $6554 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6554;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6555 = self.path;
                                    var $6556 = Fm$Term$equal$patch$($6555, _a$1, Bool$true);
                                    var $6520 = $6556;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6557 = self.natx;
                                    var $6558 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6558;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6559 = self.chrx;
                                    var $6560 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6560;
                                    break;
                                case 'Fm.Term.str':
                                    var $6561 = self.strx;
                                    var $6562 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6562;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6563 = self.path;
                                    var $6564 = self.expr;
                                    var $6565 = self.name;
                                    var $6566 = self.with;
                                    var $6567 = self.cses;
                                    var $6568 = self.moti;
                                    var $6569 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6569;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6570 = self.orig;
                                    var $6571 = self.expr;
                                    var $6572 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6520 = $6572;
                                    break;
                            };
                            var $6410 = $6520;
                            break;
                        case 'Fm.Term.all':
                            var $6573 = self.eras;
                            var $6574 = self.self;
                            var $6575 = self.name;
                            var $6576 = self.xtyp;
                            var $6577 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6579 = self.name;
                                    var $6580 = self.indx;
                                    var $6581 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6581;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6582 = self.name;
                                    var $6583 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6583;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6584 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6584;
                                    break;
                                case 'Fm.Term.all':
                                    var $6585 = self.eras;
                                    var $6586 = self.self;
                                    var $6587 = self.name;
                                    var $6588 = self.xtyp;
                                    var $6589 = self.body;
                                    var _seen$23 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6577(Fm$Term$var$($6574, _lv$4))(Fm$Term$var$($6575, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6589(Fm$Term$var$($6586, _lv$4))(Fm$Term$var$($6587, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6574 === $6586);
                                    var _eq_eras$27 = Bool$eql$($6573, $6585);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Fm$Term$equal$($6576, $6588, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6592 = self.value;
                                                var $6593 = self.errors;
                                                var self = $6592;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6595 = Fm$Check$result$(Maybe$none, $6593);
                                                        var $6594 = $6595;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $6596 = self.value;
                                                        var self = Fm$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $6598 = self.value;
                                                                var $6599 = self.errors;
                                                                var self = $6598;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $6601 = Fm$Check$result$(Maybe$none, $6599);
                                                                        var $6600 = $6601;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $6602 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($6596 && $6602)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $6604 = self.value;
                                                                                var $6605 = self.errors;
                                                                                var $6606 = Fm$Check$result$($6604, List$concat$($6599, $6605));
                                                                                var $6603 = $6606;
                                                                                break;
                                                                        };
                                                                        var $6600 = $6603;
                                                                        break;
                                                                };
                                                                var self = $6600;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $6607 = self.value;
                                                                var $6608 = self.errors;
                                                                var $6609 = Fm$Check$result$($6607, List$concat$($6593, $6608));
                                                                var $6597 = $6609;
                                                                break;
                                                        };
                                                        var $6594 = $6597;
                                                        break;
                                                };
                                                var $6591 = $6594;
                                                break;
                                        };
                                        var $6590 = $6591;
                                    } else {
                                        var $6610 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6590 = $6610;
                                    };
                                    var $6578 = $6590;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6611 = self.name;
                                    var $6612 = self.body;
                                    var $6613 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6613;
                                    break;
                                case 'Fm.Term.app':
                                    var $6614 = self.func;
                                    var $6615 = self.argm;
                                    var $6616 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6616;
                                    break;
                                case 'Fm.Term.let':
                                    var $6617 = self.name;
                                    var $6618 = self.expr;
                                    var $6619 = self.body;
                                    var $6620 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6620;
                                    break;
                                case 'Fm.Term.def':
                                    var $6621 = self.name;
                                    var $6622 = self.expr;
                                    var $6623 = self.body;
                                    var $6624 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6624;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6625 = self.done;
                                    var $6626 = self.term;
                                    var $6627 = self.type;
                                    var $6628 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6628;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6629 = self.name;
                                    var $6630 = self.dref;
                                    var $6631 = self.verb;
                                    var $6632 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6632;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6633 = self.path;
                                    var $6634 = Fm$Term$equal$patch$($6633, _a$1, Bool$true);
                                    var $6578 = $6634;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6635 = self.natx;
                                    var $6636 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6636;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6637 = self.chrx;
                                    var $6638 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6638;
                                    break;
                                case 'Fm.Term.str':
                                    var $6639 = self.strx;
                                    var $6640 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6640;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6641 = self.path;
                                    var $6642 = self.expr;
                                    var $6643 = self.name;
                                    var $6644 = self.with;
                                    var $6645 = self.cses;
                                    var $6646 = self.moti;
                                    var $6647 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6647;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6648 = self.orig;
                                    var $6649 = self.expr;
                                    var $6650 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6578 = $6650;
                                    break;
                            };
                            var $6410 = $6578;
                            break;
                        case 'Fm.Term.lam':
                            var $6651 = self.name;
                            var $6652 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6654 = self.name;
                                    var $6655 = self.indx;
                                    var $6656 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6656;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6657 = self.name;
                                    var $6658 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6658;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6659 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6659;
                                    break;
                                case 'Fm.Term.all':
                                    var $6660 = self.eras;
                                    var $6661 = self.self;
                                    var $6662 = self.name;
                                    var $6663 = self.xtyp;
                                    var $6664 = self.body;
                                    var $6665 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6665;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6666 = self.name;
                                    var $6667 = self.body;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6652(Fm$Term$var$($6651, _lv$4));
                                    var _b1_body$19 = $6667(Fm$Term$var$($6666, _lv$4));
                                    var self = Fm$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6669 = self.value;
                                            var $6670 = self.errors;
                                            var self = $6669;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6672 = Fm$Check$result$(Maybe$none, $6670);
                                                    var $6671 = $6672;
                                                    break;
                                                case 'Maybe.some':
                                                    var $6673 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($6673), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6675 = self.value;
                                                            var $6676 = self.errors;
                                                            var $6677 = Fm$Check$result$($6675, List$concat$($6670, $6676));
                                                            var $6674 = $6677;
                                                            break;
                                                    };
                                                    var $6671 = $6674;
                                                    break;
                                            };
                                            var $6668 = $6671;
                                            break;
                                    };
                                    var $6653 = $6668;
                                    break;
                                case 'Fm.Term.app':
                                    var $6678 = self.func;
                                    var $6679 = self.argm;
                                    var $6680 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6680;
                                    break;
                                case 'Fm.Term.let':
                                    var $6681 = self.name;
                                    var $6682 = self.expr;
                                    var $6683 = self.body;
                                    var $6684 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6684;
                                    break;
                                case 'Fm.Term.def':
                                    var $6685 = self.name;
                                    var $6686 = self.expr;
                                    var $6687 = self.body;
                                    var $6688 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6688;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6689 = self.done;
                                    var $6690 = self.term;
                                    var $6691 = self.type;
                                    var $6692 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6692;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6693 = self.name;
                                    var $6694 = self.dref;
                                    var $6695 = self.verb;
                                    var $6696 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6696;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6697 = self.path;
                                    var $6698 = Fm$Term$equal$patch$($6697, _a$1, Bool$true);
                                    var $6653 = $6698;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6699 = self.natx;
                                    var $6700 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6700;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6701 = self.chrx;
                                    var $6702 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6702;
                                    break;
                                case 'Fm.Term.str':
                                    var $6703 = self.strx;
                                    var $6704 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6704;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6705 = self.path;
                                    var $6706 = self.expr;
                                    var $6707 = self.name;
                                    var $6708 = self.with;
                                    var $6709 = self.cses;
                                    var $6710 = self.moti;
                                    var $6711 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6711;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6712 = self.orig;
                                    var $6713 = self.expr;
                                    var $6714 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6653 = $6714;
                                    break;
                            };
                            var $6410 = $6653;
                            break;
                        case 'Fm.Term.app':
                            var $6715 = self.func;
                            var $6716 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6718 = self.name;
                                    var $6719 = self.indx;
                                    var $6720 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6720;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6721 = self.name;
                                    var $6722 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6722;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6723 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6723;
                                    break;
                                case 'Fm.Term.all':
                                    var $6724 = self.eras;
                                    var $6725 = self.self;
                                    var $6726 = self.name;
                                    var $6727 = self.xtyp;
                                    var $6728 = self.body;
                                    var $6729 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6729;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6730 = self.name;
                                    var $6731 = self.body;
                                    var $6732 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6732;
                                    break;
                                case 'Fm.Term.app':
                                    var $6733 = self.func;
                                    var $6734 = self.argm;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var self = Fm$Term$equal$($6715, $6733, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6736 = self.value;
                                            var $6737 = self.errors;
                                            var self = $6736;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6739 = Fm$Check$result$(Maybe$none, $6737);
                                                    var $6738 = $6739;
                                                    break;
                                                case 'Maybe.some':
                                                    var $6740 = self.value;
                                                    var self = Fm$Term$equal$($6716, $6734, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6742 = self.value;
                                                            var $6743 = self.errors;
                                                            var self = $6742;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $6745 = Fm$Check$result$(Maybe$none, $6743);
                                                                    var $6744 = $6745;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $6746 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($6740 && $6746)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $6748 = self.value;
                                                                            var $6749 = self.errors;
                                                                            var $6750 = Fm$Check$result$($6748, List$concat$($6743, $6749));
                                                                            var $6747 = $6750;
                                                                            break;
                                                                    };
                                                                    var $6744 = $6747;
                                                                    break;
                                                            };
                                                            var self = $6744;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6751 = self.value;
                                                            var $6752 = self.errors;
                                                            var $6753 = Fm$Check$result$($6751, List$concat$($6737, $6752));
                                                            var $6741 = $6753;
                                                            break;
                                                    };
                                                    var $6738 = $6741;
                                                    break;
                                            };
                                            var $6735 = $6738;
                                            break;
                                    };
                                    var $6717 = $6735;
                                    break;
                                case 'Fm.Term.let':
                                    var $6754 = self.name;
                                    var $6755 = self.expr;
                                    var $6756 = self.body;
                                    var $6757 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6757;
                                    break;
                                case 'Fm.Term.def':
                                    var $6758 = self.name;
                                    var $6759 = self.expr;
                                    var $6760 = self.body;
                                    var $6761 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6761;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6762 = self.done;
                                    var $6763 = self.term;
                                    var $6764 = self.type;
                                    var $6765 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6765;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6766 = self.name;
                                    var $6767 = self.dref;
                                    var $6768 = self.verb;
                                    var $6769 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6769;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6770 = self.path;
                                    var $6771 = Fm$Term$equal$patch$($6770, _a$1, Bool$true);
                                    var $6717 = $6771;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6772 = self.natx;
                                    var $6773 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6773;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6774 = self.chrx;
                                    var $6775 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6775;
                                    break;
                                case 'Fm.Term.str':
                                    var $6776 = self.strx;
                                    var $6777 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6777;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6778 = self.path;
                                    var $6779 = self.expr;
                                    var $6780 = self.name;
                                    var $6781 = self.with;
                                    var $6782 = self.cses;
                                    var $6783 = self.moti;
                                    var $6784 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6784;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6785 = self.orig;
                                    var $6786 = self.expr;
                                    var $6787 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6717 = $6787;
                                    break;
                            };
                            var $6410 = $6717;
                            break;
                        case 'Fm.Term.let':
                            var $6788 = self.name;
                            var $6789 = self.expr;
                            var $6790 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6792 = self.name;
                                    var $6793 = self.indx;
                                    var $6794 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6794;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6795 = self.name;
                                    var $6796 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6796;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6797 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6797;
                                    break;
                                case 'Fm.Term.all':
                                    var $6798 = self.eras;
                                    var $6799 = self.self;
                                    var $6800 = self.name;
                                    var $6801 = self.xtyp;
                                    var $6802 = self.body;
                                    var $6803 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6803;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6804 = self.name;
                                    var $6805 = self.body;
                                    var $6806 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6806;
                                    break;
                                case 'Fm.Term.app':
                                    var $6807 = self.func;
                                    var $6808 = self.argm;
                                    var $6809 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6809;
                                    break;
                                case 'Fm.Term.let':
                                    var $6810 = self.name;
                                    var $6811 = self.expr;
                                    var $6812 = self.body;
                                    var _seen$19 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $6790(Fm$Term$var$($6788, _lv$4));
                                    var _b1_body$21 = $6812(Fm$Term$var$($6810, _lv$4));
                                    var self = Fm$Term$equal$($6789, $6811, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6814 = self.value;
                                            var $6815 = self.errors;
                                            var self = $6814;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6817 = Fm$Check$result$(Maybe$none, $6815);
                                                    var $6816 = $6817;
                                                    break;
                                                case 'Maybe.some':
                                                    var $6818 = self.value;
                                                    var self = Fm$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6820 = self.value;
                                                            var $6821 = self.errors;
                                                            var self = $6820;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $6823 = Fm$Check$result$(Maybe$none, $6821);
                                                                    var $6822 = $6823;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $6824 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($6818 && $6824)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $6826 = self.value;
                                                                            var $6827 = self.errors;
                                                                            var $6828 = Fm$Check$result$($6826, List$concat$($6821, $6827));
                                                                            var $6825 = $6828;
                                                                            break;
                                                                    };
                                                                    var $6822 = $6825;
                                                                    break;
                                                            };
                                                            var self = $6822;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6829 = self.value;
                                                            var $6830 = self.errors;
                                                            var $6831 = Fm$Check$result$($6829, List$concat$($6815, $6830));
                                                            var $6819 = $6831;
                                                            break;
                                                    };
                                                    var $6816 = $6819;
                                                    break;
                                            };
                                            var $6813 = $6816;
                                            break;
                                    };
                                    var $6791 = $6813;
                                    break;
                                case 'Fm.Term.def':
                                    var $6832 = self.name;
                                    var $6833 = self.expr;
                                    var $6834 = self.body;
                                    var $6835 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6835;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6836 = self.done;
                                    var $6837 = self.term;
                                    var $6838 = self.type;
                                    var $6839 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6839;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6840 = self.name;
                                    var $6841 = self.dref;
                                    var $6842 = self.verb;
                                    var $6843 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6843;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6844 = self.path;
                                    var $6845 = Fm$Term$equal$patch$($6844, _a$1, Bool$true);
                                    var $6791 = $6845;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6846 = self.natx;
                                    var $6847 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6847;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6848 = self.chrx;
                                    var $6849 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6849;
                                    break;
                                case 'Fm.Term.str':
                                    var $6850 = self.strx;
                                    var $6851 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6851;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6852 = self.path;
                                    var $6853 = self.expr;
                                    var $6854 = self.name;
                                    var $6855 = self.with;
                                    var $6856 = self.cses;
                                    var $6857 = self.moti;
                                    var $6858 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6858;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6859 = self.orig;
                                    var $6860 = self.expr;
                                    var $6861 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6791 = $6861;
                                    break;
                            };
                            var $6410 = $6791;
                            break;
                        case 'Fm.Term.def':
                            var $6862 = self.name;
                            var $6863 = self.expr;
                            var $6864 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6866 = self.name;
                                    var $6867 = self.indx;
                                    var $6868 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6868;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6869 = self.name;
                                    var $6870 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6870;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6871 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6871;
                                    break;
                                case 'Fm.Term.all':
                                    var $6872 = self.eras;
                                    var $6873 = self.self;
                                    var $6874 = self.name;
                                    var $6875 = self.xtyp;
                                    var $6876 = self.body;
                                    var $6877 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6877;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6878 = self.name;
                                    var $6879 = self.body;
                                    var $6880 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6880;
                                    break;
                                case 'Fm.Term.app':
                                    var $6881 = self.func;
                                    var $6882 = self.argm;
                                    var $6883 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6883;
                                    break;
                                case 'Fm.Term.let':
                                    var $6884 = self.name;
                                    var $6885 = self.expr;
                                    var $6886 = self.body;
                                    var $6887 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6887;
                                    break;
                                case 'Fm.Term.def':
                                    var $6888 = self.name;
                                    var $6889 = self.expr;
                                    var $6890 = self.body;
                                    var $6891 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6891;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6892 = self.done;
                                    var $6893 = self.term;
                                    var $6894 = self.type;
                                    var $6895 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6895;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6896 = self.name;
                                    var $6897 = self.dref;
                                    var $6898 = self.verb;
                                    var $6899 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6899;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6900 = self.path;
                                    var $6901 = Fm$Term$equal$patch$($6900, _a$1, Bool$true);
                                    var $6865 = $6901;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6902 = self.natx;
                                    var $6903 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6903;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6904 = self.chrx;
                                    var $6905 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6905;
                                    break;
                                case 'Fm.Term.str':
                                    var $6906 = self.strx;
                                    var $6907 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6907;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6908 = self.path;
                                    var $6909 = self.expr;
                                    var $6910 = self.name;
                                    var $6911 = self.with;
                                    var $6912 = self.cses;
                                    var $6913 = self.moti;
                                    var $6914 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6914;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6915 = self.orig;
                                    var $6916 = self.expr;
                                    var $6917 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6865 = $6917;
                                    break;
                            };
                            var $6410 = $6865;
                            break;
                        case 'Fm.Term.ann':
                            var $6918 = self.done;
                            var $6919 = self.term;
                            var $6920 = self.type;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6922 = self.name;
                                    var $6923 = self.indx;
                                    var $6924 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6924;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6925 = self.name;
                                    var $6926 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6926;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6927 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6927;
                                    break;
                                case 'Fm.Term.all':
                                    var $6928 = self.eras;
                                    var $6929 = self.self;
                                    var $6930 = self.name;
                                    var $6931 = self.xtyp;
                                    var $6932 = self.body;
                                    var $6933 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6933;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6934 = self.name;
                                    var $6935 = self.body;
                                    var $6936 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6936;
                                    break;
                                case 'Fm.Term.app':
                                    var $6937 = self.func;
                                    var $6938 = self.argm;
                                    var $6939 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6939;
                                    break;
                                case 'Fm.Term.let':
                                    var $6940 = self.name;
                                    var $6941 = self.expr;
                                    var $6942 = self.body;
                                    var $6943 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6943;
                                    break;
                                case 'Fm.Term.def':
                                    var $6944 = self.name;
                                    var $6945 = self.expr;
                                    var $6946 = self.body;
                                    var $6947 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6947;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6948 = self.done;
                                    var $6949 = self.term;
                                    var $6950 = self.type;
                                    var $6951 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6951;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6952 = self.name;
                                    var $6953 = self.dref;
                                    var $6954 = self.verb;
                                    var $6955 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6955;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6956 = self.path;
                                    var $6957 = Fm$Term$equal$patch$($6956, _a$1, Bool$true);
                                    var $6921 = $6957;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6958 = self.natx;
                                    var $6959 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6959;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6960 = self.chrx;
                                    var $6961 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6961;
                                    break;
                                case 'Fm.Term.str':
                                    var $6962 = self.strx;
                                    var $6963 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6963;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6964 = self.path;
                                    var $6965 = self.expr;
                                    var $6966 = self.name;
                                    var $6967 = self.with;
                                    var $6968 = self.cses;
                                    var $6969 = self.moti;
                                    var $6970 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6970;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6971 = self.orig;
                                    var $6972 = self.expr;
                                    var $6973 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6921 = $6973;
                                    break;
                            };
                            var $6410 = $6921;
                            break;
                        case 'Fm.Term.gol':
                            var $6974 = self.name;
                            var $6975 = self.dref;
                            var $6976 = self.verb;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6978 = self.name;
                                    var $6979 = self.indx;
                                    var $6980 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6980;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6981 = self.name;
                                    var $6982 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6982;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6983 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6983;
                                    break;
                                case 'Fm.Term.all':
                                    var $6984 = self.eras;
                                    var $6985 = self.self;
                                    var $6986 = self.name;
                                    var $6987 = self.xtyp;
                                    var $6988 = self.body;
                                    var $6989 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6989;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6990 = self.name;
                                    var $6991 = self.body;
                                    var $6992 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6992;
                                    break;
                                case 'Fm.Term.app':
                                    var $6993 = self.func;
                                    var $6994 = self.argm;
                                    var $6995 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6995;
                                    break;
                                case 'Fm.Term.let':
                                    var $6996 = self.name;
                                    var $6997 = self.expr;
                                    var $6998 = self.body;
                                    var $6999 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $6999;
                                    break;
                                case 'Fm.Term.def':
                                    var $7000 = self.name;
                                    var $7001 = self.expr;
                                    var $7002 = self.body;
                                    var $7003 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7003;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7004 = self.done;
                                    var $7005 = self.term;
                                    var $7006 = self.type;
                                    var $7007 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7007;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7008 = self.name;
                                    var $7009 = self.dref;
                                    var $7010 = self.verb;
                                    var $7011 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7011;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7012 = self.path;
                                    var $7013 = Fm$Term$equal$patch$($7012, _a$1, Bool$true);
                                    var $6977 = $7013;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7014 = self.natx;
                                    var $7015 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7015;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7016 = self.chrx;
                                    var $7017 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7017;
                                    break;
                                case 'Fm.Term.str':
                                    var $7018 = self.strx;
                                    var $7019 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7019;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7020 = self.path;
                                    var $7021 = self.expr;
                                    var $7022 = self.name;
                                    var $7023 = self.with;
                                    var $7024 = self.cses;
                                    var $7025 = self.moti;
                                    var $7026 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7026;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7027 = self.orig;
                                    var $7028 = self.expr;
                                    var $7029 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6977 = $7029;
                                    break;
                            };
                            var $6410 = $6977;
                            break;
                        case 'Fm.Term.hol':
                            var $7030 = self.path;
                            var $7031 = Fm$Term$equal$patch$($7030, _b$2, Bool$true);
                            var $6410 = $7031;
                            break;
                        case 'Fm.Term.nat':
                            var $7032 = self.natx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7034 = self.name;
                                    var $7035 = self.indx;
                                    var $7036 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7036;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7037 = self.name;
                                    var $7038 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7038;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7039 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7039;
                                    break;
                                case 'Fm.Term.all':
                                    var $7040 = self.eras;
                                    var $7041 = self.self;
                                    var $7042 = self.name;
                                    var $7043 = self.xtyp;
                                    var $7044 = self.body;
                                    var $7045 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7045;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7046 = self.name;
                                    var $7047 = self.body;
                                    var $7048 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7048;
                                    break;
                                case 'Fm.Term.app':
                                    var $7049 = self.func;
                                    var $7050 = self.argm;
                                    var $7051 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7051;
                                    break;
                                case 'Fm.Term.let':
                                    var $7052 = self.name;
                                    var $7053 = self.expr;
                                    var $7054 = self.body;
                                    var $7055 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7055;
                                    break;
                                case 'Fm.Term.def':
                                    var $7056 = self.name;
                                    var $7057 = self.expr;
                                    var $7058 = self.body;
                                    var $7059 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7059;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7060 = self.done;
                                    var $7061 = self.term;
                                    var $7062 = self.type;
                                    var $7063 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7063;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7064 = self.name;
                                    var $7065 = self.dref;
                                    var $7066 = self.verb;
                                    var $7067 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7067;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7068 = self.path;
                                    var $7069 = Fm$Term$equal$patch$($7068, _a$1, Bool$true);
                                    var $7033 = $7069;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7070 = self.natx;
                                    var $7071 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7071;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7072 = self.chrx;
                                    var $7073 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7073;
                                    break;
                                case 'Fm.Term.str':
                                    var $7074 = self.strx;
                                    var $7075 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7075;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7076 = self.path;
                                    var $7077 = self.expr;
                                    var $7078 = self.name;
                                    var $7079 = self.with;
                                    var $7080 = self.cses;
                                    var $7081 = self.moti;
                                    var $7082 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7082;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7083 = self.orig;
                                    var $7084 = self.expr;
                                    var $7085 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7033 = $7085;
                                    break;
                            };
                            var $6410 = $7033;
                            break;
                        case 'Fm.Term.chr':
                            var $7086 = self.chrx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7088 = self.name;
                                    var $7089 = self.indx;
                                    var $7090 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7090;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7091 = self.name;
                                    var $7092 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7092;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7093 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7093;
                                    break;
                                case 'Fm.Term.all':
                                    var $7094 = self.eras;
                                    var $7095 = self.self;
                                    var $7096 = self.name;
                                    var $7097 = self.xtyp;
                                    var $7098 = self.body;
                                    var $7099 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7099;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7100 = self.name;
                                    var $7101 = self.body;
                                    var $7102 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7102;
                                    break;
                                case 'Fm.Term.app':
                                    var $7103 = self.func;
                                    var $7104 = self.argm;
                                    var $7105 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7105;
                                    break;
                                case 'Fm.Term.let':
                                    var $7106 = self.name;
                                    var $7107 = self.expr;
                                    var $7108 = self.body;
                                    var $7109 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7109;
                                    break;
                                case 'Fm.Term.def':
                                    var $7110 = self.name;
                                    var $7111 = self.expr;
                                    var $7112 = self.body;
                                    var $7113 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7113;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7114 = self.done;
                                    var $7115 = self.term;
                                    var $7116 = self.type;
                                    var $7117 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7117;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7118 = self.name;
                                    var $7119 = self.dref;
                                    var $7120 = self.verb;
                                    var $7121 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7121;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7122 = self.path;
                                    var $7123 = Fm$Term$equal$patch$($7122, _a$1, Bool$true);
                                    var $7087 = $7123;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7124 = self.natx;
                                    var $7125 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7125;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7126 = self.chrx;
                                    var $7127 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7127;
                                    break;
                                case 'Fm.Term.str':
                                    var $7128 = self.strx;
                                    var $7129 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7129;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7130 = self.path;
                                    var $7131 = self.expr;
                                    var $7132 = self.name;
                                    var $7133 = self.with;
                                    var $7134 = self.cses;
                                    var $7135 = self.moti;
                                    var $7136 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7136;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7137 = self.orig;
                                    var $7138 = self.expr;
                                    var $7139 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7087 = $7139;
                                    break;
                            };
                            var $6410 = $7087;
                            break;
                        case 'Fm.Term.str':
                            var $7140 = self.strx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7142 = self.name;
                                    var $7143 = self.indx;
                                    var $7144 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7144;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7145 = self.name;
                                    var $7146 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7146;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7147 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7147;
                                    break;
                                case 'Fm.Term.all':
                                    var $7148 = self.eras;
                                    var $7149 = self.self;
                                    var $7150 = self.name;
                                    var $7151 = self.xtyp;
                                    var $7152 = self.body;
                                    var $7153 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7153;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7154 = self.name;
                                    var $7155 = self.body;
                                    var $7156 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7156;
                                    break;
                                case 'Fm.Term.app':
                                    var $7157 = self.func;
                                    var $7158 = self.argm;
                                    var $7159 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7159;
                                    break;
                                case 'Fm.Term.let':
                                    var $7160 = self.name;
                                    var $7161 = self.expr;
                                    var $7162 = self.body;
                                    var $7163 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7163;
                                    break;
                                case 'Fm.Term.def':
                                    var $7164 = self.name;
                                    var $7165 = self.expr;
                                    var $7166 = self.body;
                                    var $7167 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7167;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7168 = self.done;
                                    var $7169 = self.term;
                                    var $7170 = self.type;
                                    var $7171 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7171;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7172 = self.name;
                                    var $7173 = self.dref;
                                    var $7174 = self.verb;
                                    var $7175 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7175;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7176 = self.path;
                                    var $7177 = Fm$Term$equal$patch$($7176, _a$1, Bool$true);
                                    var $7141 = $7177;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7178 = self.natx;
                                    var $7179 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7179;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7180 = self.chrx;
                                    var $7181 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7181;
                                    break;
                                case 'Fm.Term.str':
                                    var $7182 = self.strx;
                                    var $7183 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7183;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7184 = self.path;
                                    var $7185 = self.expr;
                                    var $7186 = self.name;
                                    var $7187 = self.with;
                                    var $7188 = self.cses;
                                    var $7189 = self.moti;
                                    var $7190 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7190;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7191 = self.orig;
                                    var $7192 = self.expr;
                                    var $7193 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7141 = $7193;
                                    break;
                            };
                            var $6410 = $7141;
                            break;
                        case 'Fm.Term.cse':
                            var $7194 = self.path;
                            var $7195 = self.expr;
                            var $7196 = self.name;
                            var $7197 = self.with;
                            var $7198 = self.cses;
                            var $7199 = self.moti;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7201 = self.name;
                                    var $7202 = self.indx;
                                    var $7203 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7203;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7204 = self.name;
                                    var $7205 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7205;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7206 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7206;
                                    break;
                                case 'Fm.Term.all':
                                    var $7207 = self.eras;
                                    var $7208 = self.self;
                                    var $7209 = self.name;
                                    var $7210 = self.xtyp;
                                    var $7211 = self.body;
                                    var $7212 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7212;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7213 = self.name;
                                    var $7214 = self.body;
                                    var $7215 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7215;
                                    break;
                                case 'Fm.Term.app':
                                    var $7216 = self.func;
                                    var $7217 = self.argm;
                                    var $7218 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7218;
                                    break;
                                case 'Fm.Term.let':
                                    var $7219 = self.name;
                                    var $7220 = self.expr;
                                    var $7221 = self.body;
                                    var $7222 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7222;
                                    break;
                                case 'Fm.Term.def':
                                    var $7223 = self.name;
                                    var $7224 = self.expr;
                                    var $7225 = self.body;
                                    var $7226 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7226;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7227 = self.done;
                                    var $7228 = self.term;
                                    var $7229 = self.type;
                                    var $7230 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7230;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7231 = self.name;
                                    var $7232 = self.dref;
                                    var $7233 = self.verb;
                                    var $7234 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7234;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7235 = self.path;
                                    var $7236 = Fm$Term$equal$patch$($7235, _a$1, Bool$true);
                                    var $7200 = $7236;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7237 = self.natx;
                                    var $7238 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7238;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7239 = self.chrx;
                                    var $7240 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7240;
                                    break;
                                case 'Fm.Term.str':
                                    var $7241 = self.strx;
                                    var $7242 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7242;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7243 = self.path;
                                    var $7244 = self.expr;
                                    var $7245 = self.name;
                                    var $7246 = self.with;
                                    var $7247 = self.cses;
                                    var $7248 = self.moti;
                                    var $7249 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7249;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7250 = self.orig;
                                    var $7251 = self.expr;
                                    var $7252 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7200 = $7252;
                                    break;
                            };
                            var $6410 = $7200;
                            break;
                        case 'Fm.Term.ori':
                            var $7253 = self.orig;
                            var $7254 = self.expr;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7256 = self.name;
                                    var $7257 = self.indx;
                                    var $7258 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7258;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7259 = self.name;
                                    var $7260 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7260;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7261 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7261;
                                    break;
                                case 'Fm.Term.all':
                                    var $7262 = self.eras;
                                    var $7263 = self.self;
                                    var $7264 = self.name;
                                    var $7265 = self.xtyp;
                                    var $7266 = self.body;
                                    var $7267 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7267;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7268 = self.name;
                                    var $7269 = self.body;
                                    var $7270 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7270;
                                    break;
                                case 'Fm.Term.app':
                                    var $7271 = self.func;
                                    var $7272 = self.argm;
                                    var $7273 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7273;
                                    break;
                                case 'Fm.Term.let':
                                    var $7274 = self.name;
                                    var $7275 = self.expr;
                                    var $7276 = self.body;
                                    var $7277 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7277;
                                    break;
                                case 'Fm.Term.def':
                                    var $7278 = self.name;
                                    var $7279 = self.expr;
                                    var $7280 = self.body;
                                    var $7281 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7281;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7282 = self.done;
                                    var $7283 = self.term;
                                    var $7284 = self.type;
                                    var $7285 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7285;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7286 = self.name;
                                    var $7287 = self.dref;
                                    var $7288 = self.verb;
                                    var $7289 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7289;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7290 = self.path;
                                    var $7291 = Fm$Term$equal$patch$($7290, _a$1, Bool$true);
                                    var $7255 = $7291;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7292 = self.natx;
                                    var $7293 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7293;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7294 = self.chrx;
                                    var $7295 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7295;
                                    break;
                                case 'Fm.Term.str':
                                    var $7296 = self.strx;
                                    var $7297 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7297;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7298 = self.path;
                                    var $7299 = self.expr;
                                    var $7300 = self.name;
                                    var $7301 = self.with;
                                    var $7302 = self.cses;
                                    var $7303 = self.moti;
                                    var $7304 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7304;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7305 = self.orig;
                                    var $7306 = self.expr;
                                    var $7307 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7255 = $7307;
                                    break;
                            };
                            var $6410 = $7255;
                            break;
                    };
                    var $6399 = $6410;
                };
                var $6397 = $6399;
            };
            var $6395 = $6397;
        };
        return $6395;
    };
    const Fm$Term$equal = x0 => x1 => x2 => x3 => x4 => Fm$Term$equal$(x0, x1, x2, x3, x4);
    const Set$new = Map$new;

    function Fm$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7309 = self.name;
                var $7310 = self.indx;
                var self = List$at_last$($7310, _ctx$4);
                switch (self._) {
                    case 'Maybe.none':
                        var $7312 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7309), List$nil));
                        var $7311 = $7312;
                        break;
                    case 'Maybe.some':
                        var $7313 = self.value;
                        var $7314 = Fm$Check$result$(Maybe$some$((() => {
                            var self = $7313;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7315 = self.fst;
                                    var $7316 = self.snd;
                                    var $7317 = $7316;
                                    return $7317;
                            };
                        })()), List$nil);
                        var $7311 = $7314;
                        break;
                };
                var self = $7311;
                break;
            case 'Fm.Term.ref':
                var $7318 = self.name;
                var self = Fm$get$($7318, _defs$3);
                switch (self._) {
                    case 'Maybe.none':
                        var $7320 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7318), List$nil));
                        var $7319 = $7320;
                        break;
                    case 'Maybe.some':
                        var $7321 = self.value;
                        var self = $7321;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $7323 = self.file;
                                var $7324 = self.code;
                                var $7325 = self.name;
                                var $7326 = self.term;
                                var $7327 = self.type;
                                var $7328 = self.stat;
                                var _ref_name$15 = $7325;
                                var _ref_type$16 = $7327;
                                var _ref_term$17 = $7326;
                                var _ref_stat$18 = $7328;
                                var self = _ref_stat$18;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $7330 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$waiting$(_ref_name$15), List$nil));
                                        var $7329 = $7330;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $7331 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7329 = $7331;
                                        break;
                                    case 'Fm.Status.done':
                                        var $7332 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7329 = $7332;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $7333 = self.errors;
                                        var $7334 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$indirect$(_ref_name$15), List$nil));
                                        var $7329 = $7334;
                                        break;
                                };
                                var $7322 = $7329;
                                break;
                        };
                        var $7319 = $7322;
                        break;
                };
                var self = $7319;
                break;
            case 'Fm.Term.typ':
                var $7335 = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                var self = $7335;
                break;
            case 'Fm.Term.all':
                var $7336 = self.eras;
                var $7337 = self.self;
                var $7338 = self.name;
                var $7339 = self.xtyp;
                var $7340 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Fm$Term$var$($7337, _ctx_size$12);
                var _body_var$14 = Fm$Term$var$($7338, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7338, $7339), List$cons$(Pair$new$($7337, _term$1), _ctx$4));
                var self = Fm$Term$check$($7339, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7342 = self.value;
                        var $7343 = self.errors;
                        var self = $7342;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7345 = Fm$Check$result$(Maybe$none, $7343);
                                var $7344 = $7345;
                                break;
                            case 'Maybe.some':
                                var $7346 = self.value;
                                var self = Fm$Term$check$($7340(_self_var$13)(_body_var$14), Maybe$some$(Fm$Term$typ), _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7348 = self.value;
                                        var $7349 = self.errors;
                                        var self = $7348;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7351 = Fm$Check$result$(Maybe$none, $7349);
                                                var $7350 = $7351;
                                                break;
                                            case 'Maybe.some':
                                                var $7352 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7354 = self.value;
                                                        var $7355 = self.errors;
                                                        var $7356 = Fm$Check$result$($7354, List$concat$($7349, $7355));
                                                        var $7353 = $7356;
                                                        break;
                                                };
                                                var $7350 = $7353;
                                                break;
                                        };
                                        var self = $7350;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7357 = self.value;
                                        var $7358 = self.errors;
                                        var $7359 = Fm$Check$result$($7357, List$concat$($7343, $7358));
                                        var $7347 = $7359;
                                        break;
                                };
                                var $7344 = $7347;
                                break;
                        };
                        var $7341 = $7344;
                        break;
                };
                var self = $7341;
                break;
            case 'Fm.Term.lam':
                var $7360 = self.name;
                var $7361 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.none':
                        var _lam_type$9 = Fm$Term$hol$(Bits$e);
                        var _lam_term$10 = Fm$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7363 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7362 = $7363;
                        break;
                    case 'Maybe.some':
                        var $7364 = self.value;
                        var _typv$10 = Fm$Term$reduce$($7364, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $7366 = self.name;
                                var $7367 = self.indx;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7364);
                                var $7368 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7365 = $7368;
                                break;
                            case 'Fm.Term.ref':
                                var $7369 = self.name;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7364);
                                var $7370 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7365 = $7370;
                                break;
                            case 'Fm.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($7364);
                                var $7371 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7365 = $7371;
                                break;
                            case 'Fm.Term.all':
                                var $7372 = self.eras;
                                var $7373 = self.self;
                                var $7374 = self.name;
                                var $7375 = self.xtyp;
                                var $7376 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Fm$Term$var$($7360, _ctx_size$16);
                                var _body_typ$19 = $7376(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7360, $7375), _ctx$4);
                                var self = Fm$Term$check$($7361(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Fm$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7378 = self.value;
                                        var $7379 = self.errors;
                                        var self = $7378;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7381 = Fm$Check$result$(Maybe$none, $7379);
                                                var $7380 = $7381;
                                                break;
                                            case 'Maybe.some':
                                                var $7382 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7364), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7384 = self.value;
                                                        var $7385 = self.errors;
                                                        var $7386 = Fm$Check$result$($7384, List$concat$($7379, $7385));
                                                        var $7383 = $7386;
                                                        break;
                                                };
                                                var $7380 = $7383;
                                                break;
                                        };
                                        var $7377 = $7380;
                                        break;
                                };
                                var $7365 = $7377;
                                break;
                            case 'Fm.Term.lam':
                                var $7387 = self.name;
                                var $7388 = self.body;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7364);
                                var $7389 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7365 = $7389;
                                break;
                            case 'Fm.Term.app':
                                var $7390 = self.func;
                                var $7391 = self.argm;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7364);
                                var $7392 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7365 = $7392;
                                break;
                            case 'Fm.Term.let':
                                var $7393 = self.name;
                                var $7394 = self.expr;
                                var $7395 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7364);
                                var $7396 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7365 = $7396;
                                break;
                            case 'Fm.Term.def':
                                var $7397 = self.name;
                                var $7398 = self.expr;
                                var $7399 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7364);
                                var $7400 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7365 = $7400;
                                break;
                            case 'Fm.Term.ann':
                                var $7401 = self.done;
                                var $7402 = self.term;
                                var $7403 = self.type;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7364);
                                var $7404 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7365 = $7404;
                                break;
                            case 'Fm.Term.gol':
                                var $7405 = self.name;
                                var $7406 = self.dref;
                                var $7407 = self.verb;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7364);
                                var $7408 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7365 = $7408;
                                break;
                            case 'Fm.Term.hol':
                                var $7409 = self.path;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7364);
                                var $7410 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7365 = $7410;
                                break;
                            case 'Fm.Term.nat':
                                var $7411 = self.natx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7364);
                                var $7412 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7365 = $7412;
                                break;
                            case 'Fm.Term.chr':
                                var $7413 = self.chrx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7364);
                                var $7414 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7365 = $7414;
                                break;
                            case 'Fm.Term.str':
                                var $7415 = self.strx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7364);
                                var $7416 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7365 = $7416;
                                break;
                            case 'Fm.Term.cse':
                                var $7417 = self.path;
                                var $7418 = self.expr;
                                var $7419 = self.name;
                                var $7420 = self.with;
                                var $7421 = self.cses;
                                var $7422 = self.moti;
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($7364);
                                var $7423 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7365 = $7423;
                                break;
                            case 'Fm.Term.ori':
                                var $7424 = self.orig;
                                var $7425 = self.expr;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7364);
                                var $7426 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7365 = $7426;
                                break;
                        };
                        var $7362 = $7365;
                        break;
                };
                var self = $7362;
                break;
            case 'Fm.Term.app':
                var $7427 = self.func;
                var $7428 = self.argm;
                var self = Fm$Term$check$($7427, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7430 = self.value;
                        var $7431 = self.errors;
                        var self = $7430;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7433 = Fm$Check$result$(Maybe$none, $7431);
                                var $7432 = $7433;
                                break;
                            case 'Maybe.some':
                                var $7434 = self.value;
                                var _func_typ$12 = Fm$Term$reduce$($7434, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7436 = self.name;
                                        var $7437 = self.indx;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7438 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7438;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7439 = self.name;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7440 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7440;
                                        break;
                                    case 'Fm.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $7441 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7441;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7442 = self.eras;
                                        var $7443 = self.self;
                                        var $7444 = self.name;
                                        var $7445 = self.xtyp;
                                        var $7446 = self.body;
                                        var self = Fm$Term$check$($7428, Maybe$some$($7445), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7448 = self.value;
                                                var $7449 = self.errors;
                                                var self = $7448;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7451 = Fm$Check$result$(Maybe$none, $7449);
                                                        var $7450 = $7451;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7452 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($7446($7427)($7428)), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7454 = self.value;
                                                                var $7455 = self.errors;
                                                                var $7456 = Fm$Check$result$($7454, List$concat$($7449, $7455));
                                                                var $7453 = $7456;
                                                                break;
                                                        };
                                                        var $7450 = $7453;
                                                        break;
                                                };
                                                var $7447 = $7450;
                                                break;
                                        };
                                        var self = $7447;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7457 = self.name;
                                        var $7458 = self.body;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7459 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7459;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7460 = self.func;
                                        var $7461 = self.argm;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7462 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7462;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7463 = self.name;
                                        var $7464 = self.expr;
                                        var $7465 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7466 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7466;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7467 = self.name;
                                        var $7468 = self.expr;
                                        var $7469 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7470 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7470;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7471 = self.done;
                                        var $7472 = self.term;
                                        var $7473 = self.type;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7474 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7474;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7475 = self.name;
                                        var $7476 = self.dref;
                                        var $7477 = self.verb;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7478 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7478;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7479 = self.path;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7480 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7480;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7481 = self.natx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7482 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7482;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7483 = self.chrx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7484 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7484;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7485 = self.strx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7486 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7486;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7487 = self.path;
                                        var $7488 = self.expr;
                                        var $7489 = self.name;
                                        var $7490 = self.with;
                                        var $7491 = self.cses;
                                        var $7492 = self.moti;
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $7493 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7493;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7494 = self.orig;
                                        var $7495 = self.expr;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7496 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7496;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7497 = self.value;
                                        var $7498 = self.errors;
                                        var $7499 = Fm$Check$result$($7497, List$concat$($7431, $7498));
                                        var $7435 = $7499;
                                        break;
                                };
                                var $7432 = $7435;
                                break;
                        };
                        var $7429 = $7432;
                        break;
                };
                var self = $7429;
                break;
            case 'Fm.Term.let':
                var $7500 = self.name;
                var $7501 = self.expr;
                var $7502 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7501, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7504 = self.value;
                        var $7505 = self.errors;
                        var self = $7504;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7507 = Fm$Check$result$(Maybe$none, $7505);
                                var $7506 = $7507;
                                break;
                            case 'Maybe.some':
                                var $7508 = self.value;
                                var _body_val$14 = $7502(Fm$Term$var$($7500, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7500, $7508), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7510 = self.value;
                                        var $7511 = self.errors;
                                        var self = $7510;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7513 = Fm$Check$result$(Maybe$none, $7511);
                                                var $7512 = $7513;
                                                break;
                                            case 'Maybe.some':
                                                var $7514 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7514), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7516 = self.value;
                                                        var $7517 = self.errors;
                                                        var $7518 = Fm$Check$result$($7516, List$concat$($7511, $7517));
                                                        var $7515 = $7518;
                                                        break;
                                                };
                                                var $7512 = $7515;
                                                break;
                                        };
                                        var self = $7512;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7519 = self.value;
                                        var $7520 = self.errors;
                                        var $7521 = Fm$Check$result$($7519, List$concat$($7505, $7520));
                                        var $7509 = $7521;
                                        break;
                                };
                                var $7506 = $7509;
                                break;
                        };
                        var $7503 = $7506;
                        break;
                };
                var self = $7503;
                break;
            case 'Fm.Term.def':
                var $7522 = self.name;
                var $7523 = self.expr;
                var $7524 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7523, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7526 = self.value;
                        var $7527 = self.errors;
                        var self = $7526;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7529 = Fm$Check$result$(Maybe$none, $7527);
                                var $7528 = $7529;
                                break;
                            case 'Maybe.some':
                                var $7530 = self.value;
                                var _body_val$14 = $7524(Fm$Term$ann$(Bool$true, $7523, $7530));
                                var _body_ctx$15 = List$cons$(Pair$new$($7522, $7530), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7532 = self.value;
                                        var $7533 = self.errors;
                                        var self = $7532;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7535 = Fm$Check$result$(Maybe$none, $7533);
                                                var $7534 = $7535;
                                                break;
                                            case 'Maybe.some':
                                                var $7536 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7536), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7538 = self.value;
                                                        var $7539 = self.errors;
                                                        var $7540 = Fm$Check$result$($7538, List$concat$($7533, $7539));
                                                        var $7537 = $7540;
                                                        break;
                                                };
                                                var $7534 = $7537;
                                                break;
                                        };
                                        var self = $7534;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7541 = self.value;
                                        var $7542 = self.errors;
                                        var $7543 = Fm$Check$result$($7541, List$concat$($7527, $7542));
                                        var $7531 = $7543;
                                        break;
                                };
                                var $7528 = $7531;
                                break;
                        };
                        var $7525 = $7528;
                        break;
                };
                var self = $7525;
                break;
            case 'Fm.Term.ann':
                var $7544 = self.done;
                var $7545 = self.term;
                var $7546 = self.type;
                var self = $7544;
                if (self) {
                    var $7548 = Fm$Check$result$(Maybe$some$($7546), List$nil);
                    var $7547 = $7548;
                } else {
                    var self = Fm$Term$check$($7545, Maybe$some$($7546), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $7550 = self.value;
                            var $7551 = self.errors;
                            var self = $7550;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7553 = Fm$Check$result$(Maybe$none, $7551);
                                    var $7552 = $7553;
                                    break;
                                case 'Maybe.some':
                                    var $7554 = self.value;
                                    var self = Fm$Term$check$($7546, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7556 = self.value;
                                            var $7557 = self.errors;
                                            var self = $7556;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7559 = Fm$Check$result$(Maybe$none, $7557);
                                                    var $7558 = $7559;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7560 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($7546), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7562 = self.value;
                                                            var $7563 = self.errors;
                                                            var $7564 = Fm$Check$result$($7562, List$concat$($7557, $7563));
                                                            var $7561 = $7564;
                                                            break;
                                                    };
                                                    var $7558 = $7561;
                                                    break;
                                            };
                                            var self = $7558;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7565 = self.value;
                                            var $7566 = self.errors;
                                            var $7567 = Fm$Check$result$($7565, List$concat$($7551, $7566));
                                            var $7555 = $7567;
                                            break;
                                    };
                                    var $7552 = $7555;
                                    break;
                            };
                            var $7549 = $7552;
                            break;
                    };
                    var $7547 = $7549;
                };
                var self = $7547;
                break;
            case 'Fm.Term.gol':
                var $7568 = self.name;
                var $7569 = self.dref;
                var $7570 = self.verb;
                var $7571 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$show_goal$($7568, $7569, $7570, _type$2, _ctx$4), List$nil));
                var self = $7571;
                break;
            case 'Fm.Term.hol':
                var $7572 = self.path;
                var $7573 = Fm$Check$result$(_type$2, List$nil);
                var self = $7573;
                break;
            case 'Fm.Term.nat':
                var $7574 = self.natx;
                var $7575 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Nat")), List$nil);
                var self = $7575;
                break;
            case 'Fm.Term.chr':
                var $7576 = self.chrx;
                var $7577 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Char")), List$nil);
                var self = $7577;
                break;
            case 'Fm.Term.str':
                var $7578 = self.strx;
                var $7579 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("String")), List$nil);
                var self = $7579;
                break;
            case 'Fm.Term.cse':
                var $7580 = self.path;
                var $7581 = self.expr;
                var $7582 = self.name;
                var $7583 = self.with;
                var $7584 = self.cses;
                var $7585 = self.moti;
                var _expr$13 = $7581;
                var self = Fm$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7587 = self.value;
                        var $7588 = self.errors;
                        var self = $7587;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7590 = Fm$Check$result$(Maybe$none, $7588);
                                var $7589 = $7590;
                                break;
                            case 'Maybe.some':
                                var $7591 = self.value;
                                var self = $7585;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var self = _type$2;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7594 = Fm$Term$hol$(Bits$e);
                                                var _moti$17 = $7594;
                                                break;
                                            case 'Maybe.some':
                                                var $7595 = self.value;
                                                var _size$18 = (list_length(_ctx$4));
                                                var _typv$19 = Fm$Term$normalize$($7595, Map$new);
                                                var _moti$20 = Fm$SmartMotive$make$($7582, $7581, $7591, _typv$19, _size$18, _defs$3);
                                                var $7596 = _moti$20;
                                                var _moti$17 = $7596;
                                                break;
                                        };
                                        var $7593 = Maybe$some$(Fm$Term$cse$($7580, $7581, $7582, $7583, $7584, Maybe$some$(_moti$17)));
                                        var _dsug$17 = $7593;
                                        break;
                                    case 'Maybe.some':
                                        var $7597 = self.value;
                                        var $7598 = Fm$Term$desugar_cse$($7581, $7582, $7583, $7584, $7597, $7591, _defs$3, _ctx$4);
                                        var _dsug$17 = $7598;
                                        break;
                                };
                                var self = _dsug$17;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7599 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                        var self = $7599;
                                        break;
                                    case 'Maybe.some':
                                        var $7600 = self.value;
                                        var $7601 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), $7600), List$nil));
                                        var self = $7601;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7602 = self.value;
                                        var $7603 = self.errors;
                                        var $7604 = Fm$Check$result$($7602, List$concat$($7588, $7603));
                                        var $7592 = $7604;
                                        break;
                                };
                                var $7589 = $7592;
                                break;
                        };
                        var $7586 = $7589;
                        break;
                };
                var self = $7586;
                break;
            case 'Fm.Term.ori':
                var $7605 = self.orig;
                var $7606 = self.expr;
                var $7607 = Fm$Term$check$($7606, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7605));
                var self = $7607;
                break;
        };
        switch (self._) {
            case 'Fm.Check.result':
                var $7608 = self.value;
                var $7609 = self.errors;
                var self = $7608;
                switch (self._) {
                    case 'Maybe.none':
                        var $7611 = Fm$Check$result$(Maybe$none, $7609);
                        var $7610 = $7611;
                        break;
                    case 'Maybe.some':
                        var $7612 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7614 = Fm$Check$result$(Maybe$some$($7612), List$nil);
                                var self = $7614;
                                break;
                            case 'Maybe.some':
                                var $7615 = self.value;
                                var self = Fm$Term$equal$($7615, $7612, _defs$3, (list_length(_ctx$4)), Set$new);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7617 = self.value;
                                        var $7618 = self.errors;
                                        var self = $7617;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7620 = Fm$Check$result$(Maybe$none, $7618);
                                                var $7619 = $7620;
                                                break;
                                            case 'Maybe.some':
                                                var $7621 = self.value;
                                                var self = $7621;
                                                if (self) {
                                                    var $7623 = Fm$Check$result$(Maybe$some$($7615), List$nil);
                                                    var self = $7623;
                                                } else {
                                                    var $7624 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, Either$right$($7615), Either$right$($7612), _ctx$4), List$nil));
                                                    var self = $7624;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7625 = self.value;
                                                        var $7626 = self.errors;
                                                        var $7627 = Fm$Check$result$($7625, List$concat$($7618, $7626));
                                                        var $7622 = $7627;
                                                        break;
                                                };
                                                var $7619 = $7622;
                                                break;
                                        };
                                        var $7616 = $7619;
                                        break;
                                };
                                var self = $7616;
                                break;
                        };
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $7628 = self.value;
                                var $7629 = self.errors;
                                var $7630 = Fm$Check$result$($7628, List$concat$($7609, $7629));
                                var $7613 = $7630;
                                break;
                        };
                        var $7610 = $7613;
                        break;
                };
                var $7308 = $7610;
                break;
        };
        return $7308;
    };
    const Fm$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$check$(x0, x1, x2, x3, x4, x5);

    function Fm$Path$nil$(_x$1) {
        var $7631 = _x$1;
        return $7631;
    };
    const Fm$Path$nil = x0 => Fm$Path$nil$(x0);
    const Fm$MPath$nil = Maybe$some$(Fm$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7633 = Bool$true;
                var $7632 = $7633;
                break;
            case 'List.cons':
                var $7634 = self.head;
                var $7635 = self.tail;
                var $7636 = Bool$false;
                var $7632 = $7636;
                break;
        };
        return $7632;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Fm$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $7638 = self.name;
                var $7639 = self.indx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7641 = _fn$3(_term$2);
                        var $7640 = $7641;
                        break;
                    case 'o':
                        var $7642 = self.slice(0, -1);
                        var $7643 = _term$2;
                        var $7640 = $7643;
                        break;
                    case 'i':
                        var $7644 = self.slice(0, -1);
                        var $7645 = _term$2;
                        var $7640 = $7645;
                        break;
                };
                var $7637 = $7640;
                break;
            case 'Fm.Term.ref':
                var $7646 = self.name;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7648 = _fn$3(_term$2);
                        var $7647 = $7648;
                        break;
                    case 'o':
                        var $7649 = self.slice(0, -1);
                        var $7650 = _term$2;
                        var $7647 = $7650;
                        break;
                    case 'i':
                        var $7651 = self.slice(0, -1);
                        var $7652 = _term$2;
                        var $7647 = $7652;
                        break;
                };
                var $7637 = $7647;
                break;
            case 'Fm.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7654 = _fn$3(_term$2);
                        var $7653 = $7654;
                        break;
                    case 'o':
                        var $7655 = self.slice(0, -1);
                        var $7656 = _term$2;
                        var $7653 = $7656;
                        break;
                    case 'i':
                        var $7657 = self.slice(0, -1);
                        var $7658 = _term$2;
                        var $7653 = $7658;
                        break;
                };
                var $7637 = $7653;
                break;
            case 'Fm.Term.all':
                var $7659 = self.eras;
                var $7660 = self.self;
                var $7661 = self.name;
                var $7662 = self.xtyp;
                var $7663 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7665 = _fn$3(_term$2);
                        var $7664 = $7665;
                        break;
                    case 'o':
                        var $7666 = self.slice(0, -1);
                        var $7667 = Fm$Term$all$($7659, $7660, $7661, Fm$Term$patch_at$($7666, $7662, _fn$3), $7663);
                        var $7664 = $7667;
                        break;
                    case 'i':
                        var $7668 = self.slice(0, -1);
                        var $7669 = Fm$Term$all$($7659, $7660, $7661, $7662, (_s$10 => _x$11 => {
                            var $7670 = Fm$Term$patch_at$($7668, $7663(_s$10)(_x$11), _fn$3);
                            return $7670;
                        }));
                        var $7664 = $7669;
                        break;
                };
                var $7637 = $7664;
                break;
            case 'Fm.Term.lam':
                var $7671 = self.name;
                var $7672 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7674 = _fn$3(_term$2);
                        var $7673 = $7674;
                        break;
                    case 'o':
                        var $7675 = self.slice(0, -1);
                        var $7676 = Fm$Term$lam$($7671, (_x$7 => {
                            var $7677 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7672(_x$7), _fn$3);
                            return $7677;
                        }));
                        var $7673 = $7676;
                        break;
                    case 'i':
                        var $7678 = self.slice(0, -1);
                        var $7679 = Fm$Term$lam$($7671, (_x$7 => {
                            var $7680 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7672(_x$7), _fn$3);
                            return $7680;
                        }));
                        var $7673 = $7679;
                        break;
                };
                var $7637 = $7673;
                break;
            case 'Fm.Term.app':
                var $7681 = self.func;
                var $7682 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7684 = _fn$3(_term$2);
                        var $7683 = $7684;
                        break;
                    case 'o':
                        var $7685 = self.slice(0, -1);
                        var $7686 = Fm$Term$app$(Fm$Term$patch_at$($7685, $7681, _fn$3), $7682);
                        var $7683 = $7686;
                        break;
                    case 'i':
                        var $7687 = self.slice(0, -1);
                        var $7688 = Fm$Term$app$($7681, Fm$Term$patch_at$($7687, $7682, _fn$3));
                        var $7683 = $7688;
                        break;
                };
                var $7637 = $7683;
                break;
            case 'Fm.Term.let':
                var $7689 = self.name;
                var $7690 = self.expr;
                var $7691 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7693 = _fn$3(_term$2);
                        var $7692 = $7693;
                        break;
                    case 'o':
                        var $7694 = self.slice(0, -1);
                        var $7695 = Fm$Term$let$($7689, Fm$Term$patch_at$($7694, $7690, _fn$3), $7691);
                        var $7692 = $7695;
                        break;
                    case 'i':
                        var $7696 = self.slice(0, -1);
                        var $7697 = Fm$Term$let$($7689, $7690, (_x$8 => {
                            var $7698 = Fm$Term$patch_at$($7696, $7691(_x$8), _fn$3);
                            return $7698;
                        }));
                        var $7692 = $7697;
                        break;
                };
                var $7637 = $7692;
                break;
            case 'Fm.Term.def':
                var $7699 = self.name;
                var $7700 = self.expr;
                var $7701 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7703 = _fn$3(_term$2);
                        var $7702 = $7703;
                        break;
                    case 'o':
                        var $7704 = self.slice(0, -1);
                        var $7705 = Fm$Term$def$($7699, Fm$Term$patch_at$($7704, $7700, _fn$3), $7701);
                        var $7702 = $7705;
                        break;
                    case 'i':
                        var $7706 = self.slice(0, -1);
                        var $7707 = Fm$Term$def$($7699, $7700, (_x$8 => {
                            var $7708 = Fm$Term$patch_at$($7706, $7701(_x$8), _fn$3);
                            return $7708;
                        }));
                        var $7702 = $7707;
                        break;
                };
                var $7637 = $7702;
                break;
            case 'Fm.Term.ann':
                var $7709 = self.done;
                var $7710 = self.term;
                var $7711 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7713 = _fn$3(_term$2);
                        var $7712 = $7713;
                        break;
                    case 'o':
                        var $7714 = self.slice(0, -1);
                        var $7715 = Fm$Term$ann$($7709, Fm$Term$patch_at$($7714, $7710, _fn$3), $7711);
                        var $7712 = $7715;
                        break;
                    case 'i':
                        var $7716 = self.slice(0, -1);
                        var $7717 = Fm$Term$ann$($7709, $7710, Fm$Term$patch_at$($7716, $7711, _fn$3));
                        var $7712 = $7717;
                        break;
                };
                var $7637 = $7712;
                break;
            case 'Fm.Term.gol':
                var $7718 = self.name;
                var $7719 = self.dref;
                var $7720 = self.verb;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7722 = _fn$3(_term$2);
                        var $7721 = $7722;
                        break;
                    case 'o':
                        var $7723 = self.slice(0, -1);
                        var $7724 = _term$2;
                        var $7721 = $7724;
                        break;
                    case 'i':
                        var $7725 = self.slice(0, -1);
                        var $7726 = _term$2;
                        var $7721 = $7726;
                        break;
                };
                var $7637 = $7721;
                break;
            case 'Fm.Term.hol':
                var $7727 = self.path;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7729 = _fn$3(_term$2);
                        var $7728 = $7729;
                        break;
                    case 'o':
                        var $7730 = self.slice(0, -1);
                        var $7731 = _term$2;
                        var $7728 = $7731;
                        break;
                    case 'i':
                        var $7732 = self.slice(0, -1);
                        var $7733 = _term$2;
                        var $7728 = $7733;
                        break;
                };
                var $7637 = $7728;
                break;
            case 'Fm.Term.nat':
                var $7734 = self.natx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7736 = _fn$3(_term$2);
                        var $7735 = $7736;
                        break;
                    case 'o':
                        var $7737 = self.slice(0, -1);
                        var $7738 = _term$2;
                        var $7735 = $7738;
                        break;
                    case 'i':
                        var $7739 = self.slice(0, -1);
                        var $7740 = _term$2;
                        var $7735 = $7740;
                        break;
                };
                var $7637 = $7735;
                break;
            case 'Fm.Term.chr':
                var $7741 = self.chrx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7743 = _fn$3(_term$2);
                        var $7742 = $7743;
                        break;
                    case 'o':
                        var $7744 = self.slice(0, -1);
                        var $7745 = _term$2;
                        var $7742 = $7745;
                        break;
                    case 'i':
                        var $7746 = self.slice(0, -1);
                        var $7747 = _term$2;
                        var $7742 = $7747;
                        break;
                };
                var $7637 = $7742;
                break;
            case 'Fm.Term.str':
                var $7748 = self.strx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7750 = _fn$3(_term$2);
                        var $7749 = $7750;
                        break;
                    case 'o':
                        var $7751 = self.slice(0, -1);
                        var $7752 = _term$2;
                        var $7749 = $7752;
                        break;
                    case 'i':
                        var $7753 = self.slice(0, -1);
                        var $7754 = _term$2;
                        var $7749 = $7754;
                        break;
                };
                var $7637 = $7749;
                break;
            case 'Fm.Term.cse':
                var $7755 = self.path;
                var $7756 = self.expr;
                var $7757 = self.name;
                var $7758 = self.with;
                var $7759 = self.cses;
                var $7760 = self.moti;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7762 = _fn$3(_term$2);
                        var $7761 = $7762;
                        break;
                    case 'o':
                        var $7763 = self.slice(0, -1);
                        var $7764 = _term$2;
                        var $7761 = $7764;
                        break;
                    case 'i':
                        var $7765 = self.slice(0, -1);
                        var $7766 = _term$2;
                        var $7761 = $7766;
                        break;
                };
                var $7637 = $7761;
                break;
            case 'Fm.Term.ori':
                var $7767 = self.orig;
                var $7768 = self.expr;
                var $7769 = Fm$Term$ori$($7767, Fm$Term$patch_at$(_path$1, $7768, _fn$3));
                var $7637 = $7769;
                break;
        };
        return $7637;
    };
    const Fm$Term$patch_at = x0 => x1 => x2 => Fm$Term$patch_at$(x0, x1, x2);

    function Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, _errs$7, _fixd$8) {
        var self = _errs$7;
        switch (self._) {
            case 'List.nil':
                var self = _fixd$8;
                if (self) {
                    var _type$9 = Fm$Term$bind$(List$nil, (_x$9 => {
                        var $7773 = (_x$9 + '1');
                        return $7773;
                    }), _type$5);
                    var _term$10 = Fm$Term$bind$(List$nil, (_x$10 => {
                        var $7774 = (_x$10 + '0');
                        return $7774;
                    }), _term$4);
                    var _defs$11 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$10, _type$9, Fm$Status$init), _defs$6);
                    var $7772 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7775 = _m$pure$13;
                        return $7775;
                    }))(Maybe$some$(_defs$11));
                    var $7771 = $7772;
                } else {
                    var $7776 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7777 = _m$pure$10;
                        return $7777;
                    }))(Maybe$none);
                    var $7771 = $7776;
                };
                var $7770 = $7771;
                break;
            case 'List.cons':
                var $7778 = self.head;
                var $7779 = self.tail;
                var self = $7778;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $7781 = self.origin;
                        var $7782 = self.expected;
                        var $7783 = self.detected;
                        var $7784 = self.context;
                        var $7785 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $7779, _fixd$8);
                        var $7780 = $7785;
                        break;
                    case 'Fm.Error.show_goal':
                        var $7786 = self.name;
                        var $7787 = self.dref;
                        var $7788 = self.verb;
                        var $7789 = self.goal;
                        var $7790 = self.context;
                        var $7791 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $7779, _fixd$8);
                        var $7780 = $7791;
                        break;
                    case 'Fm.Error.waiting':
                        var $7792 = self.name;
                        var $7793 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                            var $7794 = _m$bind$12;
                            return $7794;
                        }))(Fm$Synth$one$($7792, _defs$6))((_defs$12 => {
                            var $7795 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$12, $7779, Bool$true);
                            return $7795;
                        }));
                        var $7780 = $7793;
                        break;
                    case 'Fm.Error.indirect':
                        var $7796 = self.name;
                        var $7797 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $7779, _fixd$8);
                        var $7780 = $7797;
                        break;
                    case 'Fm.Error.patch':
                        var $7798 = self.path;
                        var $7799 = self.term;
                        var self = $7798;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'e':
                                var $7801 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                                    var $7802 = _m$pure$14;
                                    return $7802;
                                }))(Maybe$none);
                                var $7800 = $7801;
                                break;
                            case 'o':
                                var $7803 = self.slice(0, -1);
                                var _term$14 = Fm$Term$patch_at$($7803, _term$4, (_x$14 => {
                                    var $7805 = $7799;
                                    return $7805;
                                }));
                                var $7804 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$14, _type$5, _defs$6, $7779, Bool$true);
                                var $7800 = $7804;
                                break;
                            case 'i':
                                var $7806 = self.slice(0, -1);
                                var _type$14 = Fm$Term$patch_at$($7806, _type$5, (_x$14 => {
                                    var $7808 = $7799;
                                    return $7808;
                                }));
                                var $7807 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$14, _defs$6, $7779, Bool$true);
                                var $7800 = $7807;
                                break;
                        };
                        var $7780 = $7800;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $7809 = self.origin;
                        var $7810 = self.name;
                        var $7811 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                            var $7812 = _m$bind$13;
                            return $7812;
                        }))(Fm$Synth$one$($7810, _defs$6))((_defs$13 => {
                            var $7813 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$13, $7779, Bool$true);
                            return $7813;
                        }));
                        var $7780 = $7811;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $7814 = self.origin;
                        var $7815 = self.term;
                        var $7816 = self.context;
                        var $7817 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $7779, _fixd$8);
                        var $7780 = $7817;
                        break;
                };
                var $7770 = $7780;
                break;
        };
        return $7770;
    };
    const Fm$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Status$fail$(_errors$1) {
        var $7818 = ({
            _: 'Fm.Status.fail',
            'errors': _errors$1
        });
        return $7818;
    };
    const Fm$Status$fail = x0 => Fm$Status$fail$(x0);

    function Fm$Synth$one$(_name$1, _defs$2) {
        var self = Fm$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.none':
                var $7820 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7821 = _m$bind$3;
                    return $7821;
                }))(Fm$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.none':
                            var $7823 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $7824 = _m$pure$5;
                                return $7824;
                            }))(_defs$2);
                            var $7822 = $7823;
                            break;
                        case 'Maybe.some':
                            var $7825 = self.value;
                            var $7826 = Fm$Synth$one$(_name$1, $7825);
                            var $7822 = $7826;
                            break;
                    };
                    return $7822;
                }));
                var $7819 = $7820;
                break;
            case 'Maybe.some':
                var $7827 = self.value;
                var self = $7827;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $7829 = self.file;
                        var $7830 = self.code;
                        var $7831 = self.name;
                        var $7832 = self.term;
                        var $7833 = self.type;
                        var $7834 = self.stat;
                        var _file$10 = $7829;
                        var _code$11 = $7830;
                        var _name$12 = $7831;
                        var _term$13 = $7832;
                        var _type$14 = $7833;
                        var _stat$15 = $7834;
                        var self = _stat$15;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var _defs$16 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, Fm$Status$wait), _defs$2);
                                var self = Fm$Term$check$(_type$14, Maybe$some$(Fm$Term$typ), _defs$16, List$nil, Fm$MPath$i$(Fm$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7837 = self.value;
                                        var $7838 = self.errors;
                                        var self = $7837;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7840 = Fm$Check$result$(Maybe$none, $7838);
                                                var $7839 = $7840;
                                                break;
                                            case 'Maybe.some':
                                                var $7841 = self.value;
                                                var self = Fm$Term$check$(_term$13, Maybe$some$(_type$14), _defs$16, List$nil, Fm$MPath$o$(Fm$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7843 = self.value;
                                                        var $7844 = self.errors;
                                                        var self = $7843;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7846 = Fm$Check$result$(Maybe$none, $7844);
                                                                var $7845 = $7846;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $7847 = self.value;
                                                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Fm.Check.result':
                                                                        var $7849 = self.value;
                                                                        var $7850 = self.errors;
                                                                        var $7851 = Fm$Check$result$($7849, List$concat$($7844, $7850));
                                                                        var $7848 = $7851;
                                                                        break;
                                                                };
                                                                var $7845 = $7848;
                                                                break;
                                                        };
                                                        var self = $7845;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7852 = self.value;
                                                        var $7853 = self.errors;
                                                        var $7854 = Fm$Check$result$($7852, List$concat$($7838, $7853));
                                                        var $7842 = $7854;
                                                        break;
                                                };
                                                var $7839 = $7842;
                                                break;
                                        };
                                        var _checked$17 = $7839;
                                        break;
                                };
                                var self = _checked$17;
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7855 = self.value;
                                        var $7856 = self.errors;
                                        var self = List$is_empty$($7856);
                                        if (self) {
                                            var _defs$20 = Fm$define$(_file$10, _code$11, _name$12, _term$13, _type$14, Bool$true, _defs$16);
                                            var $7858 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                var $7859 = _m$pure$22;
                                                return $7859;
                                            }))(_defs$20);
                                            var $7857 = $7858;
                                        } else {
                                            var $7860 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                var $7861 = _m$bind$20;
                                                return $7861;
                                            }))(Fm$Synth$fix$(_file$10, _code$11, _name$12, _term$13, _type$14, _defs$16, $7856, Bool$false))((_fixed$20 => {
                                                var self = _fixed$20;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var _stat$21 = Fm$Status$fail$($7856);
                                                        var _defs$22 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, _stat$21), _defs$16);
                                                        var $7863 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                            var $7864 = _m$pure$24;
                                                            return $7864;
                                                        }))(_defs$22);
                                                        var $7862 = $7863;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7865 = self.value;
                                                        var $7866 = Fm$Synth$one$(_name$12, $7865);
                                                        var $7862 = $7866;
                                                        break;
                                                };
                                                return $7862;
                                            }));
                                            var $7857 = $7860;
                                        };
                                        var $7836 = $7857;
                                        break;
                                };
                                var $7835 = $7836;
                                break;
                            case 'Fm.Status.wait':
                                var $7867 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7868 = _m$pure$17;
                                    return $7868;
                                }))(_defs$2);
                                var $7835 = $7867;
                                break;
                            case 'Fm.Status.done':
                                var $7869 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7870 = _m$pure$17;
                                    return $7870;
                                }))(_defs$2);
                                var $7835 = $7869;
                                break;
                            case 'Fm.Status.fail':
                                var $7871 = self.errors;
                                var $7872 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                    var $7873 = _m$pure$18;
                                    return $7873;
                                }))(_defs$2);
                                var $7835 = $7872;
                                break;
                        };
                        var $7828 = $7835;
                        break;
                };
                var $7819 = $7828;
                break;
        };
        return $7819;
    };
    const Fm$Synth$one = x0 => x1 => Fm$Synth$one$(x0, x1);

    function Map$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'Map.new':
                var $7875 = Map$new;
                var $7874 = $7875;
                break;
            case 'Map.tie':
                var $7876 = self.val;
                var $7877 = self.lft;
                var $7878 = self.rgt;
                var self = $7876;
                switch (self._) {
                    case 'Maybe.none':
                        var $7880 = Maybe$none;
                        var _val$8 = $7880;
                        break;
                    case 'Maybe.some':
                        var $7881 = self.value;
                        var $7882 = Maybe$some$(_fn$3($7881));
                        var _val$8 = $7882;
                        break;
                };
                var _lft$9 = Map$map$(_fn$3, $7877);
                var _rgt$10 = Map$map$(_fn$3, $7878);
                var $7879 = Map$tie$(_val$8, _lft$9, _rgt$10);
                var $7874 = $7879;
                break;
        };
        return $7874;
    };
    const Map$map = x0 => x1 => Map$map$(x0, x1);
    const Fm$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Fm.Check.pure", List$cons$("Fm.Check.bind", List$cons$("Fm.Check.monad", List$cons$("Fm.Check.value", List$cons$("Fm.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7884 = Pair$new$((fm_name_to_bits(_x$2)), Unit$new);
            return $7884;
        }));
        var $7883 = Map$from_list$(_kvs$2);
        return $7883;
    })();

    function Fm$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7886 = self.name;
                var $7887 = self.indx;
                var $7888 = _term$1;
                var $7885 = $7888;
                break;
            case 'Fm.Term.ref':
                var $7889 = self.name;
                var _inli$4 = Set$has$((fm_name_to_bits($7889)), Fm$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Fm$get$($7889, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $7892 = Fm$Term$ref$($7889);
                            var $7891 = $7892;
                            break;
                        case 'Maybe.some':
                            var $7893 = self.value;
                            var self = $7893;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $7895 = self.file;
                                    var $7896 = self.code;
                                    var $7897 = self.name;
                                    var $7898 = self.term;
                                    var $7899 = self.type;
                                    var $7900 = self.stat;
                                    var $7901 = Fm$Term$inline$reduce$($7898, _defs$2);
                                    var $7894 = $7901;
                                    break;
                            };
                            var $7891 = $7894;
                            break;
                    };
                    var $7890 = $7891;
                } else {
                    var $7902 = _term$1;
                    var $7890 = $7902;
                };
                var $7885 = $7890;
                break;
            case 'Fm.Term.typ':
                var $7903 = _term$1;
                var $7885 = $7903;
                break;
            case 'Fm.Term.all':
                var $7904 = self.eras;
                var $7905 = self.self;
                var $7906 = self.name;
                var $7907 = self.xtyp;
                var $7908 = self.body;
                var $7909 = _term$1;
                var $7885 = $7909;
                break;
            case 'Fm.Term.lam':
                var $7910 = self.name;
                var $7911 = self.body;
                var $7912 = _term$1;
                var $7885 = $7912;
                break;
            case 'Fm.Term.app':
                var $7913 = self.func;
                var $7914 = self.argm;
                var _func$5 = Fm$Term$inline$reduce$($7913, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $7916 = self.name;
                        var $7917 = self.indx;
                        var $7918 = _term$1;
                        var $7915 = $7918;
                        break;
                    case 'Fm.Term.ref':
                        var $7919 = self.name;
                        var $7920 = _term$1;
                        var $7915 = $7920;
                        break;
                    case 'Fm.Term.typ':
                        var $7921 = _term$1;
                        var $7915 = $7921;
                        break;
                    case 'Fm.Term.all':
                        var $7922 = self.eras;
                        var $7923 = self.self;
                        var $7924 = self.name;
                        var $7925 = self.xtyp;
                        var $7926 = self.body;
                        var $7927 = _term$1;
                        var $7915 = $7927;
                        break;
                    case 'Fm.Term.lam':
                        var $7928 = self.name;
                        var $7929 = self.body;
                        var $7930 = Fm$Term$inline$reduce$($7929($7914), _defs$2);
                        var $7915 = $7930;
                        break;
                    case 'Fm.Term.app':
                        var $7931 = self.func;
                        var $7932 = self.argm;
                        var $7933 = _term$1;
                        var $7915 = $7933;
                        break;
                    case 'Fm.Term.let':
                        var $7934 = self.name;
                        var $7935 = self.expr;
                        var $7936 = self.body;
                        var $7937 = Fm$Term$let$($7934, $7935, (_x$9 => {
                            var $7938 = Fm$Term$inline$reduce$(Fm$Term$app$($7936(_x$9), $7914), _defs$2);
                            return $7938;
                        }));
                        var $7915 = $7937;
                        break;
                    case 'Fm.Term.def':
                        var $7939 = self.name;
                        var $7940 = self.expr;
                        var $7941 = self.body;
                        var $7942 = _term$1;
                        var $7915 = $7942;
                        break;
                    case 'Fm.Term.ann':
                        var $7943 = self.done;
                        var $7944 = self.term;
                        var $7945 = self.type;
                        var $7946 = _term$1;
                        var $7915 = $7946;
                        break;
                    case 'Fm.Term.gol':
                        var $7947 = self.name;
                        var $7948 = self.dref;
                        var $7949 = self.verb;
                        var $7950 = _term$1;
                        var $7915 = $7950;
                        break;
                    case 'Fm.Term.hol':
                        var $7951 = self.path;
                        var $7952 = _term$1;
                        var $7915 = $7952;
                        break;
                    case 'Fm.Term.nat':
                        var $7953 = self.natx;
                        var $7954 = _term$1;
                        var $7915 = $7954;
                        break;
                    case 'Fm.Term.chr':
                        var $7955 = self.chrx;
                        var $7956 = _term$1;
                        var $7915 = $7956;
                        break;
                    case 'Fm.Term.str':
                        var $7957 = self.strx;
                        var $7958 = _term$1;
                        var $7915 = $7958;
                        break;
                    case 'Fm.Term.cse':
                        var $7959 = self.path;
                        var $7960 = self.expr;
                        var $7961 = self.name;
                        var $7962 = self.with;
                        var $7963 = self.cses;
                        var $7964 = self.moti;
                        var $7965 = _term$1;
                        var $7915 = $7965;
                        break;
                    case 'Fm.Term.ori':
                        var $7966 = self.orig;
                        var $7967 = self.expr;
                        var $7968 = _term$1;
                        var $7915 = $7968;
                        break;
                };
                var $7885 = $7915;
                break;
            case 'Fm.Term.let':
                var $7969 = self.name;
                var $7970 = self.expr;
                var $7971 = self.body;
                var $7972 = _term$1;
                var $7885 = $7972;
                break;
            case 'Fm.Term.def':
                var $7973 = self.name;
                var $7974 = self.expr;
                var $7975 = self.body;
                var $7976 = _term$1;
                var $7885 = $7976;
                break;
            case 'Fm.Term.ann':
                var $7977 = self.done;
                var $7978 = self.term;
                var $7979 = self.type;
                var $7980 = _term$1;
                var $7885 = $7980;
                break;
            case 'Fm.Term.gol':
                var $7981 = self.name;
                var $7982 = self.dref;
                var $7983 = self.verb;
                var $7984 = _term$1;
                var $7885 = $7984;
                break;
            case 'Fm.Term.hol':
                var $7985 = self.path;
                var $7986 = _term$1;
                var $7885 = $7986;
                break;
            case 'Fm.Term.nat':
                var $7987 = self.natx;
                var $7988 = _term$1;
                var $7885 = $7988;
                break;
            case 'Fm.Term.chr':
                var $7989 = self.chrx;
                var $7990 = _term$1;
                var $7885 = $7990;
                break;
            case 'Fm.Term.str':
                var $7991 = self.strx;
                var $7992 = _term$1;
                var $7885 = $7992;
                break;
            case 'Fm.Term.cse':
                var $7993 = self.path;
                var $7994 = self.expr;
                var $7995 = self.name;
                var $7996 = self.with;
                var $7997 = self.cses;
                var $7998 = self.moti;
                var $7999 = _term$1;
                var $7885 = $7999;
                break;
            case 'Fm.Term.ori':
                var $8000 = self.orig;
                var $8001 = self.expr;
                var $8002 = Fm$Term$inline$reduce$($8001, _defs$2);
                var $7885 = $8002;
                break;
        };
        return $7885;
    };
    const Fm$Term$inline$reduce = x0 => x1 => Fm$Term$inline$reduce$(x0, x1);

    function Fm$Term$inline$(_term$1, _defs$2) {
        var self = Fm$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $8004 = self.name;
                var $8005 = self.indx;
                var $8006 = Fm$Term$var$($8004, $8005);
                var $8003 = $8006;
                break;
            case 'Fm.Term.ref':
                var $8007 = self.name;
                var $8008 = Fm$Term$ref$($8007);
                var $8003 = $8008;
                break;
            case 'Fm.Term.typ':
                var $8009 = Fm$Term$typ;
                var $8003 = $8009;
                break;
            case 'Fm.Term.all':
                var $8010 = self.eras;
                var $8011 = self.self;
                var $8012 = self.name;
                var $8013 = self.xtyp;
                var $8014 = self.body;
                var $8015 = Fm$Term$all$($8010, $8011, $8012, Fm$Term$inline$($8013, _defs$2), (_s$8 => _x$9 => {
                    var $8016 = Fm$Term$inline$($8014(_s$8)(_x$9), _defs$2);
                    return $8016;
                }));
                var $8003 = $8015;
                break;
            case 'Fm.Term.lam':
                var $8017 = self.name;
                var $8018 = self.body;
                var $8019 = Fm$Term$lam$($8017, (_x$5 => {
                    var $8020 = Fm$Term$inline$($8018(_x$5), _defs$2);
                    return $8020;
                }));
                var $8003 = $8019;
                break;
            case 'Fm.Term.app':
                var $8021 = self.func;
                var $8022 = self.argm;
                var $8023 = Fm$Term$app$(Fm$Term$inline$($8021, _defs$2), Fm$Term$inline$($8022, _defs$2));
                var $8003 = $8023;
                break;
            case 'Fm.Term.let':
                var $8024 = self.name;
                var $8025 = self.expr;
                var $8026 = self.body;
                var $8027 = Fm$Term$let$($8024, Fm$Term$inline$($8025, _defs$2), (_x$6 => {
                    var $8028 = Fm$Term$inline$($8026(_x$6), _defs$2);
                    return $8028;
                }));
                var $8003 = $8027;
                break;
            case 'Fm.Term.def':
                var $8029 = self.name;
                var $8030 = self.expr;
                var $8031 = self.body;
                var $8032 = Fm$Term$def$($8029, Fm$Term$inline$($8030, _defs$2), (_x$6 => {
                    var $8033 = Fm$Term$inline$($8031(_x$6), _defs$2);
                    return $8033;
                }));
                var $8003 = $8032;
                break;
            case 'Fm.Term.ann':
                var $8034 = self.done;
                var $8035 = self.term;
                var $8036 = self.type;
                var $8037 = Fm$Term$ann$($8034, Fm$Term$inline$($8035, _defs$2), Fm$Term$inline$($8036, _defs$2));
                var $8003 = $8037;
                break;
            case 'Fm.Term.gol':
                var $8038 = self.name;
                var $8039 = self.dref;
                var $8040 = self.verb;
                var $8041 = Fm$Term$gol$($8038, $8039, $8040);
                var $8003 = $8041;
                break;
            case 'Fm.Term.hol':
                var $8042 = self.path;
                var $8043 = Fm$Term$hol$($8042);
                var $8003 = $8043;
                break;
            case 'Fm.Term.nat':
                var $8044 = self.natx;
                var $8045 = Fm$Term$nat$($8044);
                var $8003 = $8045;
                break;
            case 'Fm.Term.chr':
                var $8046 = self.chrx;
                var $8047 = Fm$Term$chr$($8046);
                var $8003 = $8047;
                break;
            case 'Fm.Term.str':
                var $8048 = self.strx;
                var $8049 = Fm$Term$str$($8048);
                var $8003 = $8049;
                break;
            case 'Fm.Term.cse':
                var $8050 = self.path;
                var $8051 = self.expr;
                var $8052 = self.name;
                var $8053 = self.with;
                var $8054 = self.cses;
                var $8055 = self.moti;
                var $8056 = _term$1;
                var $8003 = $8056;
                break;
            case 'Fm.Term.ori':
                var $8057 = self.orig;
                var $8058 = self.expr;
                var $8059 = Fm$Term$inline$($8058, _defs$2);
                var $8003 = $8059;
                break;
        };
        return $8003;
    };
    const Fm$Term$inline = x0 => x1 => Fm$Term$inline$(x0, x1);

    function Map$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8061 = _list$3;
                var $8060 = $8061;
                break;
            case 'Map.tie':
                var $8062 = self.val;
                var $8063 = self.lft;
                var $8064 = self.rgt;
                var self = $8062;
                switch (self._) {
                    case 'Maybe.none':
                        var $8066 = _list$3;
                        var _list0$7 = $8066;
                        break;
                    case 'Maybe.some':
                        var $8067 = self.value;
                        var $8068 = List$cons$($8067, _list$3);
                        var _list0$7 = $8068;
                        break;
                };
                var _list1$8 = Map$values$go$($8063, _list0$7);
                var _list2$9 = Map$values$go$($8064, _list1$8);
                var $8065 = _list2$9;
                var $8060 = $8065;
                break;
        };
        return $8060;
    };
    const Map$values$go = x0 => x1 => Map$values$go$(x0, x1);

    function Map$values$(_xs$2) {
        var $8069 = Map$values$go$(_xs$2, List$nil);
        return $8069;
    };
    const Map$values = x0 => Map$values$(x0);

    function Fm$Term$core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Fm$Term$core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Fm$Term$core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Fm$Term$core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $8071 = _name$2;
                        var $8070 = $8071;
                    } else {
                        var $8072 = (self - 1n);
                        var $8073 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $8070 = $8073;
                    };
                    return $8070;
                } else {
                    var $8074 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.nil':
                            var $8076 = "unbound";
                            var $8075 = $8076;
                            break;
                        case 'List.cons':
                            var $8077 = self.head;
                            var $8078 = self.tail;
                            var self = (_name$2 === $8077);
                            if (self) {
                                var $8080 = Nat$succ$(_brui$3);
                                var _brui$8 = $8080;
                            } else {
                                var $8081 = _brui$3;
                                var _brui$8 = $8081;
                            };
                            var $8079 = Fm$Term$core$var_name$($8074, _name$2, _brui$8, $8078);
                            var $8075 = $8079;
                            break;
                    };
                    return $8075;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$core$var_name = x0 => x1 => x2 => x3 => Fm$Term$core$var_name$(x0, x1, x2, x3);

    function Fm$Name$show$(_name$1) {
        var $8082 = _name$1;
        return $8082;
    };
    const Fm$Name$show = x0 => Fm$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8084 = 0n;
                var $8083 = $8084;
                break;
            case 'o':
                var $8085 = self.slice(0, -1);
                var $8086 = (2n * Bits$to_nat$($8085));
                var $8083 = $8086;
                break;
            case 'i':
                var $8087 = self.slice(0, -1);
                var $8088 = Nat$succ$((2n * Bits$to_nat$($8087)));
                var $8083 = $8088;
                break;
        };
        return $8083;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $8090 = u16_to_word(self);
                var $8091 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($8090)));
                var $8089 = $8091;
                break;
        };
        return $8089;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Fm$escape$char$(_chr$1) {
        var self = (_chr$1 === Fm$backslash);
        if (self) {
            var $8093 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
            var $8092 = $8093;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $8095 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                var $8094 = $8095;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $8097 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                    var $8096 = $8097;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $8099 = String$cons$(_chr$1, String$nil);
                        var $8098 = $8099;
                    } else {
                        var $8100 = String$flatten$(List$cons$(String$cons$(Fm$backslash, String$nil), List$cons$("u{", List$cons$(U16$show_hex$(_chr$1), List$cons$("}", List$cons$(String$nil, List$nil))))));
                        var $8098 = $8100;
                    };
                    var $8096 = $8098;
                };
                var $8094 = $8096;
            };
            var $8092 = $8094;
        };
        return $8092;
    };
    const Fm$escape$char = x0 => Fm$escape$char$(x0);

    function Fm$escape$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8102 = String$nil;
            var $8101 = $8102;
        } else {
            var $8103 = self.charCodeAt(0);
            var $8104 = self.slice(1);
            var _head$4 = Fm$escape$char$($8103);
            var _tail$5 = Fm$escape$($8104);
            var $8105 = (_head$4 + _tail$5);
            var $8101 = $8105;
        };
        return $8101;
    };
    const Fm$escape = x0 => Fm$escape$(x0);

    function Fm$Term$core$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8107 = self.name;
                var $8108 = self.indx;
                var $8109 = Fm$Term$core$var_name$(Nat$pred$((_indx$2 - $8108 <= 0n ? 0n : _indx$2 - $8108)), $8107, 0n, _vars$3);
                var $8106 = $8109;
                break;
            case 'Fm.Term.ref':
                var $8110 = self.name;
                var $8111 = Fm$Name$show$($8110);
                var $8106 = $8111;
                break;
            case 'Fm.Term.typ':
                var $8112 = "*";
                var $8106 = $8112;
                break;
            case 'Fm.Term.all':
                var $8113 = self.eras;
                var $8114 = self.self;
                var $8115 = self.name;
                var $8116 = self.xtyp;
                var $8117 = self.body;
                var _eras$9 = $8113;
                var self = _eras$9;
                if (self) {
                    var $8119 = "%";
                    var _init$10 = $8119;
                } else {
                    var $8120 = "@";
                    var _init$10 = $8120;
                };
                var _self$11 = Fm$Name$show$($8114);
                var _name$12 = Fm$Name$show$($8115);
                var _xtyp$13 = Fm$Term$core$($8116, _indx$2, _vars$3);
                var _body$14 = Fm$Term$core$($8117(Fm$Term$var$($8114, _indx$2))(Fm$Term$var$($8115, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($8115, List$cons$($8114, _vars$3)));
                var $8118 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $8106 = $8118;
                break;
            case 'Fm.Term.lam':
                var $8121 = self.name;
                var $8122 = self.body;
                var _name$6 = Fm$Name$show$($8121);
                var _body$7 = Fm$Term$core$($8122(Fm$Term$var$($8121, _indx$2)), Nat$succ$(_indx$2), List$cons$($8121, _vars$3));
                var $8123 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $8106 = $8123;
                break;
            case 'Fm.Term.app':
                var $8124 = self.func;
                var $8125 = self.argm;
                var _func$6 = Fm$Term$core$($8124, _indx$2, _vars$3);
                var _argm$7 = Fm$Term$core$($8125, _indx$2, _vars$3);
                var $8126 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $8106 = $8126;
                break;
            case 'Fm.Term.let':
                var $8127 = self.name;
                var $8128 = self.expr;
                var $8129 = self.body;
                var _name$7 = Fm$Name$show$($8127);
                var _expr$8 = Fm$Term$core$($8128, _indx$2, _vars$3);
                var _body$9 = Fm$Term$core$($8129(Fm$Term$var$($8127, _indx$2)), Nat$succ$(_indx$2), List$cons$($8127, _vars$3));
                var $8130 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8106 = $8130;
                break;
            case 'Fm.Term.def':
                var $8131 = self.name;
                var $8132 = self.expr;
                var $8133 = self.body;
                var _name$7 = Fm$Name$show$($8131);
                var _expr$8 = Fm$Term$core$($8132, _indx$2, _vars$3);
                var _body$9 = Fm$Term$core$($8133(Fm$Term$var$($8131, _indx$2)), Nat$succ$(_indx$2), List$cons$($8131, _vars$3));
                var $8134 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8106 = $8134;
                break;
            case 'Fm.Term.ann':
                var $8135 = self.done;
                var $8136 = self.term;
                var $8137 = self.type;
                var _term$7 = Fm$Term$core$($8136, _indx$2, _vars$3);
                var _type$8 = Fm$Term$core$($8137, _indx$2, _vars$3);
                var $8138 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $8106 = $8138;
                break;
            case 'Fm.Term.gol':
                var $8139 = self.name;
                var $8140 = self.dref;
                var $8141 = self.verb;
                var $8142 = "<GOL>";
                var $8106 = $8142;
                break;
            case 'Fm.Term.hol':
                var $8143 = self.path;
                var $8144 = "<HOL>";
                var $8106 = $8144;
                break;
            case 'Fm.Term.nat':
                var $8145 = self.natx;
                var $8146 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($8145), List$nil)));
                var $8106 = $8146;
                break;
            case 'Fm.Term.chr':
                var $8147 = self.chrx;
                var $8148 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8147), List$cons$("\'", List$nil))));
                var $8106 = $8148;
                break;
            case 'Fm.Term.str':
                var $8149 = self.strx;
                var $8150 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8149), List$cons$("\"", List$nil))));
                var $8106 = $8150;
                break;
            case 'Fm.Term.cse':
                var $8151 = self.path;
                var $8152 = self.expr;
                var $8153 = self.name;
                var $8154 = self.with;
                var $8155 = self.cses;
                var $8156 = self.moti;
                var $8157 = "<CSE>";
                var $8106 = $8157;
                break;
            case 'Fm.Term.ori':
                var $8158 = self.orig;
                var $8159 = self.expr;
                var $8160 = Fm$Term$core$($8159, _indx$2, _vars$3);
                var $8106 = $8160;
                break;
        };
        return $8106;
    };
    const Fm$Term$core = x0 => x1 => x2 => Fm$Term$core$(x0, x1, x2);

    function Fm$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $8163 = _result$2;
            var $8164 = Map$values$(_defs$1);
            let _result$4 = $8163;
            let _defn$3;
            while ($8164._ === 'List.cons') {
                _defn$3 = $8164.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8165 = self.file;
                        var $8166 = self.code;
                        var $8167 = self.name;
                        var $8168 = self.term;
                        var $8169 = self.type;
                        var $8170 = self.stat;
                        var self = $8170;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var $8172 = _result$4;
                                var $8171 = $8172;
                                break;
                            case 'Fm.Status.wait':
                                var $8173 = _result$4;
                                var $8171 = $8173;
                                break;
                            case 'Fm.Status.done':
                                var _name$11 = $8167;
                                var _term$12 = Fm$Term$core$($8168, 0n, List$nil);
                                var _type$13 = Fm$Term$core$($8169, 0n, List$nil);
                                var $8174 = String$flatten$(List$cons$(_result$4, List$cons$(_name$11, List$cons$(" : ", List$cons$(_type$13, List$cons$(" = ", List$cons$(_term$12, List$cons$(";\u{a}", List$nil))))))));
                                var $8171 = $8174;
                                break;
                            case 'Fm.Status.fail':
                                var $8175 = self.errors;
                                var $8176 = _result$4;
                                var $8171 = $8176;
                                break;
                        };
                        var $8163 = $8171;
                        break;
                };
                _result$4 = $8163;
                $8164 = $8164.tail;
            }
            return _result$4;
        })();
        var $8161 = _result$3;
        return $8161;
    };
    const Fm$Defs$core = x0 => Fm$Defs$core$(x0);

    function Fm$to_core$io$one$(_name$1) {
        var $8177 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8178 = _m$bind$2;
            return $8178;
        }))(Fm$Synth$one$(_name$1, Map$new))((_defs$2 => {
            var _defs$3 = Map$map$((_defn$3 => {
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8181 = self.file;
                        var $8182 = self.code;
                        var $8183 = self.name;
                        var $8184 = self.term;
                        var $8185 = self.type;
                        var $8186 = self.stat;
                        var _term$10 = Fm$Term$inline$($8184, _defs$2);
                        var _type$11 = Fm$Term$inline$($8185, _defs$2);
                        var $8187 = Fm$Def$new$($8181, $8182, $8183, _term$10, _type$11, $8186);
                        var $8180 = $8187;
                        break;
                };
                return $8180;
            }), _defs$2);
            var $8179 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                var $8188 = _m$pure$5;
                return $8188;
            }))(Fm$Defs$core$(_defs$3));
            return $8179;
        }));
        return $8177;
    };
    const Fm$to_core$io$one = x0 => Fm$to_core$io$one$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $8190 = Maybe$none;
                var $8189 = $8190;
                break;
            case 'Maybe.some':
                var $8191 = self.value;
                var $8192 = _f$4($8191);
                var $8189 = $8192;
                break;
        };
        return $8189;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $8193 = _new$2(Maybe$bind)(Maybe$some);
        return $8193;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Fm$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8195 = self.name;
                var $8196 = self.indx;
                var $8197 = Maybe$none;
                var $8194 = $8197;
                break;
            case 'Fm.Term.ref':
                var $8198 = self.name;
                var self = ($8198 === "Nat.zero");
                if (self) {
                    var $8200 = Maybe$some$(0n);
                    var $8199 = $8200;
                } else {
                    var $8201 = Maybe$none;
                    var $8199 = $8201;
                };
                var $8194 = $8199;
                break;
            case 'Fm.Term.typ':
                var $8202 = Maybe$none;
                var $8194 = $8202;
                break;
            case 'Fm.Term.all':
                var $8203 = self.eras;
                var $8204 = self.self;
                var $8205 = self.name;
                var $8206 = self.xtyp;
                var $8207 = self.body;
                var $8208 = Maybe$none;
                var $8194 = $8208;
                break;
            case 'Fm.Term.lam':
                var $8209 = self.name;
                var $8210 = self.body;
                var $8211 = Maybe$none;
                var $8194 = $8211;
                break;
            case 'Fm.Term.app':
                var $8212 = self.func;
                var $8213 = self.argm;
                var self = $8212;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8215 = self.name;
                        var $8216 = self.indx;
                        var $8217 = Maybe$none;
                        var $8214 = $8217;
                        break;
                    case 'Fm.Term.ref':
                        var $8218 = self.name;
                        var self = ($8218 === "Nat.succ");
                        if (self) {
                            var $8220 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8221 = _m$bind$5;
                                return $8221;
                            }))(Fm$Term$show$as_nat$go$($8213))((_pred$5 => {
                                var $8222 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8223 = _m$pure$7;
                                    return $8223;
                                }))(Nat$succ$(_pred$5));
                                return $8222;
                            }));
                            var $8219 = $8220;
                        } else {
                            var $8224 = Maybe$none;
                            var $8219 = $8224;
                        };
                        var $8214 = $8219;
                        break;
                    case 'Fm.Term.typ':
                        var $8225 = Maybe$none;
                        var $8214 = $8225;
                        break;
                    case 'Fm.Term.all':
                        var $8226 = self.eras;
                        var $8227 = self.self;
                        var $8228 = self.name;
                        var $8229 = self.xtyp;
                        var $8230 = self.body;
                        var $8231 = Maybe$none;
                        var $8214 = $8231;
                        break;
                    case 'Fm.Term.lam':
                        var $8232 = self.name;
                        var $8233 = self.body;
                        var $8234 = Maybe$none;
                        var $8214 = $8234;
                        break;
                    case 'Fm.Term.app':
                        var $8235 = self.func;
                        var $8236 = self.argm;
                        var $8237 = Maybe$none;
                        var $8214 = $8237;
                        break;
                    case 'Fm.Term.let':
                        var $8238 = self.name;
                        var $8239 = self.expr;
                        var $8240 = self.body;
                        var $8241 = Maybe$none;
                        var $8214 = $8241;
                        break;
                    case 'Fm.Term.def':
                        var $8242 = self.name;
                        var $8243 = self.expr;
                        var $8244 = self.body;
                        var $8245 = Maybe$none;
                        var $8214 = $8245;
                        break;
                    case 'Fm.Term.ann':
                        var $8246 = self.done;
                        var $8247 = self.term;
                        var $8248 = self.type;
                        var $8249 = Maybe$none;
                        var $8214 = $8249;
                        break;
                    case 'Fm.Term.gol':
                        var $8250 = self.name;
                        var $8251 = self.dref;
                        var $8252 = self.verb;
                        var $8253 = Maybe$none;
                        var $8214 = $8253;
                        break;
                    case 'Fm.Term.hol':
                        var $8254 = self.path;
                        var $8255 = Maybe$none;
                        var $8214 = $8255;
                        break;
                    case 'Fm.Term.nat':
                        var $8256 = self.natx;
                        var $8257 = Maybe$none;
                        var $8214 = $8257;
                        break;
                    case 'Fm.Term.chr':
                        var $8258 = self.chrx;
                        var $8259 = Maybe$none;
                        var $8214 = $8259;
                        break;
                    case 'Fm.Term.str':
                        var $8260 = self.strx;
                        var $8261 = Maybe$none;
                        var $8214 = $8261;
                        break;
                    case 'Fm.Term.cse':
                        var $8262 = self.path;
                        var $8263 = self.expr;
                        var $8264 = self.name;
                        var $8265 = self.with;
                        var $8266 = self.cses;
                        var $8267 = self.moti;
                        var $8268 = Maybe$none;
                        var $8214 = $8268;
                        break;
                    case 'Fm.Term.ori':
                        var $8269 = self.orig;
                        var $8270 = self.expr;
                        var $8271 = Maybe$none;
                        var $8214 = $8271;
                        break;
                };
                var $8194 = $8214;
                break;
            case 'Fm.Term.let':
                var $8272 = self.name;
                var $8273 = self.expr;
                var $8274 = self.body;
                var $8275 = Maybe$none;
                var $8194 = $8275;
                break;
            case 'Fm.Term.def':
                var $8276 = self.name;
                var $8277 = self.expr;
                var $8278 = self.body;
                var $8279 = Maybe$none;
                var $8194 = $8279;
                break;
            case 'Fm.Term.ann':
                var $8280 = self.done;
                var $8281 = self.term;
                var $8282 = self.type;
                var $8283 = Maybe$none;
                var $8194 = $8283;
                break;
            case 'Fm.Term.gol':
                var $8284 = self.name;
                var $8285 = self.dref;
                var $8286 = self.verb;
                var $8287 = Maybe$none;
                var $8194 = $8287;
                break;
            case 'Fm.Term.hol':
                var $8288 = self.path;
                var $8289 = Maybe$none;
                var $8194 = $8289;
                break;
            case 'Fm.Term.nat':
                var $8290 = self.natx;
                var $8291 = Maybe$none;
                var $8194 = $8291;
                break;
            case 'Fm.Term.chr':
                var $8292 = self.chrx;
                var $8293 = Maybe$none;
                var $8194 = $8293;
                break;
            case 'Fm.Term.str':
                var $8294 = self.strx;
                var $8295 = Maybe$none;
                var $8194 = $8295;
                break;
            case 'Fm.Term.cse':
                var $8296 = self.path;
                var $8297 = self.expr;
                var $8298 = self.name;
                var $8299 = self.with;
                var $8300 = self.cses;
                var $8301 = self.moti;
                var $8302 = Maybe$none;
                var $8194 = $8302;
                break;
            case 'Fm.Term.ori':
                var $8303 = self.orig;
                var $8304 = self.expr;
                var $8305 = Maybe$none;
                var $8194 = $8305;
                break;
        };
        return $8194;
    };
    const Fm$Term$show$as_nat$go = x0 => Fm$Term$show$as_nat$go$(x0);

    function Fm$Term$show$as_nat$(_term$1) {
        var $8306 = Maybe$mapped$(Fm$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8306;
    };
    const Fm$Term$show$as_nat = x0 => Fm$Term$show$as_nat$(x0);

    function Fm$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8308 = self.name;
                var $8309 = self.indx;
                var $8310 = Bool$false;
                var $8307 = $8310;
                break;
            case 'Fm.Term.ref':
                var $8311 = self.name;
                var $8312 = (_name$2 === $8311);
                var $8307 = $8312;
                break;
            case 'Fm.Term.typ':
                var $8313 = Bool$false;
                var $8307 = $8313;
                break;
            case 'Fm.Term.all':
                var $8314 = self.eras;
                var $8315 = self.self;
                var $8316 = self.name;
                var $8317 = self.xtyp;
                var $8318 = self.body;
                var $8319 = Bool$false;
                var $8307 = $8319;
                break;
            case 'Fm.Term.lam':
                var $8320 = self.name;
                var $8321 = self.body;
                var $8322 = Bool$false;
                var $8307 = $8322;
                break;
            case 'Fm.Term.app':
                var $8323 = self.func;
                var $8324 = self.argm;
                var $8325 = Bool$false;
                var $8307 = $8325;
                break;
            case 'Fm.Term.let':
                var $8326 = self.name;
                var $8327 = self.expr;
                var $8328 = self.body;
                var $8329 = Bool$false;
                var $8307 = $8329;
                break;
            case 'Fm.Term.def':
                var $8330 = self.name;
                var $8331 = self.expr;
                var $8332 = self.body;
                var $8333 = Bool$false;
                var $8307 = $8333;
                break;
            case 'Fm.Term.ann':
                var $8334 = self.done;
                var $8335 = self.term;
                var $8336 = self.type;
                var $8337 = Bool$false;
                var $8307 = $8337;
                break;
            case 'Fm.Term.gol':
                var $8338 = self.name;
                var $8339 = self.dref;
                var $8340 = self.verb;
                var $8341 = Bool$false;
                var $8307 = $8341;
                break;
            case 'Fm.Term.hol':
                var $8342 = self.path;
                var $8343 = Bool$false;
                var $8307 = $8343;
                break;
            case 'Fm.Term.nat':
                var $8344 = self.natx;
                var $8345 = Bool$false;
                var $8307 = $8345;
                break;
            case 'Fm.Term.chr':
                var $8346 = self.chrx;
                var $8347 = Bool$false;
                var $8307 = $8347;
                break;
            case 'Fm.Term.str':
                var $8348 = self.strx;
                var $8349 = Bool$false;
                var $8307 = $8349;
                break;
            case 'Fm.Term.cse':
                var $8350 = self.path;
                var $8351 = self.expr;
                var $8352 = self.name;
                var $8353 = self.with;
                var $8354 = self.cses;
                var $8355 = self.moti;
                var $8356 = Bool$false;
                var $8307 = $8356;
                break;
            case 'Fm.Term.ori':
                var $8357 = self.orig;
                var $8358 = self.expr;
                var $8359 = Bool$false;
                var $8307 = $8359;
                break;
        };
        return $8307;
    };
    const Fm$Term$show$is_ref = x0 => x1 => Fm$Term$show$is_ref$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Fm$Term$show$app$(_term$1, _path$2, _args$3) {
        var Fm$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Fm$Term$show$app = _term$1 => _path$2 => _args$3 => Fm$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8360 = self.name;
                        var $8361 = self.indx;
                        var _arity$6 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$6 === 3n));
                        if (self) {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$8 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$9 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8363 = String$flatten$(List$cons$(_eq_lft$8, List$cons$(" == ", List$cons$(_eq_rgt$9, List$nil))));
                            var $8362 = $8363;
                        } else {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$7;
                            if (self.length === 0) {
                                var $8365 = Bool$false;
                                var _wrap$8 = $8365;
                            } else {
                                var $8366 = self.charCodeAt(0);
                                var $8367 = self.slice(1);
                                var $8368 = ($8366 === 40);
                                var _wrap$8 = $8368;
                            };
                            var _args$9 = String$join$(",", _args$3);
                            var self = _wrap$8;
                            if (self) {
                                var $8369 = String$flatten$(List$cons$("(", List$cons$(_func$7, List$cons$(")", List$nil))));
                                var _func$10 = $8369;
                            } else {
                                var $8370 = _func$7;
                                var _func$10 = $8370;
                            };
                            var $8364 = String$flatten$(List$cons$(_func$10, List$cons$("(", List$cons$(_args$9, List$cons$(")", List$nil)))));
                            var $8362 = $8364;
                        };
                        return $8362;
                    case 'Fm.Term.ref':
                        var $8371 = self.name;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8373 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8372 = $8373;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8375 = Bool$false;
                                var _wrap$7 = $8375;
                            } else {
                                var $8376 = self.charCodeAt(0);
                                var $8377 = self.slice(1);
                                var $8378 = ($8376 === 40);
                                var _wrap$7 = $8378;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8379 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8379;
                            } else {
                                var $8380 = _func$6;
                                var _func$9 = $8380;
                            };
                            var $8374 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8372 = $8374;
                        };
                        return $8372;
                    case 'Fm.Term.typ':
                        var _arity$4 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
                        if (self) {
                            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$6 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$7 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8382 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
                            var $8381 = $8382;
                        } else {
                            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$5;
                            if (self.length === 0) {
                                var $8384 = Bool$false;
                                var _wrap$6 = $8384;
                            } else {
                                var $8385 = self.charCodeAt(0);
                                var $8386 = self.slice(1);
                                var $8387 = ($8385 === 40);
                                var _wrap$6 = $8387;
                            };
                            var _args$7 = String$join$(",", _args$3);
                            var self = _wrap$6;
                            if (self) {
                                var $8388 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                                var _func$8 = $8388;
                            } else {
                                var $8389 = _func$5;
                                var _func$8 = $8389;
                            };
                            var $8383 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
                            var $8381 = $8383;
                        };
                        return $8381;
                    case 'Fm.Term.all':
                        var $8390 = self.eras;
                        var $8391 = self.self;
                        var $8392 = self.name;
                        var $8393 = self.xtyp;
                        var $8394 = self.body;
                        var _arity$9 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$9 === 3n));
                        if (self) {
                            var _func$10 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$11 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$12 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8396 = String$flatten$(List$cons$(_eq_lft$11, List$cons$(" == ", List$cons$(_eq_rgt$12, List$nil))));
                            var $8395 = $8396;
                        } else {
                            var _func$10 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$10;
                            if (self.length === 0) {
                                var $8398 = Bool$false;
                                var _wrap$11 = $8398;
                            } else {
                                var $8399 = self.charCodeAt(0);
                                var $8400 = self.slice(1);
                                var $8401 = ($8399 === 40);
                                var _wrap$11 = $8401;
                            };
                            var _args$12 = String$join$(",", _args$3);
                            var self = _wrap$11;
                            if (self) {
                                var $8402 = String$flatten$(List$cons$("(", List$cons$(_func$10, List$cons$(")", List$nil))));
                                var _func$13 = $8402;
                            } else {
                                var $8403 = _func$10;
                                var _func$13 = $8403;
                            };
                            var $8397 = String$flatten$(List$cons$(_func$13, List$cons$("(", List$cons$(_args$12, List$cons$(")", List$nil)))));
                            var $8395 = $8397;
                        };
                        return $8395;
                    case 'Fm.Term.lam':
                        var $8404 = self.name;
                        var $8405 = self.body;
                        var _arity$6 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$6 === 3n));
                        if (self) {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$8 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$9 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8407 = String$flatten$(List$cons$(_eq_lft$8, List$cons$(" == ", List$cons$(_eq_rgt$9, List$nil))));
                            var $8406 = $8407;
                        } else {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$7;
                            if (self.length === 0) {
                                var $8409 = Bool$false;
                                var _wrap$8 = $8409;
                            } else {
                                var $8410 = self.charCodeAt(0);
                                var $8411 = self.slice(1);
                                var $8412 = ($8410 === 40);
                                var _wrap$8 = $8412;
                            };
                            var _args$9 = String$join$(",", _args$3);
                            var self = _wrap$8;
                            if (self) {
                                var $8413 = String$flatten$(List$cons$("(", List$cons$(_func$7, List$cons$(")", List$nil))));
                                var _func$10 = $8413;
                            } else {
                                var $8414 = _func$7;
                                var _func$10 = $8414;
                            };
                            var $8408 = String$flatten$(List$cons$(_func$10, List$cons$("(", List$cons$(_args$9, List$cons$(")", List$nil)))));
                            var $8406 = $8408;
                        };
                        return $8406;
                    case 'Fm.Term.app':
                        var $8415 = self.func;
                        var $8416 = self.argm;
                        var _argm$6 = Fm$Term$show$go$($8416, Fm$MPath$i$(_path$2));
                        var $8417 = Fm$Term$show$app$($8415, Fm$MPath$o$(_path$2), List$cons$(_argm$6, _args$3));
                        return $8417;
                    case 'Fm.Term.let':
                        var $8418 = self.name;
                        var $8419 = self.expr;
                        var $8420 = self.body;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8422 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8421 = $8422;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8424 = Bool$false;
                                var _wrap$9 = $8424;
                            } else {
                                var $8425 = self.charCodeAt(0);
                                var $8426 = self.slice(1);
                                var $8427 = ($8425 === 40);
                                var _wrap$9 = $8427;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8428 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8428;
                            } else {
                                var $8429 = _func$8;
                                var _func$11 = $8429;
                            };
                            var $8423 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8421 = $8423;
                        };
                        return $8421;
                    case 'Fm.Term.def':
                        var $8430 = self.name;
                        var $8431 = self.expr;
                        var $8432 = self.body;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8434 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8433 = $8434;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8436 = Bool$false;
                                var _wrap$9 = $8436;
                            } else {
                                var $8437 = self.charCodeAt(0);
                                var $8438 = self.slice(1);
                                var $8439 = ($8437 === 40);
                                var _wrap$9 = $8439;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8440 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8440;
                            } else {
                                var $8441 = _func$8;
                                var _func$11 = $8441;
                            };
                            var $8435 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8433 = $8435;
                        };
                        return $8433;
                    case 'Fm.Term.ann':
                        var $8442 = self.done;
                        var $8443 = self.term;
                        var $8444 = self.type;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8446 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8445 = $8446;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8448 = Bool$false;
                                var _wrap$9 = $8448;
                            } else {
                                var $8449 = self.charCodeAt(0);
                                var $8450 = self.slice(1);
                                var $8451 = ($8449 === 40);
                                var _wrap$9 = $8451;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8452 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8452;
                            } else {
                                var $8453 = _func$8;
                                var _func$11 = $8453;
                            };
                            var $8447 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8445 = $8447;
                        };
                        return $8445;
                    case 'Fm.Term.gol':
                        var $8454 = self.name;
                        var $8455 = self.dref;
                        var $8456 = self.verb;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8458 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8457 = $8458;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8460 = Bool$false;
                                var _wrap$9 = $8460;
                            } else {
                                var $8461 = self.charCodeAt(0);
                                var $8462 = self.slice(1);
                                var $8463 = ($8461 === 40);
                                var _wrap$9 = $8463;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8464 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8464;
                            } else {
                                var $8465 = _func$8;
                                var _func$11 = $8465;
                            };
                            var $8459 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8457 = $8459;
                        };
                        return $8457;
                    case 'Fm.Term.hol':
                        var $8466 = self.path;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8468 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8467 = $8468;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8470 = Bool$false;
                                var _wrap$7 = $8470;
                            } else {
                                var $8471 = self.charCodeAt(0);
                                var $8472 = self.slice(1);
                                var $8473 = ($8471 === 40);
                                var _wrap$7 = $8473;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8474 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8474;
                            } else {
                                var $8475 = _func$6;
                                var _func$9 = $8475;
                            };
                            var $8469 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8467 = $8469;
                        };
                        return $8467;
                    case 'Fm.Term.nat':
                        var $8476 = self.natx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8478 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8477 = $8478;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8480 = Bool$false;
                                var _wrap$7 = $8480;
                            } else {
                                var $8481 = self.charCodeAt(0);
                                var $8482 = self.slice(1);
                                var $8483 = ($8481 === 40);
                                var _wrap$7 = $8483;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8484 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8484;
                            } else {
                                var $8485 = _func$6;
                                var _func$9 = $8485;
                            };
                            var $8479 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8477 = $8479;
                        };
                        return $8477;
                    case 'Fm.Term.chr':
                        var $8486 = self.chrx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8488 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8487 = $8488;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8490 = Bool$false;
                                var _wrap$7 = $8490;
                            } else {
                                var $8491 = self.charCodeAt(0);
                                var $8492 = self.slice(1);
                                var $8493 = ($8491 === 40);
                                var _wrap$7 = $8493;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8494 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8494;
                            } else {
                                var $8495 = _func$6;
                                var _func$9 = $8495;
                            };
                            var $8489 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8487 = $8489;
                        };
                        return $8487;
                    case 'Fm.Term.str':
                        var $8496 = self.strx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8498 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8497 = $8498;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8500 = Bool$false;
                                var _wrap$7 = $8500;
                            } else {
                                var $8501 = self.charCodeAt(0);
                                var $8502 = self.slice(1);
                                var $8503 = ($8501 === 40);
                                var _wrap$7 = $8503;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8504 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8504;
                            } else {
                                var $8505 = _func$6;
                                var _func$9 = $8505;
                            };
                            var $8499 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8497 = $8499;
                        };
                        return $8497;
                    case 'Fm.Term.cse':
                        var $8506 = self.path;
                        var $8507 = self.expr;
                        var $8508 = self.name;
                        var $8509 = self.with;
                        var $8510 = self.cses;
                        var $8511 = self.moti;
                        var _arity$10 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$10 === 3n));
                        if (self) {
                            var _func$11 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$12 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$13 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8513 = String$flatten$(List$cons$(_eq_lft$12, List$cons$(" == ", List$cons$(_eq_rgt$13, List$nil))));
                            var $8512 = $8513;
                        } else {
                            var _func$11 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$11;
                            if (self.length === 0) {
                                var $8515 = Bool$false;
                                var _wrap$12 = $8515;
                            } else {
                                var $8516 = self.charCodeAt(0);
                                var $8517 = self.slice(1);
                                var $8518 = ($8516 === 40);
                                var _wrap$12 = $8518;
                            };
                            var _args$13 = String$join$(",", _args$3);
                            var self = _wrap$12;
                            if (self) {
                                var $8519 = String$flatten$(List$cons$("(", List$cons$(_func$11, List$cons$(")", List$nil))));
                                var _func$14 = $8519;
                            } else {
                                var $8520 = _func$11;
                                var _func$14 = $8520;
                            };
                            var $8514 = String$flatten$(List$cons$(_func$14, List$cons$("(", List$cons$(_args$13, List$cons$(")", List$nil)))));
                            var $8512 = $8514;
                        };
                        return $8512;
                    case 'Fm.Term.ori':
                        var $8521 = self.orig;
                        var $8522 = self.expr;
                        var _arity$6 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$6 === 3n));
                        if (self) {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$8 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$9 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8524 = String$flatten$(List$cons$(_eq_lft$8, List$cons$(" == ", List$cons$(_eq_rgt$9, List$nil))));
                            var $8523 = $8524;
                        } else {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$7;
                            if (self.length === 0) {
                                var $8526 = Bool$false;
                                var _wrap$8 = $8526;
                            } else {
                                var $8527 = self.charCodeAt(0);
                                var $8528 = self.slice(1);
                                var $8529 = ($8527 === 40);
                                var _wrap$8 = $8529;
                            };
                            var _args$9 = String$join$(",", _args$3);
                            var self = _wrap$8;
                            if (self) {
                                var $8530 = String$flatten$(List$cons$("(", List$cons$(_func$7, List$cons$(")", List$nil))));
                                var _func$10 = $8530;
                            } else {
                                var $8531 = _func$7;
                                var _func$10 = $8531;
                            };
                            var $8525 = String$flatten$(List$cons$(_func$10, List$cons$("(", List$cons$(_args$9, List$cons$(")", List$nil)))));
                            var $8523 = $8525;
                        };
                        return $8523;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$show$app = x0 => x1 => x2 => Fm$Term$show$app$(x0, x1, x2);

    function Map$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8533 = _list$4;
                var $8532 = $8533;
                break;
            case 'Map.tie':
                var $8534 = self.val;
                var $8535 = self.lft;
                var $8536 = self.rgt;
                var self = $8534;
                switch (self._) {
                    case 'Maybe.none':
                        var $8538 = _list$4;
                        var _list0$8 = $8538;
                        break;
                    case 'Maybe.some':
                        var $8539 = self.value;
                        var $8540 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $8539), _list$4);
                        var _list0$8 = $8540;
                        break;
                };
                var _list1$9 = Map$to_list$go$($8535, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$to_list$go$($8536, (_key$3 + '1'), _list1$9);
                var $8537 = _list2$10;
                var $8532 = $8537;
                break;
        };
        return $8532;
    };
    const Map$to_list$go = x0 => x1 => x2 => Map$to_list$go$(x0, x1, x2);

    function Map$to_list$(_xs$2) {
        var $8541 = List$reverse$(Map$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8541;
    };
    const Map$to_list = x0 => Map$to_list$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8543 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $8542 = $8543;
                break;
            case 'o':
                var $8544 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8546 = List$cons$(_head$6, _tail$7);
                    var $8545 = $8546;
                } else {
                    var $8547 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $8548 = Bits$chunks_of$go$(_len$1, $8544, $8547, _chunk$7);
                    var $8545 = $8548;
                };
                var $8542 = $8545;
                break;
            case 'i':
                var $8549 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8551 = List$cons$(_head$6, _tail$7);
                    var $8550 = $8551;
                } else {
                    var $8552 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $8553 = Bits$chunks_of$go$(_len$1, $8549, $8552, _chunk$7);
                    var $8550 = $8553;
                };
                var $8542 = $8550;
                break;
        };
        return $8542;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $8554 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $8554;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $8556 = Word$e;
            var $8555 = $8556;
        } else {
            var $8557 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $8559 = Word$o$(Word$from_bits$($8557, Bits$e));
                    var $8558 = $8559;
                    break;
                case 'o':
                    var $8560 = self.slice(0, -1);
                    var $8561 = Word$o$(Word$from_bits$($8557, $8560));
                    var $8558 = $8561;
                    break;
                case 'i':
                    var $8562 = self.slice(0, -1);
                    var $8563 = Word$i$(Word$from_bits$($8557, $8562));
                    var $8558 = $8563;
                    break;
            };
            var $8555 = $8558;
        };
        return $8555;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Fm$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $8566 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $8566;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $8568 = ((_u16$5 + 71) & 0xFFFF);
                    var $8567 = $8568;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $8570 = (Math.max(_u16$5 - 4, 0));
                        var $8569 = $8570;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $8572 = 46;
                            var $8571 = $8572;
                        } else {
                            var $8573 = 95;
                            var $8571 = $8573;
                        };
                        var $8569 = $8571;
                    };
                    var $8567 = $8569;
                };
                var _chr$6 = $8567;
            };
            var $8565 = String$cons$(_chr$6, _name$4);
            return $8565;
        }));
        var $8564 = _name$3;
        return $8564;
    };
    const Fm$Name$from_bits = x0 => Fm$Name$from_bits$(x0);

    function Fm$Term$show$go$(_term$1, _path$2) {
        var self = Fm$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8576 = self.name;
                        var $8577 = self.indx;
                        var $8578 = Fm$Name$show$($8576);
                        var $8575 = $8578;
                        break;
                    case 'Fm.Term.ref':
                        var $8579 = self.name;
                        var _name$4 = Fm$Name$show$($8579);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8581 = _name$4;
                                var $8580 = $8581;
                                break;
                            case 'Maybe.some':
                                var $8582 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Fm$Path$to_bits$($8582));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8583 = String$flatten$(List$cons$(_name$4, List$cons$(Fm$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8580 = $8583;
                                break;
                        };
                        var $8575 = $8580;
                        break;
                    case 'Fm.Term.typ':
                        var $8584 = "Type";
                        var $8575 = $8584;
                        break;
                    case 'Fm.Term.all':
                        var $8585 = self.eras;
                        var $8586 = self.self;
                        var $8587 = self.name;
                        var $8588 = self.xtyp;
                        var $8589 = self.body;
                        var _eras$8 = $8585;
                        var _self$9 = Fm$Name$show$($8586);
                        var _name$10 = Fm$Name$show$($8587);
                        var _type$11 = Fm$Term$show$go$($8588, Fm$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8591 = "<";
                            var _open$12 = $8591;
                        } else {
                            var $8592 = "(";
                            var _open$12 = $8592;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8593 = ">";
                            var _clos$13 = $8593;
                        } else {
                            var $8594 = ")";
                            var _clos$13 = $8594;
                        };
                        var _body$14 = Fm$Term$show$go$($8589(Fm$Term$var$($8586, 0n))(Fm$Term$var$($8587, 0n)), Fm$MPath$i$(_path$2));
                        var $8590 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8575 = $8590;
                        break;
                    case 'Fm.Term.lam':
                        var $8595 = self.name;
                        var $8596 = self.body;
                        var _name$5 = Fm$Name$show$($8595);
                        var _body$6 = Fm$Term$show$go$($8596(Fm$Term$var$($8595, 0n)), Fm$MPath$o$(_path$2));
                        var $8597 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8575 = $8597;
                        break;
                    case 'Fm.Term.app':
                        var $8598 = self.func;
                        var $8599 = self.argm;
                        var $8600 = Fm$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8575 = $8600;
                        break;
                    case 'Fm.Term.let':
                        var $8601 = self.name;
                        var $8602 = self.expr;
                        var $8603 = self.body;
                        var _name$6 = Fm$Name$show$($8601);
                        var _expr$7 = Fm$Term$show$go$($8602, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8603(Fm$Term$var$($8601, 0n)), Fm$MPath$i$(_path$2));
                        var $8604 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8575 = $8604;
                        break;
                    case 'Fm.Term.def':
                        var $8605 = self.name;
                        var $8606 = self.expr;
                        var $8607 = self.body;
                        var _name$6 = Fm$Name$show$($8605);
                        var _expr$7 = Fm$Term$show$go$($8606, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8607(Fm$Term$var$($8605, 0n)), Fm$MPath$i$(_path$2));
                        var $8608 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8575 = $8608;
                        break;
                    case 'Fm.Term.ann':
                        var $8609 = self.done;
                        var $8610 = self.term;
                        var $8611 = self.type;
                        var _term$6 = Fm$Term$show$go$($8610, Fm$MPath$o$(_path$2));
                        var _type$7 = Fm$Term$show$go$($8611, Fm$MPath$i$(_path$2));
                        var $8612 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8575 = $8612;
                        break;
                    case 'Fm.Term.gol':
                        var $8613 = self.name;
                        var $8614 = self.dref;
                        var $8615 = self.verb;
                        var _name$6 = Fm$Name$show$($8613);
                        var $8616 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8575 = $8616;
                        break;
                    case 'Fm.Term.hol':
                        var $8617 = self.path;
                        var $8618 = "_";
                        var $8575 = $8618;
                        break;
                    case 'Fm.Term.nat':
                        var $8619 = self.natx;
                        var $8620 = String$flatten$(List$cons$(Nat$show$($8619), List$nil));
                        var $8575 = $8620;
                        break;
                    case 'Fm.Term.chr':
                        var $8621 = self.chrx;
                        var $8622 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8621), List$cons$("\'", List$nil))));
                        var $8575 = $8622;
                        break;
                    case 'Fm.Term.str':
                        var $8623 = self.strx;
                        var $8624 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8623), List$cons$("\"", List$nil))));
                        var $8575 = $8624;
                        break;
                    case 'Fm.Term.cse':
                        var $8625 = self.path;
                        var $8626 = self.expr;
                        var $8627 = self.name;
                        var $8628 = self.with;
                        var $8629 = self.cses;
                        var $8630 = self.moti;
                        var _expr$9 = Fm$Term$show$go$($8626, Fm$MPath$o$(_path$2));
                        var _name$10 = Fm$Name$show$($8627);
                        var _wyth$11 = String$join$("", List$mapped$($8628, (_defn$11 => {
                            var self = _defn$11;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8633 = self.file;
                                    var $8634 = self.code;
                                    var $8635 = self.name;
                                    var $8636 = self.term;
                                    var $8637 = self.type;
                                    var $8638 = self.stat;
                                    var _name$18 = Fm$Name$show$($8635);
                                    var _type$19 = Fm$Term$show$go$($8637, Maybe$none);
                                    var _term$20 = Fm$Term$show$go$($8636, Maybe$none);
                                    var $8639 = String$flatten$(List$cons$(_name$18, List$cons$(": ", List$cons$(_type$19, List$cons$(" = ", List$cons$(_term$20, List$cons$(";", List$nil)))))));
                                    var $8632 = $8639;
                                    break;
                            };
                            return $8632;
                        })));
                        var _cses$12 = Map$to_list$($8629);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Fm$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Fm$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $8640 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $8640;
                        })));
                        var self = $8630;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8641 = "";
                                var _moti$14 = $8641;
                                break;
                            case 'Maybe.some':
                                var $8642 = self.value;
                                var $8643 = String$flatten$(List$cons$(": ", List$cons$(Fm$Term$show$go$($8642, Maybe$none), List$nil)));
                                var _moti$14 = $8643;
                                break;
                        };
                        var $8631 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8575 = $8631;
                        break;
                    case 'Fm.Term.ori':
                        var $8644 = self.orig;
                        var $8645 = self.expr;
                        var $8646 = Fm$Term$show$go$($8645, _path$2);
                        var $8575 = $8646;
                        break;
                };
                var $8574 = $8575;
                break;
            case 'Maybe.some':
                var $8647 = self.value;
                var $8648 = $8647;
                var $8574 = $8648;
                break;
        };
        return $8574;
    };
    const Fm$Term$show$go = x0 => x1 => Fm$Term$show$go$(x0, x1);

    function Fm$Term$show$(_term$1) {
        var $8649 = Fm$Term$show$go$(_term$1, Maybe$none);
        return $8649;
    };
    const Fm$Term$show = x0 => Fm$Term$show$(x0);

    function Fm$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.nil':
                var $8651 = List$nil;
                var $8650 = $8651;
                break;
            case 'List.cons':
                var $8652 = self.head;
                var $8653 = self.tail;
                var self = $8652;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8655 = self.origin;
                        var $8656 = self.expected;
                        var $8657 = self.detected;
                        var $8658 = self.context;
                        var $8659 = (!_got$2);
                        var _keep$5 = $8659;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8660 = self.name;
                        var $8661 = self.dref;
                        var $8662 = self.verb;
                        var $8663 = self.goal;
                        var $8664 = self.context;
                        var $8665 = Bool$true;
                        var _keep$5 = $8665;
                        break;
                    case 'Fm.Error.waiting':
                        var $8666 = self.name;
                        var $8667 = Bool$false;
                        var _keep$5 = $8667;
                        break;
                    case 'Fm.Error.indirect':
                        var $8668 = self.name;
                        var $8669 = Bool$false;
                        var _keep$5 = $8669;
                        break;
                    case 'Fm.Error.patch':
                        var $8670 = self.path;
                        var $8671 = self.term;
                        var $8672 = Bool$false;
                        var _keep$5 = $8672;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8673 = self.origin;
                        var $8674 = self.name;
                        var $8675 = (!_got$2);
                        var _keep$5 = $8675;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8676 = self.origin;
                        var $8677 = self.term;
                        var $8678 = self.context;
                        var $8679 = (!_got$2);
                        var _keep$5 = $8679;
                        break;
                };
                var self = $8652;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8680 = self.origin;
                        var $8681 = self.expected;
                        var $8682 = self.detected;
                        var $8683 = self.context;
                        var $8684 = Bool$true;
                        var _got$6 = $8684;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8685 = self.name;
                        var $8686 = self.dref;
                        var $8687 = self.verb;
                        var $8688 = self.goal;
                        var $8689 = self.context;
                        var $8690 = _got$2;
                        var _got$6 = $8690;
                        break;
                    case 'Fm.Error.waiting':
                        var $8691 = self.name;
                        var $8692 = _got$2;
                        var _got$6 = $8692;
                        break;
                    case 'Fm.Error.indirect':
                        var $8693 = self.name;
                        var $8694 = _got$2;
                        var _got$6 = $8694;
                        break;
                    case 'Fm.Error.patch':
                        var $8695 = self.path;
                        var $8696 = self.term;
                        var $8697 = _got$2;
                        var _got$6 = $8697;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8698 = self.origin;
                        var $8699 = self.name;
                        var $8700 = Bool$true;
                        var _got$6 = $8700;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8701 = self.origin;
                        var $8702 = self.term;
                        var $8703 = self.context;
                        var $8704 = _got$2;
                        var _got$6 = $8704;
                        break;
                };
                var _tail$7 = Fm$Error$relevant$($8653, _got$6);
                var self = _keep$5;
                if (self) {
                    var $8705 = List$cons$($8652, _tail$7);
                    var $8654 = $8705;
                } else {
                    var $8706 = _tail$7;
                    var $8654 = $8706;
                };
                var $8650 = $8654;
                break;
        };
        return $8650;
    };
    const Fm$Error$relevant = x0 => x1 => Fm$Error$relevant$(x0, x1);

    function Fm$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.nil':
                var $8708 = "";
                var $8707 = $8708;
                break;
            case 'List.cons':
                var $8709 = self.head;
                var $8710 = self.tail;
                var self = $8709;
                switch (self._) {
                    case 'Pair.new':
                        var $8712 = self.fst;
                        var $8713 = self.snd;
                        var _name$6 = Fm$Name$show$($8712);
                        var _type$7 = Fm$Term$show$(Fm$Term$normalize$($8713, Map$new));
                        var _rest$8 = Fm$Context$show$($8710);
                        var $8714 = String$flatten$(List$cons$(_rest$8, List$cons$("- ", List$cons$(_name$6, List$cons$(": ", List$cons$(_type$7, List$cons$("\u{a}", List$nil)))))));
                        var $8711 = $8714;
                        break;
                };
                var $8707 = $8711;
                break;
        };
        return $8707;
    };
    const Fm$Context$show = x0 => Fm$Context$show$(x0);

    function Fm$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $8715 = Fm$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Fm.Term.var':
                    var $8717 = self.name;
                    var $8718 = self.indx;
                    var $8719 = _term$4;
                    var $8716 = $8719;
                    break;
                case 'Fm.Term.ref':
                    var $8720 = self.name;
                    var self = Fm$get$($8720, _defs$3);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8722 = Fm$Term$ref$($8720);
                            var $8721 = $8722;
                            break;
                        case 'Maybe.some':
                            var $8723 = self.value;
                            var self = $8723;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8725 = self.file;
                                    var $8726 = self.code;
                                    var $8727 = self.name;
                                    var $8728 = self.term;
                                    var $8729 = self.type;
                                    var $8730 = self.stat;
                                    var $8731 = $8728;
                                    var $8724 = $8731;
                                    break;
                            };
                            var $8721 = $8724;
                            break;
                    };
                    var $8716 = $8721;
                    break;
                case 'Fm.Term.typ':
                    var $8732 = _term$4;
                    var $8716 = $8732;
                    break;
                case 'Fm.Term.all':
                    var $8733 = self.eras;
                    var $8734 = self.self;
                    var $8735 = self.name;
                    var $8736 = self.xtyp;
                    var $8737 = self.body;
                    var $8738 = _term$4;
                    var $8716 = $8738;
                    break;
                case 'Fm.Term.lam':
                    var $8739 = self.name;
                    var $8740 = self.body;
                    var $8741 = _term$4;
                    var $8716 = $8741;
                    break;
                case 'Fm.Term.app':
                    var $8742 = self.func;
                    var $8743 = self.argm;
                    var $8744 = _term$4;
                    var $8716 = $8744;
                    break;
                case 'Fm.Term.let':
                    var $8745 = self.name;
                    var $8746 = self.expr;
                    var $8747 = self.body;
                    var $8748 = _term$4;
                    var $8716 = $8748;
                    break;
                case 'Fm.Term.def':
                    var $8749 = self.name;
                    var $8750 = self.expr;
                    var $8751 = self.body;
                    var $8752 = _term$4;
                    var $8716 = $8752;
                    break;
                case 'Fm.Term.ann':
                    var $8753 = self.done;
                    var $8754 = self.term;
                    var $8755 = self.type;
                    var $8756 = _term$4;
                    var $8716 = $8756;
                    break;
                case 'Fm.Term.gol':
                    var $8757 = self.name;
                    var $8758 = self.dref;
                    var $8759 = self.verb;
                    var $8760 = _term$4;
                    var $8716 = $8760;
                    break;
                case 'Fm.Term.hol':
                    var $8761 = self.path;
                    var $8762 = _term$4;
                    var $8716 = $8762;
                    break;
                case 'Fm.Term.nat':
                    var $8763 = self.natx;
                    var $8764 = _term$4;
                    var $8716 = $8764;
                    break;
                case 'Fm.Term.chr':
                    var $8765 = self.chrx;
                    var $8766 = _term$4;
                    var $8716 = $8766;
                    break;
                case 'Fm.Term.str':
                    var $8767 = self.strx;
                    var $8768 = _term$4;
                    var $8716 = $8768;
                    break;
                case 'Fm.Term.cse':
                    var $8769 = self.path;
                    var $8770 = self.expr;
                    var $8771 = self.name;
                    var $8772 = self.with;
                    var $8773 = self.cses;
                    var $8774 = self.moti;
                    var $8775 = _term$4;
                    var $8716 = $8775;
                    break;
                case 'Fm.Term.ori':
                    var $8776 = self.orig;
                    var $8777 = self.expr;
                    var $8778 = _term$4;
                    var $8716 = $8778;
                    break;
            };
            return $8716;
        }));
        return $8715;
    };
    const Fm$Term$expand_at = x0 => x1 => x2 => Fm$Term$expand_at$(x0, x1, x2);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Fm$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8780 = self.name;
                var $8781 = self.indx;
                var $8782 = Fm$Term$var$($8780, $8781);
                var $8779 = $8782;
                break;
            case 'Fm.Term.ref':
                var $8783 = self.name;
                var _expand$5 = Bool$false;
                var _expand$6 = ((($8783 === "Nat.succ") && (_arity$3 > 1n)) || _expand$5);
                var _expand$7 = ((($8783 === "Nat.zero") && (_arity$3 > 0n)) || _expand$6);
                var _expand$8 = ((($8783 === "Bool.true") && (_arity$3 > 0n)) || _expand$7);
                var _expand$9 = ((($8783 === "Bool.false") && (_arity$3 > 0n)) || _expand$8);
                var self = _expand$9;
                if (self) {
                    var self = Fm$get$($8783, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8786 = Fm$Term$ref$($8783);
                            var $8785 = $8786;
                            break;
                        case 'Maybe.some':
                            var $8787 = self.value;
                            var self = $8787;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8789 = self.file;
                                    var $8790 = self.code;
                                    var $8791 = self.name;
                                    var $8792 = self.term;
                                    var $8793 = self.type;
                                    var $8794 = self.stat;
                                    var $8795 = $8792;
                                    var $8788 = $8795;
                                    break;
                            };
                            var $8785 = $8788;
                            break;
                    };
                    var $8784 = $8785;
                } else {
                    var $8796 = Fm$Term$ref$($8783);
                    var $8784 = $8796;
                };
                var $8779 = $8784;
                break;
            case 'Fm.Term.typ':
                var $8797 = Fm$Term$typ;
                var $8779 = $8797;
                break;
            case 'Fm.Term.all':
                var $8798 = self.eras;
                var $8799 = self.self;
                var $8800 = self.name;
                var $8801 = self.xtyp;
                var $8802 = self.body;
                var $8803 = Fm$Term$all$($8798, $8799, $8800, Fm$Term$expand_ct$($8801, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $8804 = Fm$Term$expand_ct$($8802(_s$9)(_x$10), _defs$2, 0n);
                    return $8804;
                }));
                var $8779 = $8803;
                break;
            case 'Fm.Term.lam':
                var $8805 = self.name;
                var $8806 = self.body;
                var $8807 = Fm$Term$lam$($8805, (_x$6 => {
                    var $8808 = Fm$Term$expand_ct$($8806(_x$6), _defs$2, 0n);
                    return $8808;
                }));
                var $8779 = $8807;
                break;
            case 'Fm.Term.app':
                var $8809 = self.func;
                var $8810 = self.argm;
                var $8811 = Fm$Term$app$(Fm$Term$expand_ct$($8809, _defs$2, Nat$succ$(_arity$3)), Fm$Term$expand_ct$($8810, _defs$2, 0n));
                var $8779 = $8811;
                break;
            case 'Fm.Term.let':
                var $8812 = self.name;
                var $8813 = self.expr;
                var $8814 = self.body;
                var $8815 = Fm$Term$let$($8812, Fm$Term$expand_ct$($8813, _defs$2, 0n), (_x$7 => {
                    var $8816 = Fm$Term$expand_ct$($8814(_x$7), _defs$2, 0n);
                    return $8816;
                }));
                var $8779 = $8815;
                break;
            case 'Fm.Term.def':
                var $8817 = self.name;
                var $8818 = self.expr;
                var $8819 = self.body;
                var $8820 = Fm$Term$def$($8817, Fm$Term$expand_ct$($8818, _defs$2, 0n), (_x$7 => {
                    var $8821 = Fm$Term$expand_ct$($8819(_x$7), _defs$2, 0n);
                    return $8821;
                }));
                var $8779 = $8820;
                break;
            case 'Fm.Term.ann':
                var $8822 = self.done;
                var $8823 = self.term;
                var $8824 = self.type;
                var $8825 = Fm$Term$ann$($8822, Fm$Term$expand_ct$($8823, _defs$2, 0n), Fm$Term$expand_ct$($8824, _defs$2, 0n));
                var $8779 = $8825;
                break;
            case 'Fm.Term.gol':
                var $8826 = self.name;
                var $8827 = self.dref;
                var $8828 = self.verb;
                var $8829 = Fm$Term$gol$($8826, $8827, $8828);
                var $8779 = $8829;
                break;
            case 'Fm.Term.hol':
                var $8830 = self.path;
                var $8831 = Fm$Term$hol$($8830);
                var $8779 = $8831;
                break;
            case 'Fm.Term.nat':
                var $8832 = self.natx;
                var $8833 = Fm$Term$nat$($8832);
                var $8779 = $8833;
                break;
            case 'Fm.Term.chr':
                var $8834 = self.chrx;
                var $8835 = Fm$Term$chr$($8834);
                var $8779 = $8835;
                break;
            case 'Fm.Term.str':
                var $8836 = self.strx;
                var $8837 = Fm$Term$str$($8836);
                var $8779 = $8837;
                break;
            case 'Fm.Term.cse':
                var $8838 = self.path;
                var $8839 = self.expr;
                var $8840 = self.name;
                var $8841 = self.with;
                var $8842 = self.cses;
                var $8843 = self.moti;
                var $8844 = _term$1;
                var $8779 = $8844;
                break;
            case 'Fm.Term.ori':
                var $8845 = self.orig;
                var $8846 = self.expr;
                var $8847 = Fm$Term$ori$($8845, $8846);
                var $8779 = $8847;
                break;
        };
        return $8779;
    };
    const Fm$Term$expand_ct = x0 => x1 => x2 => Fm$Term$expand_ct$(x0, x1, x2);

    function Fm$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Fm$Term$normalize$(_term$2, Map$new);
        var _term$5 = (() => {
            var $8850 = _term$4;
            var $8851 = _dref$1;
            let _term$6 = $8850;
            let _path$5;
            while ($8851._ === 'List.cons') {
                _path$5 = $8851.head;
                var _term$7 = Fm$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Fm$Term$normalize$(_term$7, Map$new);
                var _term$9 = Fm$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Fm$Term$normalize$(_term$9, Map$new);
                var $8850 = _term$10;
                _term$6 = $8850;
                $8851 = $8851.tail;
            }
            return _term$6;
        })();
        var $8848 = _term$5;
        return $8848;
    };
    const Fm$Term$expand = x0 => x1 => x2 => Fm$Term$expand$(x0, x1, x2);

    function Fm$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $8853 = self.origin;
                var $8854 = self.expected;
                var $8855 = self.detected;
                var $8856 = self.context;
                var self = $8854;
                switch (self._) {
                    case 'Either.left':
                        var $8858 = self.value;
                        var $8859 = $8858;
                        var _expected$7 = $8859;
                        break;
                    case 'Either.right':
                        var $8860 = self.value;
                        var $8861 = Fm$Term$show$(Fm$Term$normalize$($8860, Map$new));
                        var _expected$7 = $8861;
                        break;
                };
                var self = $8855;
                switch (self._) {
                    case 'Either.left':
                        var $8862 = self.value;
                        var $8863 = $8862;
                        var _detected$8 = $8863;
                        break;
                    case 'Either.right':
                        var $8864 = self.value;
                        var $8865 = Fm$Term$show$(Fm$Term$normalize$($8864, Map$new));
                        var _detected$8 = $8865;
                        break;
                };
                var $8857 = String$flatten$(List$cons$("Type mismatch.\u{a}", List$cons$("- Expected: ", List$cons$(_expected$7, List$cons$("\u{a}", List$cons$("- Detected: ", List$cons$(_detected$8, List$cons$("\u{a}", List$cons$((() => {
                    var self = $8856;
                    switch (self._) {
                        case 'List.nil':
                            var $8866 = "";
                            return $8866;
                        case 'List.cons':
                            var $8867 = self.head;
                            var $8868 = self.tail;
                            var $8869 = String$flatten$(List$cons$("With context:\u{a}", List$cons$(Fm$Context$show$($8856), List$nil)));
                            return $8869;
                    };
                })(), List$nil)))))))));
                var $8852 = $8857;
                break;
            case 'Fm.Error.show_goal':
                var $8870 = self.name;
                var $8871 = self.dref;
                var $8872 = self.verb;
                var $8873 = self.goal;
                var $8874 = self.context;
                var _goal_name$8 = String$flatten$(List$cons$("Goal ?", List$cons$(Fm$Name$show$($8870), List$cons$(":\u{a}", List$nil))));
                var self = $8873;
                switch (self._) {
                    case 'Maybe.none':
                        var $8876 = "";
                        var _with_type$9 = $8876;
                        break;
                    case 'Maybe.some':
                        var $8877 = self.value;
                        var _goal$10 = Fm$Term$expand$($8871, $8877, _defs$2);
                        var $8878 = String$flatten$(List$cons$("With type: ", List$cons$((() => {
                            var self = $8872;
                            if (self) {
                                var $8879 = Fm$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $8880 = _x$11;
                                    return $8880;
                                })));
                                return $8879;
                            } else {
                                var $8881 = Fm$Term$show$(_goal$10);
                                return $8881;
                            };
                        })(), List$cons$("\u{a}", List$nil))));
                        var _with_type$9 = $8878;
                        break;
                };
                var self = $8874;
                switch (self._) {
                    case 'List.nil':
                        var $8882 = "";
                        var _with_ctxt$10 = $8882;
                        break;
                    case 'List.cons':
                        var $8883 = self.head;
                        var $8884 = self.tail;
                        var $8885 = String$flatten$(List$cons$("With ctxt:\u{a}", List$cons$(Fm$Context$show$($8874), List$nil)));
                        var _with_ctxt$10 = $8885;
                        break;
                };
                var $8875 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $8852 = $8875;
                break;
            case 'Fm.Error.waiting':
                var $8886 = self.name;
                var $8887 = String$flatten$(List$cons$("Waiting for \'", List$cons$($8886, List$cons$("\'.", List$nil))));
                var $8852 = $8887;
                break;
            case 'Fm.Error.indirect':
                var $8888 = self.name;
                var $8889 = String$flatten$(List$cons$("Error on dependency \'", List$cons$($8888, List$cons$("\'.", List$nil))));
                var $8852 = $8889;
                break;
            case 'Fm.Error.patch':
                var $8890 = self.path;
                var $8891 = self.term;
                var $8892 = String$flatten$(List$cons$("Patching: ", List$cons$(Fm$Term$show$($8891), List$nil)));
                var $8852 = $8892;
                break;
            case 'Fm.Error.undefined_reference':
                var $8893 = self.origin;
                var $8894 = self.name;
                var $8895 = String$flatten$(List$cons$("Undefined reference: ", List$cons$(Fm$Name$show$($8894), List$cons$("\u{a}", List$nil))));
                var $8852 = $8895;
                break;
            case 'Fm.Error.cant_infer':
                var $8896 = self.origin;
                var $8897 = self.term;
                var $8898 = self.context;
                var _term$6 = Fm$Term$show$($8897);
                var _context$7 = Fm$Context$show$($8898);
                var $8899 = String$flatten$(List$cons$("Can\'t infer type of: ", List$cons$(_term$6, List$cons$("\u{a}", List$cons$("With ctxt:\u{a}", List$cons$(_context$7, List$nil))))));
                var $8852 = $8899;
                break;
        };
        return $8852;
    };
    const Fm$Error$show = x0 => x1 => Fm$Error$show$(x0, x1);

    function Fm$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $8901 = self.origin;
                var $8902 = self.expected;
                var $8903 = self.detected;
                var $8904 = self.context;
                var $8905 = $8901;
                var $8900 = $8905;
                break;
            case 'Fm.Error.show_goal':
                var $8906 = self.name;
                var $8907 = self.dref;
                var $8908 = self.verb;
                var $8909 = self.goal;
                var $8910 = self.context;
                var $8911 = Maybe$none;
                var $8900 = $8911;
                break;
            case 'Fm.Error.waiting':
                var $8912 = self.name;
                var $8913 = Maybe$none;
                var $8900 = $8913;
                break;
            case 'Fm.Error.indirect':
                var $8914 = self.name;
                var $8915 = Maybe$none;
                var $8900 = $8915;
                break;
            case 'Fm.Error.patch':
                var $8916 = self.path;
                var $8917 = self.term;
                var $8918 = Maybe$none;
                var $8900 = $8918;
                break;
            case 'Fm.Error.undefined_reference':
                var $8919 = self.origin;
                var $8920 = self.name;
                var $8921 = $8919;
                var $8900 = $8921;
                break;
            case 'Fm.Error.cant_infer':
                var $8922 = self.origin;
                var $8923 = self.term;
                var $8924 = self.context;
                var $8925 = $8922;
                var $8900 = $8925;
                break;
        };
        return $8900;
    };
    const Fm$Error$origin = x0 => Fm$Error$origin$(x0);

    function Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4) {
        var Fm$Defs$report$go$ = (_defs$1, _list$2, _errs$3, _typs$4) => ({
            ctr: 'TCO',
            arg: [_defs$1, _list$2, _errs$3, _typs$4]
        });
        var Fm$Defs$report$go = _defs$1 => _list$2 => _errs$3 => _typs$4 => Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4);
        var arg = [_defs$1, _list$2, _errs$3, _typs$4];
        while (true) {
            let [_defs$1, _list$2, _errs$3, _typs$4] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.nil':
                        var $8926 = String$flatten$(List$cons$(_typs$4, List$cons$("\u{a}", List$cons$((() => {
                            var self = _errs$3;
                            if (self.length === 0) {
                                var $8927 = "All terms check.";
                                return $8927;
                            } else {
                                var $8928 = self.charCodeAt(0);
                                var $8929 = self.slice(1);
                                var $8930 = _errs$3;
                                return $8930;
                            };
                        })(), List$nil))));
                        return $8926;
                    case 'List.cons':
                        var $8931 = self.head;
                        var $8932 = self.tail;
                        var _name$7 = $8931;
                        var self = Fm$get$(_name$7, _defs$1);
                        switch (self._) {
                            case 'Maybe.none':
                                var $8934 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$4);
                                var $8933 = $8934;
                                break;
                            case 'Maybe.some':
                                var $8935 = self.value;
                                var self = $8935;
                                switch (self._) {
                                    case 'Fm.Def.new':
                                        var $8937 = self.file;
                                        var $8938 = self.code;
                                        var $8939 = self.name;
                                        var $8940 = self.term;
                                        var $8941 = self.type;
                                        var $8942 = self.stat;
                                        var _typs$15 = String$flatten$(List$cons$(_typs$4, List$cons$(_name$7, List$cons$(": ", List$cons$(Fm$Term$show$($8941), List$cons$("\u{a}", List$nil))))));
                                        var self = $8942;
                                        switch (self._) {
                                            case 'Fm.Status.init':
                                                var $8944 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$15);
                                                var $8943 = $8944;
                                                break;
                                            case 'Fm.Status.wait':
                                                var $8945 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$15);
                                                var $8943 = $8945;
                                                break;
                                            case 'Fm.Status.done':
                                                var $8946 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$15);
                                                var $8943 = $8946;
                                                break;
                                            case 'Fm.Status.fail':
                                                var $8947 = self.errors;
                                                var self = $8947;
                                                switch (self._) {
                                                    case 'List.nil':
                                                        var $8949 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$15);
                                                        var $8948 = $8949;
                                                        break;
                                                    case 'List.cons':
                                                        var $8950 = self.head;
                                                        var $8951 = self.tail;
                                                        var _name_str$19 = Fm$Name$show$($8939);
                                                        var _rel_errs$20 = Fm$Error$relevant$($8947, Bool$false);
                                                        var self = _rel_errs$20;
                                                        switch (self._) {
                                                            case 'List.nil':
                                                                var $8953 = Fm$Defs$report$go$(_defs$1, $8932, _errs$3, _typs$15);
                                                                var $8952 = $8953;
                                                                break;
                                                            case 'List.cons':
                                                                var $8954 = self.head;
                                                                var $8955 = self.tail;
                                                                var _rel_msgs$23 = List$mapped$(_rel_errs$20, (_err$23 => {
                                                                    var $8957 = String$flatten$(List$cons$(Fm$Error$show$(_err$23, _defs$1), List$cons$((() => {
                                                                        var self = Fm$Error$origin$(_err$23);
                                                                        switch (self._) {
                                                                            case 'Maybe.none':
                                                                                var $8958 = "";
                                                                                return $8958;
                                                                            case 'Maybe.some':
                                                                                var $8959 = self.value;
                                                                                var self = $8959;
                                                                                switch (self._) {
                                                                                    case 'Fm.Origin.new':
                                                                                        var $8961 = self.file;
                                                                                        var $8962 = self.from;
                                                                                        var $8963 = self.upto;
                                                                                        var $8964 = String$flatten$(List$cons$("Inside \'", List$cons$($8937, List$cons$("\':\u{a}", List$cons$(Fm$highlight$($8938, $8962, $8963), List$cons$("\u{a}", List$nil))))));
                                                                                        var $8960 = $8964;
                                                                                        break;
                                                                                };
                                                                                return $8960;
                                                                        };
                                                                    })(), List$nil)));
                                                                    return $8957;
                                                                }));
                                                                var _errs$24 = String$flatten$(List$cons$(_errs$3, List$cons$(String$join$("\u{a}", _rel_msgs$23), List$cons$("\u{a}", List$nil))));
                                                                var $8956 = Fm$Defs$report$go$(_defs$1, $8932, _errs$24, _typs$15);
                                                                var $8952 = $8956;
                                                                break;
                                                        };
                                                        var $8948 = $8952;
                                                        break;
                                                };
                                                var $8943 = $8948;
                                                break;
                                        };
                                        var $8936 = $8943;
                                        break;
                                };
                                var $8933 = $8936;
                                break;
                        };
                        return $8933;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Defs$report$go = x0 => x1 => x2 => x3 => Fm$Defs$report$go$(x0, x1, x2, x3);

    function Fm$Defs$report$(_defs$1, _list$2) {
        var $8965 = Fm$Defs$report$go$(_defs$1, _list$2, "", "");
        return $8965;
    };
    const Fm$Defs$report = x0 => x1 => Fm$Defs$report$(x0, x1);

    function Fm$checker$io$one$(_name$1) {
        var $8966 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8967 = _m$bind$2;
            return $8967;
        }))(Fm$Synth$one$(_name$1, Map$new))((_defs$2 => {
            var $8968 = IO$print$(Fm$Defs$report$(_defs$2, List$cons$(_name$1, List$nil)));
            return $8968;
        }));
        return $8966;
    };
    const Fm$checker$io$one = x0 => Fm$checker$io$one$(x0);

    function Map$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8970 = _list$4;
                var $8969 = $8970;
                break;
            case 'Map.tie':
                var $8971 = self.val;
                var $8972 = self.lft;
                var $8973 = self.rgt;
                var self = $8971;
                switch (self._) {
                    case 'Maybe.none':
                        var $8975 = _list$4;
                        var _list0$8 = $8975;
                        break;
                    case 'Maybe.some':
                        var $8976 = self.value;
                        var $8977 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $8977;
                        break;
                };
                var _list1$9 = Map$keys$go$($8972, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$keys$go$($8973, (_key$3 + '1'), _list1$9);
                var $8974 = _list2$10;
                var $8969 = $8974;
                break;
        };
        return $8969;
    };
    const Map$keys$go = x0 => x1 => x2 => Map$keys$go$(x0, x1, x2);

    function Map$keys$(_xs$2) {
        var $8978 = List$reverse$(Map$keys$go$(_xs$2, Bits$e, List$nil));
        return $8978;
    };
    const Map$keys = x0 => Map$keys$(x0);

    function Fm$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $8980 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8981 = _m$pure$4;
                    return $8981;
                }))(_defs$2);
                var $8979 = $8980;
                break;
            case 'List.cons':
                var $8982 = self.head;
                var $8983 = self.tail;
                var $8984 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8985 = _m$bind$5;
                    return $8985;
                }))(Fm$Synth$one$($8982, _defs$2))((_defs$5 => {
                    var $8986 = Fm$Synth$many$($8983, _defs$5);
                    return $8986;
                }));
                var $8979 = $8984;
                break;
        };
        return $8979;
    };
    const Fm$Synth$many = x0 => x1 => Fm$Synth$many$(x0, x1);

    function Fm$Synth$file$(_file$1, _defs$2) {
        var $8987 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8988 = _m$bind$3;
            return $8988;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Fm$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $8990 = self.value;
                    var $8991 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $8992 = _m$pure$7;
                        return $8992;
                    }))(Either$left$($8990));
                    var $8989 = $8991;
                    break;
                case 'Either.right':
                    var $8993 = self.value;
                    var _file_defs$6 = $8993;
                    var _file_keys$7 = Map$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Fm$Name$from_bits);
                    var $8994 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $8995 = _m$bind$9;
                        return $8995;
                    }))(Fm$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $8996 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $8997 = _m$pure$11;
                            return $8997;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $8996;
                    }));
                    var $8989 = $8994;
                    break;
            };
            return $8989;
        }));
        return $8987;
    };
    const Fm$Synth$file = x0 => x1 => Fm$Synth$file$(x0, x1);

    function Fm$checker$io$file$(_file$1) {
        var $8998 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8999 = _m$bind$2;
            return $8999;
        }))(Fm$Synth$file$(_file$1, Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $9001 = self.value;
                    var $9002 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $9003 = _m$bind$4;
                        return $9003;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $9004 = IO$print$($9001);
                        return $9004;
                    }));
                    var $9000 = $9002;
                    break;
                case 'Either.right':
                    var $9005 = self.value;
                    var self = $9005;
                    switch (self._) {
                        case 'Pair.new':
                            var $9007 = self.fst;
                            var $9008 = self.snd;
                            var _nams$6 = $9007;
                            var _defs$7 = $9008;
                            var $9009 = IO$print$(Fm$Defs$report$(_defs$7, _nams$6));
                            var $9006 = $9009;
                            break;
                    };
                    var $9000 = $9006;
                    break;
            };
            return $9000;
        }));
        return $8998;
    };
    const Fm$checker$io$file = x0 => Fm$checker$io$file$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $9010 = self.value;
                        var $9011 = $9010;
                        return $9011;
                    case 'IO.ask':
                        var $9012 = self.query;
                        var $9013 = self.param;
                        var $9014 = self.then;
                        var $9015 = IO$purify$($9014(""));
                        return $9015;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Fm$checker$code$(_code$1) {
        var self = Fm$Defs$read$("Main.fm", _code$1, Map$new);
        switch (self._) {
            case 'Either.left':
                var $9017 = self.value;
                var $9018 = $9017;
                var $9016 = $9018;
                break;
            case 'Either.right':
                var $9019 = self.value;
                var $9020 = IO$purify$((() => {
                    var _defs$3 = $9019;
                    var _nams$4 = List$mapped$(Map$keys$(_defs$3), Fm$Name$from_bits);
                    var $9021 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $9022 = _m$bind$5;
                        return $9022;
                    }))(Fm$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $9023 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $9024 = _m$pure$7;
                            return $9024;
                        }))(Fm$Defs$report$(_defs$5, _nams$4));
                        return $9023;
                    }));
                    return $9021;
                })());
                var $9016 = $9020;
                break;
        };
        return $9016;
    };
    const Fm$checker$code = x0 => Fm$checker$code$(x0);

    function Fm$Term$read$(_code$1) {
        var self = Fm$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.error':
                var $9026 = self.idx;
                var $9027 = self.code;
                var $9028 = self.err;
                var $9029 = Maybe$none;
                var $9025 = $9029;
                break;
            case 'Parser.Reply.value':
                var $9030 = self.idx;
                var $9031 = self.code;
                var $9032 = self.val;
                var $9033 = Maybe$some$($9032);
                var $9025 = $9033;
                break;
        };
        return $9025;
    };
    const Fm$Term$read = x0 => Fm$Term$read$(x0);
    const Fm = (() => {
        var __$1 = Fm$to_core$io$one;
        var __$2 = Fm$checker$io$one;
        var __$3 = Fm$checker$io$file;
        var __$4 = Fm$checker$code;
        var __$5 = Fm$Term$read;
        var $9034 = IO$monad$((_m$bind$6 => _m$pure$7 => {
            var $9035 = _m$bind$6;
            return $9035;
        }))(Fm$to_core$io$one$("Fm"))((_s$6 => {
            var $9036 = IO$print$(_s$6);
            return $9036;
        }));
        return $9034;
    })();
    return {
        '$main$': () => run(Fm),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Map': Map,
        'Maybe': Maybe,
        'Maybe.none': Maybe$none,
        'Map.get': Map$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Fm.Name.to_bits': Fm$Name$to_bits,
        'Fm.get': Fm$get,
        'String.cons': String$cons,
        'Fm.Synth.file_of': Fm$Synth$file_of,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Fm.Parser.spaces': Fm$Parser$spaces,
        'Fm.Parser.text': Fm$Parser$text,
        'Parser.many1': Parser$many1,
        'Fm.Name.is_letter': Fm$Name$is_letter,
        'Fm.Parser.letter': Fm$Parser$letter,
        'List.fold': List$fold,
        'Fm.Parser.name1': Fm$Parser$name1,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Fm.Parser.item': Fm$Parser$item,
        'Fm.Parser.name': Fm$Parser$name,
        'Parser.get_code': Parser$get_code,
        'Parser.get_index': Parser$get_index,
        'Fm.Parser.init': Fm$Parser$init,
        'Fm.Origin.new': Fm$Origin$new,
        'Fm.Parser.stop': Fm$Parser$stop,
        'Fm.Term.ori': Fm$Term$ori,
        'Fm.Term.typ': Fm$Term$typ,
        'Fm.Parser.type': Fm$Parser$type,
        'Fm.Term.all': Fm$Term$all,
        'Fm.Parser.forall': Fm$Parser$forall,
        'Fm.Term.lam': Fm$Term$lam,
        'Fm.Parser.make_lambda': Fm$Parser$make_lambda,
        'Fm.Parser.lambda': Fm$Parser$lambda,
        'Fm.Parser.lambda.erased': Fm$Parser$lambda$erased,
        'Fm.Parser.lambda.nameless': Fm$Parser$lambda$nameless,
        'Fm.Parser.parenthesis': Fm$Parser$parenthesis,
        'Fm.Term.ref': Fm$Term$ref,
        'Fm.Term.app': Fm$Term$app,
        'Fm.Term.hol': Fm$Term$hol,
        'Fm.Term.let': Fm$Term$let,
        'Fm.Parser.letforrange.u32': Fm$Parser$letforrange$u32,
        'Fm.Parser.letforin': Fm$Parser$letforin,
        'Fm.Parser.let': Fm$Parser$let,
        'Fm.Parser.get': Fm$Parser$get,
        'Fm.Term.def': Fm$Term$def,
        'Fm.Parser.def': Fm$Parser$def,
        'Fm.Parser.if': Fm$Parser$if,
        'List.mapped': List$mapped,
        'Pair.new': Pair$new,
        'Fm.backslash': Fm$backslash,
        'Fm.escapes': Fm$escapes,
        'Fm.Parser.char.single': Fm$Parser$char$single,
        'Fm.Term.chr': Fm$Term$chr,
        'Fm.Parser.char': Fm$Parser$char,
        'Fm.Term.str': Fm$Term$str,
        'Fm.Parser.string': Fm$Parser$string,
        'Fm.Parser.pair': Fm$Parser$pair,
        'Fm.Parser.sigma.type': Fm$Parser$sigma$type,
        'Fm.Parser.some': Fm$Parser$some,
        'Fm.Parser.apply': Fm$Parser$apply,
        'Fm.Name.read': Fm$Name$read,
        'Fm.Parser.list': Fm$Parser$list,
        'Fm.Parser.log': Fm$Parser$log,
        'Fm.Parser.forrange.u32': Fm$Parser$forrange$u32,
        'Fm.Parser.forrange.u32.2': Fm$Parser$forrange$u32$2,
        'Fm.Parser.forin': Fm$Parser$forin,
        'Fm.Parser.forin.2': Fm$Parser$forin$2,
        'Fm.Parser.do.statements': Fm$Parser$do$statements,
        'Fm.Parser.do': Fm$Parser$do,
        'Fm.Term.nat': Fm$Term$nat,
        'Fm.Term.unroll_nat': Fm$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Fm.Term.unroll_chr.bits': Fm$Term$unroll_chr$bits,
        'Fm.Term.unroll_chr': Fm$Term$unroll_chr,
        'Fm.Term.unroll_str': Fm$Term$unroll_str,
        'Fm.Term.reduce': Fm$Term$reduce,
        'Map.new': Map$new,
        'Fm.Def.new': Fm$Def$new,
        'Fm.Status.init': Fm$Status$init,
        'Fm.Parser.case.with': Fm$Parser$case$with,
        'Fm.Parser.case.case': Fm$Parser$case$case,
        'Map.tie': Map$tie,
        'Map.set': Map$set,
        'Map.from_list': Map$from_list,
        'Pair.fst': Pair$fst,
        'Pair.snd': Pair$snd,
        'Fm.Term.cse': Fm$Term$cse,
        'Fm.Parser.case': Fm$Parser$case,
        'Fm.set': Fm$set,
        'Fm.Parser.open': Fm$Parser$open,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.to_bool': Maybe$to_bool,
        'Fm.Term.gol': Fm$Term$gol,
        'Fm.Parser.goal': Fm$Parser$goal,
        'Fm.Parser.hole': Fm$Parser$hole,
        'Fm.Parser.u8': Fm$Parser$u8,
        'Fm.Parser.u16': Fm$Parser$u16,
        'Fm.Parser.u32': Fm$Parser$u32,
        'Fm.Parser.u64': Fm$Parser$u64,
        'Fm.Parser.nat': Fm$Parser$nat,
        'String.eql': String$eql,
        'Parser.fail': Parser$fail,
        'Fm.Parser.reference': Fm$Parser$reference,
        'List.for': List$for,
        'Fm.Parser.application': Fm$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Fm.Parser.application.erased': Fm$Parser$application$erased,
        'Fm.Parser.application.hole': Fm$Parser$application$hole,
        'Fm.Parser.arrow': Fm$Parser$arrow,
        'Fm.Parser.op': Fm$Parser$op,
        'Fm.Parser.add': Fm$Parser$add,
        'Fm.Parser.sub': Fm$Parser$sub,
        'Fm.Parser.mul': Fm$Parser$mul,
        'Fm.Parser.div': Fm$Parser$div,
        'Fm.Parser.mod': Fm$Parser$mod,
        'Fm.Parser.cons': Fm$Parser$cons,
        'Fm.Parser.concat': Fm$Parser$concat,
        'Fm.Parser.string_concat': Fm$Parser$string_concat,
        'Fm.Parser.sigma': Fm$Parser$sigma,
        'Fm.Parser.equality': Fm$Parser$equality,
        'Fm.Parser.inequality': Fm$Parser$inequality,
        'Fm.Parser.rewrite': Fm$Parser$rewrite,
        'Fm.Term.ann': Fm$Term$ann,
        'Fm.Parser.annotation': Fm$Parser$annotation,
        'Fm.Parser.suffix': Fm$Parser$suffix,
        'Fm.Parser.term': Fm$Parser$term,
        'Fm.Parser.name_term': Fm$Parser$name_term,
        'Fm.Binder.new': Fm$Binder$new,
        'Fm.Parser.binder.homo': Fm$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Fm.Parser.binder': Fm$Parser$binder,
        'Fm.Parser.make_forall': Fm$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Fm.Term.var': Fm$Term$var,
        'Fm.Name.eql': Fm$Name$eql,
        'Fm.Context.find': Fm$Context$find,
        'List.length': List$length,
        'Fm.Path.o': Fm$Path$o,
        'Fm.Path.i': Fm$Path$i,
        'Fm.Path.to_bits': Fm$Path$to_bits,
        'Fm.Term.bind': Fm$Term$bind,
        'Fm.Status.done': Fm$Status$done,
        'Fm.define': Fm$define,
        'Fm.Parser.file.def': Fm$Parser$file$def,
        'Maybe.default': Maybe$default,
        'Fm.Constructor.new': Fm$Constructor$new,
        'Fm.Parser.constructor': Fm$Parser$constructor,
        'Fm.Datatype.new': Fm$Datatype$new,
        'Fm.Parser.datatype': Fm$Parser$datatype,
        'Fm.Datatype.build_term.motive.go': Fm$Datatype$build_term$motive$go,
        'Fm.Datatype.build_term.motive': Fm$Datatype$build_term$motive,
        'Fm.Datatype.build_term.constructor.go': Fm$Datatype$build_term$constructor$go,
        'Fm.Datatype.build_term.constructor': Fm$Datatype$build_term$constructor,
        'Fm.Datatype.build_term.constructors.go': Fm$Datatype$build_term$constructors$go,
        'Fm.Datatype.build_term.constructors': Fm$Datatype$build_term$constructors,
        'Fm.Datatype.build_term.go': Fm$Datatype$build_term$go,
        'Fm.Datatype.build_term': Fm$Datatype$build_term,
        'Fm.Datatype.build_type.go': Fm$Datatype$build_type$go,
        'Fm.Datatype.build_type': Fm$Datatype$build_type,
        'Fm.Constructor.build_term.opt.go': Fm$Constructor$build_term$opt$go,
        'Fm.Constructor.build_term.opt': Fm$Constructor$build_term$opt,
        'Fm.Constructor.build_term.go': Fm$Constructor$build_term$go,
        'Fm.Constructor.build_term': Fm$Constructor$build_term,
        'Fm.Constructor.build_type.go': Fm$Constructor$build_type$go,
        'Fm.Constructor.build_type': Fm$Constructor$build_type,
        'Fm.Parser.file.adt': Fm$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Fm.Parser.file.end': Fm$Parser$file$end,
        'Fm.Parser.file': Fm$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Fm.highlight.end': Fm$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'List.take': List$take,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Fm.color': Fm$color,
        'Fm.highlight.tc': Fm$highlight$tc,
        'Fm.highlight': Fm$highlight,
        'Fm.Defs.read': Fm$Defs$read,
        'IO.print': IO$print,
        'IO.exit': IO$exit,
        'Fm.Synth.load': Fm$Synth$load,
        'Fm.Status.wait': Fm$Status$wait,
        'Fm.Check': Fm$Check,
        'Fm.Check.result': Fm$Check$result,
        'Fm.Error.undefined_reference': Fm$Error$undefined_reference,
        'Fm.Error.waiting': Fm$Error$waiting,
        'Fm.Error.indirect': Fm$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Fm.MPath.o': Fm$MPath$o,
        'Fm.MPath.i': Fm$MPath$i,
        'Fm.Error.patch': Fm$Error$patch,
        'Fm.MPath.to_bits': Fm$MPath$to_bits,
        'Fm.Error.type_mismatch': Fm$Error$type_mismatch,
        'Fm.Error.show_goal': Fm$Error$show_goal,
        'Fm.Term.normalize': Fm$Term$normalize,
        'List.tail': List$tail,
        'Fm.SmartMotive.vals.cont': Fm$SmartMotive$vals$cont,
        'Fm.SmartMotive.vals': Fm$SmartMotive$vals,
        'Fm.SmartMotive.nams.cont': Fm$SmartMotive$nams$cont,
        'Fm.SmartMotive.nams': Fm$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Fm.Term.serialize.name': Fm$Term$serialize$name,
        'Fm.Term.serialize': Fm$Term$serialize,
        'Bits.eql': Bits$eql,
        'Fm.Term.identical': Fm$Term$identical,
        'Fm.SmartMotive.replace': Fm$SmartMotive$replace,
        'Fm.SmartMotive.make': Fm$SmartMotive$make,
        'Fm.Term.desugar_cse.motive': Fm$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Fm.Term.desugar_cse.argument': Fm$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Fm.Term.desugar_cse.cases': Fm$Term$desugar_cse$cases,
        'Fm.Term.desugar_cse': Fm$Term$desugar_cse,
        'Fm.Error.cant_infer': Fm$Error$cant_infer,
        'Set.has': Set$has,
        'Fm.Term.equal.patch': Fm$Term$equal$patch,
        'Fm.Term.equal.extra_holes': Fm$Term$equal$extra_holes,
        'Set.set': Set$set,
        'Bool.eql': Bool$eql,
        'Fm.Term.equal': Fm$Term$equal,
        'Set.new': Set$new,
        'Fm.Term.check': Fm$Term$check,
        'Fm.Path.nil': Fm$Path$nil,
        'Fm.MPath.nil': Fm$MPath$nil,
        'List.is_empty': List$is_empty,
        'Fm.Term.patch_at': Fm$Term$patch_at,
        'Fm.Synth.fix': Fm$Synth$fix,
        'Fm.Status.fail': Fm$Status$fail,
        'Fm.Synth.one': Fm$Synth$one,
        'Map.map': Map$map,
        'Fm.Term.inline.names': Fm$Term$inline$names,
        'Fm.Term.inline.reduce': Fm$Term$inline$reduce,
        'Fm.Term.inline': Fm$Term$inline,
        'Map.values.go': Map$values$go,
        'Map.values': Map$values,
        'Fm.Term.core.var_name': Fm$Term$core$var_name,
        'Fm.Name.show': Fm$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Fm.escape.char': Fm$escape$char,
        'Fm.escape': Fm$escape,
        'Fm.Term.core': Fm$Term$core,
        'Fm.Defs.core': Fm$Defs$core,
        'Fm.to_core.io.one': Fm$to_core$io$one,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Fm.Term.show.as_nat.go': Fm$Term$show$as_nat$go,
        'Fm.Term.show.as_nat': Fm$Term$show$as_nat,
        'Fm.Term.show.is_ref': Fm$Term$show$is_ref,
        'Nat.eql': Nat$eql,
        'Fm.Term.show.app': Fm$Term$show$app,
        'Map.to_list.go': Map$to_list$go,
        'Map.to_list': Map$to_list,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Fm.Name.from_bits': Fm$Name$from_bits,
        'Fm.Term.show.go': Fm$Term$show$go,
        'Fm.Term.show': Fm$Term$show,
        'Fm.Error.relevant': Fm$Error$relevant,
        'Fm.Context.show': Fm$Context$show,
        'Fm.Term.expand_at': Fm$Term$expand_at,
        'Bool.or': Bool$or,
        'Fm.Term.expand_ct': Fm$Term$expand_ct,
        'Fm.Term.expand': Fm$Term$expand,
        'Fm.Error.show': Fm$Error$show,
        'Fm.Error.origin': Fm$Error$origin,
        'Fm.Defs.report.go': Fm$Defs$report$go,
        'Fm.Defs.report': Fm$Defs$report,
        'Fm.checker.io.one': Fm$checker$io$one,
        'Map.keys.go': Map$keys$go,
        'Map.keys': Map$keys,
        'Fm.Synth.many': Fm$Synth$many,
        'Fm.Synth.file': Fm$Synth$file,
        'Fm.checker.io.file': Fm$checker$io$file,
        'IO.purify': IO$purify,
        'Fm.checker.code': Fm$checker$code,
        'Fm.Term.read': Fm$Term$read,
        'Fm': Fm,
    };
})();